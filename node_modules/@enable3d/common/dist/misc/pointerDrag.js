class PointerDrag {
    constructor(_element, autoStart = true) {
        this._element = _element;
        this._isRunning = false;
        this._position = { x: 0, y: 0 };
        this._delta = { x: 0, y: 0 };
        this._onMoveCallback = () => { };
        this._isPointerDown = false;
        if (autoStart)
            this.start();
    }
    get isTouchDevice() {
        return 'ontouchstart' in window;
    }
    get isPointerDown() {
        return this._isPointerDown;
    }
    start() {
        if (this._isRunning)
            return;
        this._isRunning = true;
        if (this.isTouchDevice) {
            this._element.addEventListener('touchstart', e => this.onTouchStart(e));
            this._element.addEventListener('touchend', e => this.onTouchEnd(e));
            this._element.addEventListener('touchmove', e => this.onTouchMove(e));
        }
        else {
            this._element.addEventListener('mousedown', e => this.onPointerDown(e));
            this._element.addEventListener('mouseup', e => this.onPointerUp(e));
            this._element.addEventListener('mouseleave', e => this.onPointerLeave(e));
            this._element.addEventListener('mouseover', e => this.onPointerOver(e));
            this._element.addEventListener('mousemove', e => this.onPointerMove(e));
        }
    }
    stop() {
        if (this.isTouchDevice) {
            this._element.removeEventListener('touchstart', e => this.onTouchStart(e));
            this._element.removeEventListener('touchend', e => this.onTouchEnd(e));
            this._element.removeEventListener('touchmove', e => this.onTouchMove(e));
        }
        else {
            this._element.removeEventListener('mousedown', e => this.onPointerDown(e));
            this._element.removeEventListener('mouseleave', e => this.onPointerLeave(e));
            this._element.removeEventListener('mouseup', e => this.onPointerUp(e));
            this._element.removeEventListener('mouseover', e => this.onPointerOver(e));
            this._element.removeEventListener('mousemove', e => this.onPointerMove(e));
        }
        this._isRunning = false;
    }
    removeListeners() {
        this.stop();
    }
    onMove(onMoveCallback) {
        this._onMoveCallback = onMoveCallback;
    }
    onPointerDown(_e) {
        this._isPointerDown = true;
    }
    onPointerUp(_e) {
        this._isPointerDown = false;
    }
    onPointerLeave(_e) {
        this._isPointerDown = false;
    }
    onPointerMove(e) {
        const clientX = e.movementX;
        const clientY = e.movementY;
        this._delta = { x: clientX, y: clientY };
        this._onMoveCallback(this._delta);
    }
    onPointerOver(_e) { }
    onTouchStart(e) {
        const clientX = e.touches[0].clientX;
        const clientY = e.touches[0].clientY;
        this._position = { x: clientX, y: clientY };
    }
    onTouchEnd(_e) {
        this._position = { x: 0, y: 0 };
        this._delta = { x: 0, y: 0 };
        this._onMoveCallback(this._delta);
    }
    onTouchMove(e) {
        const clientX = e.touches[0].clientX;
        const clientY = e.touches[0].clientY;
        this._delta = { x: clientX - this._position.x, y: clientY - this._position.y };
        this._onMoveCallback(this._delta);
        this._position = { x: clientX, y: clientY };
    }
}
export { PointerDrag };
//# sourceMappingURL=pointerDrag.js.map