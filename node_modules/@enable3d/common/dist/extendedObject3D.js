/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2021 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
import { AnimationMixer, LoopOnce, Object3D, Vector3 } from 'three';
import { logger } from './logger';
export class ExtendedObject3D extends Object3D {
    constructor() {
        super();
        this.isExtendedObject3D = true;
        this.isGroup = false;
        this.vector3 = new Vector3();
        this.hasBody = false;
        // convex object breaking
        this.fragmentDepth = 0;
        this.breakable = false;
        this.fractureImpulse = 1;
        this._currentAnimation = '';
        this._animationActions = new Map();
        this.name = `object-${this.id}`;
    }
    /** Returns all values relative to the world. */
    get world() {
        return {
            theta: this.worldTheta,
            phi: this.worldPhi
        };
    }
    /** Get the theta relative to the world. */
    get worldTheta() {
        this.getWorldDirection(this.vector3);
        return Math.atan2(this.vector3.x, this.vector3.z);
    }
    /** Get the phi relative to the world. */
    get worldPhi() {
        this.getWorldDirection(this.vector3);
        return Math.acos(this.vector3.y);
    }
    set animationMixer(animationMixer) {
        this._animationMixer = animationMixer;
    }
    get animationMixer() {
        if (!this._animationMixer)
            this._animationMixer = new AnimationMixer(this);
        return this._animationMixer;
    }
    /** Control your animations. */
    get anims() {
        return {
            /** Get the name of the current animation. */
            current: this._currentAnimation,
            /** Add animation name and the AnimationClip. */
            add: (name, animation) => this._animsAdd(name, animation),
            /** Get AnimationAction by animation name. */
            get: (name) => this._animsGet(name),
            /**
             * Play an animation.
             * @param name Animation name.
             * @param transitionDuration Transition duration in ms.
             * @param loop Should the animation loop?
             */
            play: (name, transitionDuration = 500, loop = true) => this._animsPlay(name, transitionDuration, loop),
            /** Get the AnimationMixer */
            mixer: this.animationMixer
        };
    }
    /** @deprecated Please use anims instead! */
    get animation() {
        logger('Please use "anims" instead of "animation"');
        return this.anims;
    }
    _animsAdd(name, animation) {
        this._animationActions.set(name, this.animationMixer.clipAction(animation));
    }
    _animsGet(name) {
        const action = this._animationActions.get(name);
        if (!action)
            logger(`Animation(${name}) not found!`);
        return action;
    }
    _animsPlay(name, transitionDuration = 500, loop = true) {
        const next = this._animationActions.get(name);
        const current = this._animationActions.get(this._currentAnimation);
        if (next) {
            next.reset();
            if (current) {
                next.crossFadeFrom(current, transitionDuration / 1000, true);
                next.clampWhenFinished = true;
            }
            if (!loop)
                next.setLoop(LoopOnce, 0);
            next.play();
        }
        this._currentAnimation = name;
    }
    /** @deprecated Use animation.play(name) instead! */
    setAction(name) {
        logger(`setAction(${name}) is deprecated. Use animation.play(${name}) instead!`);
    }
    traverse(callback) {
        super.traverse(callback);
    }
    traverseVisible(callback) {
        super.traverseVisible(callback);
    }
    traverseAncestors(callback) {
        super.traverseAncestors(callback);
    }
}
export default ExtendedObject3D;
//# sourceMappingURL=extendedObject3D.js.map