/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|GNU GPLv3}
 */
import { AddMaterial, BoxObject, ConeObject, CylinderObject, ExtrudeObject, GroundObject, MaterialConfig, PlaneObject, SphereObject, TorusConfig } from './types';
import { Scene } from 'three';
import { ExtendedObject3D } from './extendedObject3D';
import DefaultMaterial from './defaultMaterial';
export default class Factories {
    private scene;
    protected defaultMaterial: DefaultMaterial;
    isHeadless: boolean;
    constructor(scene: Scene | 'headless');
    get make(): {
        extrude: ExtrudeObject;
        plane: PlaneObject;
        box: BoxObject;
        sphere: SphereObject;
        cylinder: CylinderObject;
        cone: ConeObject;
        torus: (torusConfig?: TorusConfig, materialConfig?: MaterialConfig) => ExtendedObject3D;
    };
    get add(): {
        mesh: any;
        material: AddMaterial;
        extrude: ExtrudeObject;
        existing: any;
        plane: PlaneObject;
        ground: GroundObject;
        box: BoxObject;
        sphere: SphereObject;
        cylinder: CylinderObject;
        cone: ConeObject;
        torus: (torusConfig?: TorusConfig, materialConfig?: MaterialConfig) => ExtendedObject3D;
    };
    private addExisting;
    private addMesh;
    private createMesh;
    private makeExtrude;
    private addExtrude;
    private makePlane;
    private addPlane;
    private makeSphere;
    private addSphere;
    private makeBox;
    private addBox;
    private addGround;
    private makeCylinder;
    private addCylinder;
    private makeCone;
    private addCone;
    private makeTorus;
    private addTorus;
    private addMaterial;
}
//# sourceMappingURL=factories.d.ts.map