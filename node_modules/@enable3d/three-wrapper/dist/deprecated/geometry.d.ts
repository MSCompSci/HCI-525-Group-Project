export class Face3 {
    constructor(a: any, b: any, c: any, normal: any, color: any, materialIndex?: number);
    a: any;
    b: any;
    c: any;
    normal: any;
    vertexNormals: any[];
    color: any;
    vertexColors: any[];
    materialIndex: number;
    clone(): any;
    copy(source: any): Face3;
}
export class Geometry extends EventDispatcher<import("three").Event> {
    static createBufferGeometryFromObject(object: any): BufferGeometry;
    constructor();
    uuid: string;
    name: string;
    type: string;
    vertices: any[];
    colors: any[];
    faces: any[];
    faceVertexUvs: never[][];
    morphTargets: any[];
    morphNormals: any[];
    skinWeights: any[];
    skinIndices: any[];
    lineDistances: any[];
    boundingBox: any;
    boundingSphere: any;
    elementsNeedUpdate: boolean;
    verticesNeedUpdate: boolean;
    uvsNeedUpdate: boolean;
    normalsNeedUpdate: boolean;
    colorsNeedUpdate: boolean;
    lineDistancesNeedUpdate: boolean;
    groupsNeedUpdate: boolean;
    applyMatrix4(matrix: any): Geometry;
    rotateX(angle: any): Geometry;
    rotateY(angle: any): Geometry;
    rotateZ(angle: any): Geometry;
    translate(x: any, y: any, z: any): Geometry;
    scale(x: any, y: any, z: any): Geometry;
    lookAt(vector: any): Geometry;
    fromBufferGeometry(geometry: any): Geometry;
    center(): Geometry;
    normalize(): Geometry;
    computeFaceNormals(): void;
    computeVertexNormals(areaWeighted?: boolean): void;
    computeFlatVertexNormals(): void;
    computeMorphNormals(): void;
    computeBoundingBox(): void;
    computeBoundingSphere(): void;
    merge(geometry: any, matrix: any, materialIndexOffset?: number): void;
    mergeMesh(mesh: any): void;
    mergeVertices(precisionPoints?: number): number;
    setFromPoints(points: any): Geometry;
    sortFacesByMaterialIndex(): void;
    toJSON(): {
        metadata: {
            version: number;
            type: string;
            generator: string;
        };
    };
    clone(): Geometry;
    copy(source: any): Geometry;
    toBufferGeometry(): BufferGeometry;
    computeTangents(): void;
    computeLineDistances(): void;
    applyMatrix(matrix: any): Geometry;
    dispose(): void;
    isGeometry: boolean;
}
import { EventDispatcher } from "three/src/core/EventDispatcher";
import { BufferGeometry } from "three/src/core/BufferGeometry";
//# sourceMappingURL=geometry.d.ts.map