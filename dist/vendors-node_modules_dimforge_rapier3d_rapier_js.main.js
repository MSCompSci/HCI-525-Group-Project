"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhci_525_group_project_v2"] = self["webpackChunkhci_525_group_project_v2"] || []).push([["vendors-node_modules_dimforge_rapier3d_rapier_js"],{

/***/ "./node_modules/@dimforge/rapier3d/coarena.js":
/*!****************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/coarena.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Coarena\": () => (/* binding */ Coarena)\n/* harmony export */ });\nclass Coarena {\n    constructor() {\n        this.fconv = new Float64Array(1);\n        this.uconv = new Uint32Array(this.fconv.buffer);\n        this.data = new Array();\n        this.size = 0;\n    }\n    set(handle, data) {\n        let i = this.index(handle);\n        while (this.data.length <= i) {\n            this.data.push(null);\n        }\n        if (this.data[i] == null)\n            this.size += 1;\n        this.data[i] = data;\n    }\n    len() {\n        return this.size;\n    }\n    delete(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            if (this.data[i] != null)\n                this.size -= 1;\n            this.data[i] = null;\n        }\n    }\n    clear() {\n        this.data = new Array();\n    }\n    get(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            return this.data[i];\n        }\n        else {\n            return null;\n        }\n    }\n    forEach(f) {\n        for (const elt of this.data) {\n            if (elt != null)\n                f(elt);\n        }\n    }\n    getAll() {\n        return this.data.filter((elt) => elt != null);\n    }\n    index(handle) {\n        /// Extracts the index part of a handle (the lower 32 bits).\n        /// This is done by first injecting the handle into an Float64Array\n        /// which is itself injected into an Uint32Array (at construction time).\n        /// The 0-th value of the Uint32Array will become the `number` integer\n        /// representation of the lower 32 bits.\n        /// Also `this.uconv[1]` then contains the generation number as a `number`,\n        /// which we don’t really need.\n        this.fconv[0] = handle;\n        return this.uconv[0];\n    }\n}\n//# sourceMappingURL=coarena.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2NvYXJlbmEuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9jb2FyZW5hLmpzP2E0NDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvYXJlbmEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZjb252ID0gbmV3IEZsb2F0NjRBcnJheSgxKTtcbiAgICAgICAgdGhpcy51Y29udiA9IG5ldyBVaW50MzJBcnJheSh0aGlzLmZjb252LmJ1ZmZlcik7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cbiAgICBzZXQoaGFuZGxlLCBkYXRhKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5pbmRleChoYW5kbGUpO1xuICAgICAgICB3aGlsZSAodGhpcy5kYXRhLmxlbmd0aCA8PSBpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYXRhW2ldID09IG51bGwpXG4gICAgICAgICAgICB0aGlzLnNpemUgKz0gMTtcbiAgICAgICAgdGhpcy5kYXRhW2ldID0gZGF0YTtcbiAgICB9XG4gICAgbGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgIH1cbiAgICBkZWxldGUoaGFuZGxlKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5pbmRleChoYW5kbGUpO1xuICAgICAgICBpZiAoaSA8IHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbaV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgLT0gMTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBBcnJheSgpO1xuICAgIH1cbiAgICBnZXQoaGFuZGxlKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5pbmRleChoYW5kbGUpO1xuICAgICAgICBpZiAoaSA8IHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbaV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoKGYpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbHQgb2YgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBpZiAoZWx0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgZihlbHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5maWx0ZXIoKGVsdCkgPT4gZWx0ICE9IG51bGwpO1xuICAgIH1cbiAgICBpbmRleChoYW5kbGUpIHtcbiAgICAgICAgLy8vIEV4dHJhY3RzIHRoZSBpbmRleCBwYXJ0IG9mIGEgaGFuZGxlICh0aGUgbG93ZXIgMzIgYml0cykuXG4gICAgICAgIC8vLyBUaGlzIGlzIGRvbmUgYnkgZmlyc3QgaW5qZWN0aW5nIHRoZSBoYW5kbGUgaW50byBhbiBGbG9hdDY0QXJyYXlcbiAgICAgICAgLy8vIHdoaWNoIGlzIGl0c2VsZiBpbmplY3RlZCBpbnRvIGFuIFVpbnQzMkFycmF5IChhdCBjb25zdHJ1Y3Rpb24gdGltZSkuXG4gICAgICAgIC8vLyBUaGUgMC10aCB2YWx1ZSBvZiB0aGUgVWludDMyQXJyYXkgd2lsbCBiZWNvbWUgdGhlIGBudW1iZXJgIGludGVnZXJcbiAgICAgICAgLy8vIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBsb3dlciAzMiBiaXRzLlxuICAgICAgICAvLy8gQWxzbyBgdGhpcy51Y29udlsxXWAgdGhlbiBjb250YWlucyB0aGUgZ2VuZXJhdGlvbiBudW1iZXIgYXMgYSBgbnVtYmVyYCxcbiAgICAgICAgLy8vIHdoaWNoIHdlIGRvbuKAmXQgcmVhbGx5IG5lZWQuXG4gICAgICAgIHRoaXMuZmNvbnZbMF0gPSBoYW5kbGU7XG4gICAgICAgIHJldHVybiB0aGlzLnVjb252WzBdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvYXJlbmEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/coarena.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/control/character_controller.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/control/character_controller.js ***!
  \*************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CharacterCollision\": () => (/* binding */ CharacterCollision),\n/* harmony export */   \"KinematicCharacterController\": () => (/* binding */ KinematicCharacterController)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * A collision between the character and an obstacle hit on its path.\n */\nclass CharacterCollision {\n}\n/**\n * A character controller for controlling kinematic bodies and parentless colliders by hitting\n * and sliding against obstacles.\n */\nclass KinematicCharacterController {\n    constructor(offset, params, bodies, colliders, queries) {\n        this.params = params;\n        this.bodies = bodies;\n        this.colliders = colliders;\n        this.queries = queries;\n        this.raw = new _raw__WEBPACK_IMPORTED_MODULE_0__.RawKinematicCharacterController(offset);\n        this.rawCharacterCollision = new _raw__WEBPACK_IMPORTED_MODULE_0__.RawCharacterCollision();\n        this._applyImpulsesToDynamicBodies = false;\n        this._characterMass = null;\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n            this.rawCharacterCollision.free();\n        }\n        this.raw = undefined;\n        this.rawCharacterCollision = undefined;\n    }\n    /**\n     * The direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    up() {\n        return this.raw.up();\n    }\n    /**\n     * Sets the direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    setUp(vector) {\n        let rawVect = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(vector);\n        return this.raw.setUp(rawVect);\n        rawVect.free();\n    }\n    applyImpulsesToDynamicBodies() {\n        return this._applyImpulsesToDynamicBodies;\n    }\n    setApplyImpulsesToDynamicBodies(enabled) {\n        this._applyImpulsesToDynamicBodies = enabled;\n    }\n    /**\n     * Returns the custom value of the character mass, if it was set by `this.setCharacterMass`.\n     */\n    characterMass() {\n        return this._characterMass;\n    }\n    /**\n     * Set the mass of the character to be used for impulse resolution if `self.applyImpulsesToDynamicBodies`\n     * is set to `true`.\n     *\n     * If no character mass is set explicitly (or if it is set to `null`) it is automatically assumed to be equal\n     * to the mass of the rigid-body the character collider is attached to; or equal to 0 if the character collider\n     * isn’t attached to any rigid-body.\n     *\n     * @param mass - The mass to set.\n     */\n    setCharacterMass(mass) {\n        this._characterMass = mass;\n    }\n    /**\n     * A small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    offset() {\n        return this.raw.offset();\n    }\n    /**\n     * Sets a small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    setOffset(value) {\n        this.raw.setOffset(value);\n    }\n    /**\n     * Is sliding against obstacles enabled?\n     */\n    slideEnabled() {\n        return this.raw.slideEnabled();\n    }\n    /**\n     * Enable or disable sliding against obstacles.\n     */\n    setSlideEnabled(enabled) {\n        this.raw.setSlideEnabled(enabled);\n    }\n    /**\n     * The maximum step height a character can automatically step over.\n     */\n    autostepMaxHeight() {\n        return this.raw.autostepMaxHeight();\n    }\n    /**\n     * The minimum width of free space that must be available after stepping on a stair.\n     */\n    autostepMinWidth() {\n        return this.raw.autostepMinWidth();\n    }\n    /**\n     * Can the character automatically step over dynamic bodies too?\n     */\n    autostepIncludesDynamicBodies() {\n        return this.raw.autostepIncludesDynamicBodies();\n    }\n    /**\n     * Is automatically stepping over small objects enabled?\n     */\n    autostepEnabled() {\n        return this.raw.autostepEnabled();\n    }\n    /**\n     * Enabled automatically stepping over small objects.\n     *\n     * @param maxHeight - The maximum step height a character can automatically step over.\n     * @param minWidth - The minimum width of free space that must be available after stepping on a stair.\n     * @param includeDynamicBodies - Can the character automatically step over dynamic bodies too?\n     */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        this.raw.enableAutostep(maxHeight, minWidth, includeDynamicBodies);\n    }\n    /**\n     * Disable automatically stepping over small objects.\n     */\n    disableAutostep() {\n        return this.raw.disableAutostep();\n    }\n    /**\n     * The maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    maxSlopeClimbAngle() {\n        return this.raw.maxSlopeClimbAngle();\n    }\n    /**\n     * Sets the maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    setMaxSlopeClimbAngle(angle) {\n        this.raw.setMaxSlopeClimbAngle(angle);\n    }\n    /**\n     * The minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    minSlopeSlideAngle() {\n        return this.raw.minSlopeSlideAngle();\n    }\n    /**\n     * Sets the minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    setMinSlopeSlideAngle(angle) {\n        this.raw.setMinSlopeSlideAngle(angle);\n    }\n    /**\n     * If snap-to-ground is enabled, should the character be automatically snapped to the ground if\n     * the distance between the ground and its feet are smaller than the specified threshold?\n     */\n    snapToGroundDistance() {\n        return this.raw.snapToGroundDistance();\n    }\n    /**\n     * Enables automatically snapping the character to the ground if the distance between\n     * the ground and its feet are smaller than the specified threshold.\n     */\n    enableSnapToGround(distance) {\n        this.raw.enableSnapToGround(distance);\n    }\n    /**\n     * Disables automatically snapping the character to the ground.\n     */\n    disableSnapToGround() {\n        this.raw.disableSnapToGround();\n    }\n    /**\n     * Is automatically snapping the character to the ground enabled?\n     */\n    snapToGroundEnabled() {\n        return this.raw.snapToGroundEnabled();\n    }\n    /**\n     * Computes the movement the given collider is able to execute after hitting and sliding on obstacles.\n     *\n     * @param collider - The collider to move.\n     * @param desiredTranslation - The desired collider movement.\n     * @param filterFlags - Flags for excluding whole subsets of colliders from the obstacles taken into account.\n     * @param filterGroups - Groups for excluding colliders with incompatible collision groups from the obstacles\n     *                       taken into account.\n     * @param filterPredicate - Any collider for which this closure returns `false` will be excluded from the\n     *                          obstacles taken into account.\n     */\n    computeColliderMovement(collider, desiredTranslation, filterFlags, filterGroups, filterPredicate) {\n        let rawTranslation = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(desiredTranslation);\n        this.raw.computeColliderMovement(this.params.dt, this.bodies.raw, this.colliders.raw, this.queries.raw, collider.handle, rawTranslation, this._applyImpulsesToDynamicBodies, this._characterMass, filterFlags, filterGroups, this.colliders.castClosure(filterPredicate));\n        rawTranslation.free();\n    }\n    /**\n     * The movement computed by the last call to `this.computeColliderMovement`.\n     */\n    computedMovement() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.computedMovement());\n    }\n    /**\n     * The result of ground detection computed by the last call to `this.computeColliderMovement`.\n     */\n    computedGrounded() {\n        return this.raw.computedGrounded();\n    }\n    /**\n     * The number of collisions against obstacles detected along the path of the last call\n     * to `this.computeColliderMovement`.\n     */\n    numComputedCollisions() {\n        return this.raw.numComputedCollisions();\n    }\n    /**\n     * Returns the collision against one of the obstacles detected along the path of the last\n     * call to `this.computeColliderMovement`.\n     *\n     * @param i - The i-th collision will be returned.\n     * @param out - If this argument is set, it will be filled with the collision information.\n     */\n    computedCollision(i, out) {\n        if (!this.raw.computedCollision(i, this.rawCharacterCollision)) {\n            return null;\n        }\n        else {\n            let c = this.rawCharacterCollision;\n            out = out !== null && out !== void 0 ? out : new CharacterCollision();\n            out.translationApplied = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.translationApplied());\n            out.translationRemaining = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.translationRemaining());\n            out.toi = c.toi();\n            out.witness1 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.worldWitness1());\n            out.witness2 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.worldWitness2());\n            out.normal1 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.worldNormal1());\n            out.normal2 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(c.worldNormal2());\n            out.collider = this.colliders.get(c.handle());\n            return out;\n        }\n    }\n}\n//# sourceMappingURL=character_controller.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/control/character_controller.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/control/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/control/index.js ***!
  \**********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CharacterCollision\": () => (/* reexport safe */ _character_controller__WEBPACK_IMPORTED_MODULE_0__.CharacterCollision),\n/* harmony export */   \"KinematicCharacterController\": () => (/* reexport safe */ _character_controller__WEBPACK_IMPORTED_MODULE_0__.KinematicCharacterController)\n/* harmony export */ });\n/* harmony import */ var _character_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./character_controller */ \"./node_modules/@dimforge/rapier3d/control/character_controller.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_character_controller__WEBPACK_IMPORTED_MODULE_0__]);\n_character_controller__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n//# sourceMappingURL=index.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2NvbnRyb2wvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXVDO0FBQ3ZDLGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9jb250cm9sL2luZGV4LmpzPzcyZjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY2hhcmFjdGVyX2NvbnRyb2xsZXJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/control/index.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js":
/*!****************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CCDSolver\": () => (/* binding */ CCDSolver)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nclass CCDSolver {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawCCDSolver();\n    }\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n}\n//# sourceMappingURL=ccd_solver.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2NjZF9zb2x2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhCQUE4Qiw4Q0FBWTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2NjZF9zb2x2ZXIuanM/YmI1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdDQ0RTb2x2ZXIgfSBmcm9tIFwiLi4vcmF3XCI7XG4vKipcbiAqIFRoZSBDQ0Qgc29sdmVyIHJlc3BvbnNpYmxlIGZvciByZXNvbHZpbmcgQ29udGludW91cyBDb2xsaXNpb24gRGV0ZWN0aW9uLlxuICpcbiAqIFRvIGF2b2lkIGxlYWtpbmcgV0FTTSByZXNvdXJjZXMsIHRoaXMgTVVTVCBiZSBmcmVlZCBtYW51YWxseSB3aXRoIGBjY2RTb2x2ZXIuZnJlZSgpYFxuICogb25jZSB5b3UgYXJlIGRvbmUgdXNpbmcgaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDQ0RTb2x2ZXIge1xuICAgIGNvbnN0cnVjdG9yKHJhdykge1xuICAgICAgICB0aGlzLnJhdyA9IHJhdyB8fCBuZXcgUmF3Q0NEU29sdmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgdGhlIFdBU00gbWVtb3J5IG9jY3VwaWVkIGJ5IHRoaXMgbmFycm93LXBoYXNlLlxuICAgICAqL1xuICAgIGZyZWUoKSB7XG4gICAgICAgIGlmICghIXRoaXMucmF3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdy5mcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYXcgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2NkX3NvbHZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CoefficientCombineRule\": () => (/* binding */ CoefficientCombineRule)\n/* harmony export */ });\n/**\n * A rule applied to combine coefficients.\n *\n * Use this when configuring the `ColliderDesc` to specify\n * how friction and restitution coefficient should be combined\n * in a contact.\n */\nvar CoefficientCombineRule;\n(function (CoefficientCombineRule) {\n    CoefficientCombineRule[CoefficientCombineRule[\"Average\"] = 0] = \"Average\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Min\"] = 1] = \"Min\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Multiply\"] = 2] = \"Multiply\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Max\"] = 3] = \"Max\";\n})(CoefficientCombineRule || (CoefficientCombineRule = {}));\n//# sourceMappingURL=coefficient_combine_rule.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2NvZWZmaWNpZW50X2NvbWJpbmVfcnVsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RDtBQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvZHluYW1pY3MvY29lZmZpY2llbnRfY29tYmluZV9ydWxlLmpzP2I5MDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHJ1bGUgYXBwbGllZCB0byBjb21iaW5lIGNvZWZmaWNpZW50cy5cbiAqXG4gKiBVc2UgdGhpcyB3aGVuIGNvbmZpZ3VyaW5nIHRoZSBgQ29sbGlkZXJEZXNjYCB0byBzcGVjaWZ5XG4gKiBob3cgZnJpY3Rpb24gYW5kIHJlc3RpdHV0aW9uIGNvZWZmaWNpZW50IHNob3VsZCBiZSBjb21iaW5lZFxuICogaW4gYSBjb250YWN0LlxuICovXG5leHBvcnQgdmFyIENvZWZmaWNpZW50Q29tYmluZVJ1bGU7XG4oZnVuY3Rpb24gKENvZWZmaWNpZW50Q29tYmluZVJ1bGUpIHtcbiAgICBDb2VmZmljaWVudENvbWJpbmVSdWxlW0NvZWZmaWNpZW50Q29tYmluZVJ1bGVbXCJBdmVyYWdlXCJdID0gMF0gPSBcIkF2ZXJhZ2VcIjtcbiAgICBDb2VmZmljaWVudENvbWJpbmVSdWxlW0NvZWZmaWNpZW50Q29tYmluZVJ1bGVbXCJNaW5cIl0gPSAxXSA9IFwiTWluXCI7XG4gICAgQ29lZmZpY2llbnRDb21iaW5lUnVsZVtDb2VmZmljaWVudENvbWJpbmVSdWxlW1wiTXVsdGlwbHlcIl0gPSAyXSA9IFwiTXVsdGlwbHlcIjtcbiAgICBDb2VmZmljaWVudENvbWJpbmVSdWxlW0NvZWZmaWNpZW50Q29tYmluZVJ1bGVbXCJNYXhcIl0gPSAzXSA9IFwiTWF4XCI7XG59KShDb2VmZmljaWVudENvbWJpbmVSdWxlIHx8IChDb2VmZmljaWVudENvbWJpbmVSdWxlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZWZmaWNpZW50X2NvbWJpbmVfcnVsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FixedImpulseJoint\": () => (/* binding */ FixedImpulseJoint),\n/* harmony export */   \"ImpulseJoint\": () => (/* binding */ ImpulseJoint),\n/* harmony export */   \"JointData\": () => (/* binding */ JointData),\n/* harmony export */   \"JointType\": () => (/* binding */ JointType),\n/* harmony export */   \"MotorModel\": () => (/* binding */ MotorModel),\n/* harmony export */   \"PrismaticImpulseJoint\": () => (/* binding */ PrismaticImpulseJoint),\n/* harmony export */   \"RevoluteImpulseJoint\": () => (/* binding */ RevoluteImpulseJoint),\n/* harmony export */   \"SphericalImpulseJoint\": () => (/* binding */ SphericalImpulseJoint),\n/* harmony export */   \"UnitImpulseJoint\": () => (/* binding */ UnitImpulseJoint)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__]);\n([_math__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * An enum grouping all possible types of joints:\n *\n * - `Revolute`: A revolute joint that removes all degrees of freedom between the affected\n *               bodies except for the rotation along one axis.\n * - `Fixed`: A fixed joint that removes all relative degrees of freedom between the affected bodies.\n * - `Prismatic`: A prismatic joint that removes all degrees of freedom between the affected\n *                bodies except for the translation along one axis.\n * - `Spherical`: (3D only) A spherical joint that removes all relative linear degrees of freedom between the affected bodies.\n */\nvar JointType;\n(function (JointType) {\n    JointType[JointType[\"Revolute\"] = 0] = \"Revolute\";\n    JointType[JointType[\"Fixed\"] = 1] = \"Fixed\";\n    JointType[JointType[\"Prismatic\"] = 2] = \"Prismatic\";\n    // #if DIM3\n    JointType[JointType[\"Spherical\"] = 3] = \"Spherical\";\n    // #endif\n})(JointType || (JointType = {}));\nvar MotorModel;\n(function (MotorModel) {\n    MotorModel[MotorModel[\"AccelerationBased\"] = 0] = \"AccelerationBased\";\n    MotorModel[MotorModel[\"ForceBased\"] = 1] = \"ForceBased\";\n})(MotorModel || (MotorModel = {}));\nclass ImpulseJoint {\n    constructor(rawSet, bodySet, handle) {\n        this.rawSet = rawSet;\n        this.bodySet = bodySet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, bodySet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case JointType.Revolute:\n                return new RevoluteImpulseJoint(rawSet, bodySet, handle);\n            case JointType.Prismatic:\n                return new PrismaticImpulseJoint(rawSet, bodySet, handle);\n            case JointType.Fixed:\n                return new FixedImpulseJoint(rawSet, bodySet, handle);\n            // #if DIM3\n            case JointType.Spherical:\n                return new SphericalImpulseJoint(rawSet, bodySet, handle);\n            // #endif\n            default:\n                return new ImpulseJoint(rawSet, bodySet, handle);\n        }\n    }\n    /** @internal */\n    finalizeDeserialization(bodySet) {\n        this.bodySet = bodySet;\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * The first rigid-body this joint it attached to.\n     */\n    body1() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle));\n    }\n    /**\n     * The second rigid-body this joint is attached to.\n     */\n    body2() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle));\n    }\n    /**\n     * The type of this joint given as a string.\n     */\n    type() {\n        return this.rawSet.jointType(this.handle);\n    }\n    // #if DIM3\n    /**\n     * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n     */\n    frameX1() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n     */\n    frameX2() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    }\n    // #endif\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    anchor1() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    anchor2() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    }\n    /**\n     * Sets the position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    setAnchor1(newPos) {\n        const rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor1(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Sets the position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    setAnchor2(newPos) {\n        const rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor2(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nclass UnitImpulseJoint extends ImpulseJoint {\n    /**\n     * Are the limits enabled for this joint?\n     */\n    limitsEnabled() {\n        return this.rawSet.jointLimitsEnabled(this.handle, this.rawAxis());\n    }\n    /**\n     * The min limit of this joint.\n     */\n    limitsMin() {\n        return this.rawSet.jointLimitsMin(this.handle, this.rawAxis());\n    }\n    /**\n     * The max limit of this joint.\n     */\n    limitsMax() {\n        return this.rawSet.jointLimitsMax(this.handle, this.rawAxis());\n    }\n    /**\n     * Sets the limits of this joint.\n     *\n     * @param min - The minimum bound of this joint’s free coordinate.\n     * @param max - The maximum bound of this joint’s free coordinate.\n     */\n    setLimits(min, max) {\n        this.rawSet.jointSetLimits(this.handle, this.rawAxis(), min, max);\n    }\n    configureMotorModel(model) {\n        this.rawSet.jointConfigureMotorModel(this.handle, this.rawAxis(), model);\n    }\n    configureMotorVelocity(targetVel, factor) {\n        this.rawSet.jointConfigureMotorVelocity(this.handle, this.rawAxis(), targetVel, factor);\n    }\n    configureMotorPosition(targetPos, stiffness, damping) {\n        this.rawSet.jointConfigureMotorPosition(this.handle, this.rawAxis(), targetPos, stiffness, damping);\n    }\n    configureMotor(targetPos, targetVel, stiffness, damping) {\n        this.rawSet.jointConfigureMotor(this.handle, this.rawAxis(), targetPos, targetVel, stiffness, damping);\n    }\n}\nclass FixedImpulseJoint extends ImpulseJoint {\n}\nclass PrismaticImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return _raw__WEBPACK_IMPORTED_MODULE_1__.RawJointAxis.X;\n    }\n}\nclass RevoluteImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return _raw__WEBPACK_IMPORTED_MODULE_1__.RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nclass SphericalImpulseJoint extends ImpulseJoint {\n}\n// #endif\nclass JointData {\n    constructor() { }\n    /**\n     * Creates a new joint descriptor that builds a Fixed joint.\n     *\n     * A fixed joint removes all the degrees of freedom between the affected bodies, ensuring their\n     * anchor and local frames coincide in world-space.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame1 - The reference orientation of the joint wrt. the first rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame2 - The reference orientation of the joint wrt. the second rigid-body.\n     */\n    static fixed(anchor1, frame1, anchor2, frame2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.frame1 = frame1;\n        res.frame2 = frame2;\n        res.jointType = JointType.Fixed;\n        return res;\n    }\n    // #if DIM3\n    /**\n     * Create a new joint descriptor that builds spherical joints.\n     *\n     * A spherical joint allows three relative rotational degrees of freedom\n     * by preventing any relative translation between the anchors of the\n     * two attached rigid-bodies.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     */\n    static spherical(anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.jointType = JointType.Spherical;\n        return res;\n    }\n    /**\n     * Creates a new joint descriptor that builds a Prismatic joint.\n     *\n     * A prismatic joint removes all the degrees of freedom between the\n     * affected bodies, except for the translation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static prismatic(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Prismatic;\n        return res;\n    }\n    /**\n     * Create a new joint descriptor that builds Revolute joints.\n     *\n     * A revolute joint removes all degrees of freedom between the affected\n     * bodies except for the rotation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static revolute(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Revolute;\n        return res;\n    }\n    // #endif\n    intoRaw() {\n        let rawA1 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.anchor1);\n        let rawA2 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.anchor2);\n        let rawAx;\n        let result;\n        let limitsEnabled = false;\n        let limitsMin = 0.0;\n        let limitsMax = 0.0;\n        switch (this.jointType) {\n            case JointType.Fixed:\n                let rawFra1 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(this.frame1);\n                let rawFra2 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(this.frame2);\n                result = _raw__WEBPACK_IMPORTED_MODULE_1__.RawGenericJoint.fixed(rawA1, rawFra1, rawA2, rawFra2);\n                rawFra1.free();\n                rawFra2.free();\n                break;\n            case JointType.Prismatic:\n                rawAx = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.axis);\n                if (!!this.limitsEnabled) {\n                    limitsEnabled = true;\n                    limitsMin = this.limits[0];\n                    limitsMax = this.limits[1];\n                }\n                // #if DIM3\n                result = _raw__WEBPACK_IMPORTED_MODULE_1__.RawGenericJoint.prismatic(rawA1, rawA2, rawAx, limitsEnabled, limitsMin, limitsMax);\n                // #endif\n                rawAx.free();\n                break;\n            // #if DIM3\n            case JointType.Spherical:\n                result = _raw__WEBPACK_IMPORTED_MODULE_1__.RawGenericJoint.spherical(rawA1, rawA2);\n                break;\n            case JointType.Revolute:\n                rawAx = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.axis);\n                result = _raw__WEBPACK_IMPORTED_MODULE_1__.RawGenericJoint.revolute(rawA1, rawA2, rawAx);\n                rawAx.free();\n                break;\n            // #endif\n        }\n        rawA1.free();\n        rawA2.free();\n        return result;\n    }\n}\n//# sourceMappingURL=impulse_joint.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImpulseJointSet\": () => (/* binding */ ImpulseJointSet)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _coarena__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../coarena */ \"./node_modules/@dimforge/rapier3d/coarena.js\");\n/* harmony import */ var _impulse_joint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./impulse_joint */ \"./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _impulse_joint__WEBPACK_IMPORTED_MODULE_2__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _impulse_joint__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nclass ImpulseJointSet {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawImpulseJointSet();\n        this.map = new _coarena__WEBPACK_IMPORTED_MODULE_1__.Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, _impulse_joint__WEBPACK_IMPORTED_MODULE_2__.ImpulseJoint.newTyped(raw, null, handle));\n            });\n        }\n    }\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((joint) => joint.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param bodies - The set of rigid-bodies containing the bodies the joint is attached to.\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(bodies, desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = _impulse_joint__WEBPACK_IMPORTED_MODULE_2__.ImpulseJoint.newTyped(this.raw, bodies, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wakeUp - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wakeUp) {\n        this.raw.remove(handle, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Calls the given closure with the integer handle of each impulse joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each impulse joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=impulse_joint_set.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2ltcHVsc2Vfam9pbnRfc2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNEM7QUFDUDtBQUdYO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4QkFBOEIsb0RBQWtCO0FBQ2hELHVCQUF1Qiw2Q0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsaUVBQXFCO0FBQzFELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvZHluYW1pY3MvaW1wdWxzZV9qb2ludF9zZXQuanM/ZTA5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdJbXB1bHNlSm9pbnRTZXQgfSBmcm9tIFwiLi4vcmF3XCI7XG5pbXBvcnQgeyBDb2FyZW5hIH0gZnJvbSBcIi4uL2NvYXJlbmFcIjtcbmltcG9ydCB7IEltcHVsc2VKb2ludCxcbi8vICNlbmRpZlxuIH0gZnJvbSBcIi4vaW1wdWxzZV9qb2ludFwiO1xuLyoqXG4gKiBBIHNldCBvZiBqb2ludHMuXG4gKlxuICogVG8gYXZvaWQgbGVha2luZyBXQVNNIHJlc291cmNlcywgdGhpcyBNVVNUIGJlIGZyZWVkIG1hbnVhbGx5IHdpdGggYGpvaW50U2V0LmZyZWUoKWBcbiAqIG9uY2UgeW91IGFyZSBkb25lIHVzaW5nIGl0IChhbmQgYWxsIHRoZSBqb2ludHMgaXQgY3JlYXRlZCkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbXB1bHNlSm9pbnRTZXQge1xuICAgIGNvbnN0cnVjdG9yKHJhdykge1xuICAgICAgICB0aGlzLnJhdyA9IHJhdyB8fCBuZXcgUmF3SW1wdWxzZUpvaW50U2V0KCk7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IENvYXJlbmEoKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbWFwIHdpdGggdGhlIGV4aXN0aW5nIGVsZW1lbnRzLCBpZiBhbnkuXG4gICAgICAgIGlmIChyYXcpIHtcbiAgICAgICAgICAgIHJhdy5mb3JFYWNoSm9pbnRIYW5kbGUoKGhhbmRsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldChoYW5kbGUsIEltcHVsc2VKb2ludC5uZXdUeXBlZChyYXcsIG51bGwsIGhhbmRsZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsZWFzZSB0aGUgV0FTTSBtZW1vcnkgb2NjdXBpZWQgYnkgdGhpcyBqb2ludCBzZXQuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCEhdGhpcy5tYXApIHtcbiAgICAgICAgICAgIHRoaXMubWFwLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBmaW5hbGl6ZURlc2VyaWFsaXphdGlvbihib2RpZXMpIHtcbiAgICAgICAgdGhpcy5tYXAuZm9yRWFjaCgoam9pbnQpID0+IGpvaW50LmZpbmFsaXplRGVzZXJpYWxpemF0aW9uKGJvZGllcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGpvaW50IGFuZCByZXR1cm4gaXRzIGludGVnZXIgaGFuZGxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJvZGllcyAtIFRoZSBzZXQgb2YgcmlnaWQtYm9kaWVzIGNvbnRhaW5pbmcgdGhlIGJvZGllcyB0aGUgam9pbnQgaXMgYXR0YWNoZWQgdG8uXG4gICAgICogQHBhcmFtIGRlc2MgLSBUaGUgam9pbnQncyBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSBwYXJlbnQxIC0gVGhlIGhhbmRsZSBvZiB0aGUgZmlyc3QgcmlnaWQtYm9keSB0aGlzIGpvaW50IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqIEBwYXJhbSBwYXJlbnQyIC0gVGhlIGhhbmRsZSBvZiB0aGUgc2Vjb25kIHJpZ2lkLWJvZHkgdGhpcyBqb2ludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKiBAcGFyYW0gd2FrZVVwIC0gU2hvdWxkIHRoZSBhdHRhY2hlZCByaWdpZC1ib2RpZXMgYmUgYXdha2VuZWQ/XG4gICAgICovXG4gICAgY3JlYXRlSm9pbnQoYm9kaWVzLCBkZXNjLCBwYXJlbnQxLCBwYXJlbnQyLCB3YWtlVXApIHtcbiAgICAgICAgY29uc3QgcmF3UGFyYW1zID0gZGVzYy5pbnRvUmF3KCk7XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMucmF3LmNyZWF0ZUpvaW50KHJhd1BhcmFtcywgcGFyZW50MSwgcGFyZW50Miwgd2FrZVVwKTtcbiAgICAgICAgcmF3UGFyYW1zLmZyZWUoKTtcbiAgICAgICAgbGV0IGpvaW50ID0gSW1wdWxzZUpvaW50Lm5ld1R5cGVkKHRoaXMucmF3LCBib2RpZXMsIGhhbmRsZSk7XG4gICAgICAgIHRoaXMubWFwLnNldChoYW5kbGUsIGpvaW50KTtcbiAgICAgICAgcmV0dXJuIGpvaW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBqb2ludCBmcm9tIHRoaXMgc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZSAtIFRoZSBpbnRlZ2VyIGhhbmRsZSBvZiB0aGUgam9pbnQuXG4gICAgICogQHBhcmFtIHdha2VVcCAtIElmIGB0cnVlYCwgdGhlIHJpZ2lkLWJvZGllcyBhdHRhY2hlZCBieSB0aGUgcmVtb3ZlZCBqb2ludCB3aWxsIGJlIHdva2VuLXVwIGF1dG9tYXRpY2FsbHkuXG4gICAgICovXG4gICAgcmVtb3ZlKGhhbmRsZSwgd2FrZVVwKSB7XG4gICAgICAgIHRoaXMucmF3LnJlbW92ZShoYW5kbGUsIHdha2VVcCk7XG4gICAgICAgIHRoaXMudW5tYXAoaGFuZGxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbHMgdGhlIGdpdmVuIGNsb3N1cmUgd2l0aCB0aGUgaW50ZWdlciBoYW5kbGUgb2YgZWFjaCBpbXB1bHNlIGpvaW50IGF0dGFjaGVkIHRvIHRoaXMgcmlnaWQtYm9keS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmIC0gVGhlIGNsb3N1cmUgY2FsbGVkIHdpdGggdGhlIGludGVnZXIgaGFuZGxlIG9mIGVhY2ggaW1wdWxzZSBqb2ludCBhdHRhY2hlZCB0byB0aGUgcmlnaWQtYm9keS5cbiAgICAgKi9cbiAgICBmb3JFYWNoSm9pbnRIYW5kbGVBdHRhY2hlZFRvUmlnaWRCb2R5KGhhbmRsZSwgZikge1xuICAgICAgICB0aGlzLnJhdy5mb3JFYWNoSm9pbnRBdHRhY2hlZFRvUmlnaWRCb2R5KGhhbmRsZSwgZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGZ1bmN0aW9uLCBkbyBub3QgY2FsbCBkaXJlY3RseS5cbiAgICAgKiBAcGFyYW0gaGFuZGxlXG4gICAgICovXG4gICAgdW5tYXAoaGFuZGxlKSB7XG4gICAgICAgIHRoaXMubWFwLmRlbGV0ZShoYW5kbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGpvaW50cyBvbiB0aGlzIHNldC5cbiAgICAgKi9cbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5sZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRG9lcyB0aGlzIHNldCBjb250YWluIGEgam9pbnQgd2l0aCB0aGUgZ2l2ZW4gaGFuZGxlP1xuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZSAtIFRoZSBqb2ludCBoYW5kbGUgdG8gY2hlY2suXG4gICAgICovXG4gICAgY29udGFpbnMoaGFuZGxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChoYW5kbGUpICE9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGpvaW50IHdpdGggdGhlIGdpdmVuIGhhbmRsZS5cbiAgICAgKlxuICAgICAqIFJldHVybnMgYG51bGxgIGlmIG5vIGpvaW50IHdpdGggdGhlIHNwZWNpZmllZCBoYW5kbGUgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZSAtIFRoZSBpbnRlZ2VyIGhhbmRsZSBvZiB0aGUgam9pbnQgdG8gcmV0cmlldmUuXG4gICAgICovXG4gICAgZ2V0KGhhbmRsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGhhbmRsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGdpdmVuIGNsb3N1cmUgdG8gZWFjaCBqb2ludCBjb250YWluZWQgYnkgdGhpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIFRoZSBjbG9zdXJlIHRvIGFwcGx5LlxuICAgICAqL1xuICAgIGZvckVhY2goZikge1xuICAgICAgICB0aGlzLm1hcC5mb3JFYWNoKGYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBqb2ludHMgaW4gdGhlIGxpc3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBqb2ludCBsaXN0LlxuICAgICAqL1xuICAgIGdldEFsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldEFsbCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltcHVsc2Vfam9pbnRfc2V0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/index.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CCDSolver\": () => (/* reexport safe */ _ccd_solver__WEBPACK_IMPORTED_MODULE_8__.CCDSolver),\n/* harmony export */   \"CoefficientCombineRule\": () => (/* reexport safe */ _coefficient_combine_rule__WEBPACK_IMPORTED_MODULE_7__.CoefficientCombineRule),\n/* harmony export */   \"FixedImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.FixedImpulseJoint),\n/* harmony export */   \"FixedMultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.FixedMultibodyJoint),\n/* harmony export */   \"ImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.ImpulseJoint),\n/* harmony export */   \"ImpulseJointSet\": () => (/* reexport safe */ _impulse_joint_set__WEBPACK_IMPORTED_MODULE_4__.ImpulseJointSet),\n/* harmony export */   \"IntegrationParameters\": () => (/* reexport safe */ _integration_parameters__WEBPACK_IMPORTED_MODULE_2__.IntegrationParameters),\n/* harmony export */   \"IslandManager\": () => (/* reexport safe */ _island_manager__WEBPACK_IMPORTED_MODULE_9__.IslandManager),\n/* harmony export */   \"JointData\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.JointData),\n/* harmony export */   \"JointType\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.JointType),\n/* harmony export */   \"MotorModel\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.MotorModel),\n/* harmony export */   \"MultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.MultibodyJoint),\n/* harmony export */   \"MultibodyJointSet\": () => (/* reexport safe */ _multibody_joint_set__WEBPACK_IMPORTED_MODULE_6__.MultibodyJointSet),\n/* harmony export */   \"PrismaticImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.PrismaticImpulseJoint),\n/* harmony export */   \"PrismaticMultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.PrismaticMultibodyJoint),\n/* harmony export */   \"RevoluteImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.RevoluteImpulseJoint),\n/* harmony export */   \"RevoluteMultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.RevoluteMultibodyJoint),\n/* harmony export */   \"RigidBody\": () => (/* reexport safe */ _rigid_body__WEBPACK_IMPORTED_MODULE_0__.RigidBody),\n/* harmony export */   \"RigidBodyDesc\": () => (/* reexport safe */ _rigid_body__WEBPACK_IMPORTED_MODULE_0__.RigidBodyDesc),\n/* harmony export */   \"RigidBodySet\": () => (/* reexport safe */ _rigid_body_set__WEBPACK_IMPORTED_MODULE_1__.RigidBodySet),\n/* harmony export */   \"RigidBodyType\": () => (/* reexport safe */ _rigid_body__WEBPACK_IMPORTED_MODULE_0__.RigidBodyType),\n/* harmony export */   \"SphericalImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.SphericalImpulseJoint),\n/* harmony export */   \"SphericalMultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.SphericalMultibodyJoint),\n/* harmony export */   \"UnitImpulseJoint\": () => (/* reexport safe */ _impulse_joint__WEBPACK_IMPORTED_MODULE_3__.UnitImpulseJoint),\n/* harmony export */   \"UnitMultibodyJoint\": () => (/* reexport safe */ _multibody_joint__WEBPACK_IMPORTED_MODULE_5__.UnitMultibodyJoint)\n/* harmony export */ });\n/* harmony import */ var _rigid_body__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rigid_body */ \"./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js\");\n/* harmony import */ var _rigid_body_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rigid_body_set */ \"./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js\");\n/* harmony import */ var _integration_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./integration_parameters */ \"./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js\");\n/* harmony import */ var _impulse_joint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./impulse_joint */ \"./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js\");\n/* harmony import */ var _impulse_joint_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./impulse_joint_set */ \"./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js\");\n/* harmony import */ var _multibody_joint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multibody_joint */ \"./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js\");\n/* harmony import */ var _multibody_joint_set__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./multibody_joint_set */ \"./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js\");\n/* harmony import */ var _coefficient_combine_rule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./coefficient_combine_rule */ \"./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js\");\n/* harmony import */ var _ccd_solver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ccd_solver */ \"./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js\");\n/* harmony import */ var _island_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./island_manager */ \"./node_modules/@dimforge/rapier3d/dynamics/island_manager.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_rigid_body__WEBPACK_IMPORTED_MODULE_0__, _rigid_body_set__WEBPACK_IMPORTED_MODULE_1__, _integration_parameters__WEBPACK_IMPORTED_MODULE_2__, _impulse_joint__WEBPACK_IMPORTED_MODULE_3__, _impulse_joint_set__WEBPACK_IMPORTED_MODULE_4__, _multibody_joint__WEBPACK_IMPORTED_MODULE_5__, _multibody_joint_set__WEBPACK_IMPORTED_MODULE_6__, _ccd_solver__WEBPACK_IMPORTED_MODULE_8__, _island_manager__WEBPACK_IMPORTED_MODULE_9__]);\n([_rigid_body__WEBPACK_IMPORTED_MODULE_0__, _rigid_body_set__WEBPACK_IMPORTED_MODULE_1__, _integration_parameters__WEBPACK_IMPORTED_MODULE_2__, _impulse_joint__WEBPACK_IMPORTED_MODULE_3__, _impulse_joint_set__WEBPACK_IMPORTED_MODULE_4__, _multibody_joint__WEBPACK_IMPORTED_MODULE_5__, _multibody_joint_set__WEBPACK_IMPORTED_MODULE_6__, _ccd_solver__WEBPACK_IMPORTED_MODULE_8__, _island_manager__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ0k7QUFDUTtBQUNUO0FBQ0k7QUFDRjtBQUNJO0FBQ0s7QUFDZDtBQUNJO0FBQ2pDLGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9keW5hbWljcy9pbmRleC5qcz9kOThkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL3JpZ2lkX2JvZHlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JpZ2lkX2JvZHlfc2V0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlZ3JhdGlvbl9wYXJhbWV0ZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbXB1bHNlX2pvaW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbXB1bHNlX2pvaW50X3NldFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbXVsdGlib2R5X2pvaW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tdWx0aWJvZHlfam9pbnRfc2V0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb2VmZmljaWVudF9jb21iaW5lX3J1bGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NjZF9zb2x2ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2lzbGFuZF9tYW5hZ2VyXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/index.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntegrationParameters\": () => (/* binding */ IntegrationParameters)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass IntegrationParameters {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawIntegrationParameters();\n    }\n    /**\n     * Free the WASM memory used by these integration parameters.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The timestep length (default: `1.0 / 60.0`)\n     */\n    get dt() {\n        return this.raw.dt;\n    }\n    /**\n     * The Error Reduction Parameter in `[0, 1]` is the proportion of\n     * the positional error to be corrected at each time step (default: `0.2`).\n     */\n    get erp() {\n        return this.raw.erp;\n    }\n    /**\n     * Amount of penetration the engine wont attempt to correct (default: `0.001m`).\n     */\n    get allowedLinearError() {\n        return this.raw.allowedLinearError;\n    }\n    /**\n     * The maximal distance separating two objects that will generate predictive contacts (default: `0.002`).\n     */\n    get predictionDistance() {\n        return this.raw.predictionDistance;\n    }\n    /**\n     * Maximum number of iterations performed by the velocity constraints solver (default: `4`).\n     */\n    get maxVelocityIterations() {\n        return this.raw.maxVelocityIterations;\n    }\n    /**\n     * Maximum number of friction iterations performed by the position-based constraints solver (default: `1`).\n     */\n    get maxVelocityFrictionIterations() {\n        return this.raw.maxVelocityFrictionIterations;\n    }\n    /**\n     * Maximum number of stabilization iterations performed by the position-based constraints solver (default: `1`).\n     */\n    get maxStabilizationIterations() {\n        return this.raw.maxStabilizationIterations;\n    }\n    /**\n     * Minimum number of dynamic bodies in each active island (default: `128`).\n     */\n    get minIslandSize() {\n        return this.raw.minIslandSize;\n    }\n    /**\n     * Maximum number of substeps performed by the  solver (default: `1`).\n     */\n    get maxCcdSubsteps() {\n        return this.raw.maxCcdSubsteps;\n    }\n    set dt(value) {\n        this.raw.dt = value;\n    }\n    set erp(value) {\n        this.raw.erp = value;\n    }\n    set allowedLinearError(value) {\n        this.raw.allowedLinearError = value;\n    }\n    set predictionDistance(value) {\n        this.raw.predictionDistance = value;\n    }\n    set maxVelocityIterations(value) {\n        this.raw.maxVelocityIterations = value;\n    }\n    set maxVelocityFrictionIterations(value) {\n        this.raw.maxVelocityFrictionIterations = value;\n    }\n    set maxStabilizationIterations(value) {\n        this.raw.maxStabilizationIterations = value;\n    }\n    set minIslandSize(value) {\n        this.raw.minIslandSize = value;\n    }\n    set maxCcdSubsteps(value) {\n        this.raw.maxCcdSubsteps = value;\n    }\n}\n//# sourceMappingURL=integration_parameters.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2ludGVncmF0aW9uX3BhcmFtZXRlcnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0Q7QUFDM0M7QUFDUDtBQUNBLDhCQUE4QiwwREFBd0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2ludGVncmF0aW9uX3BhcmFtZXRlcnMuanM/YzExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdJbnRlZ3JhdGlvblBhcmFtZXRlcnMgfSBmcm9tIFwiLi4vcmF3XCI7XG5leHBvcnQgY2xhc3MgSW50ZWdyYXRpb25QYXJhbWV0ZXJzIHtcbiAgICBjb25zdHJ1Y3RvcihyYXcpIHtcbiAgICAgICAgdGhpcy5yYXcgPSByYXcgfHwgbmV3IFJhd0ludGVncmF0aW9uUGFyYW1ldGVycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGcmVlIHRoZSBXQVNNIG1lbW9yeSB1c2VkIGJ5IHRoZXNlIGludGVncmF0aW9uIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWVzdGVwIGxlbmd0aCAoZGVmYXVsdDogYDEuMCAvIDYwLjBgKVxuICAgICAqL1xuICAgIGdldCBkdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3LmR0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgRXJyb3IgUmVkdWN0aW9uIFBhcmFtZXRlciBpbiBgWzAsIDFdYCBpcyB0aGUgcHJvcG9ydGlvbiBvZlxuICAgICAqIHRoZSBwb3NpdGlvbmFsIGVycm9yIHRvIGJlIGNvcnJlY3RlZCBhdCBlYWNoIHRpbWUgc3RlcCAoZGVmYXVsdDogYDAuMmApLlxuICAgICAqL1xuICAgIGdldCBlcnAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdy5lcnA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFtb3VudCBvZiBwZW5ldHJhdGlvbiB0aGUgZW5naW5lIHdvbnQgYXR0ZW1wdCB0byBjb3JyZWN0IChkZWZhdWx0OiBgMC4wMDFtYCkuXG4gICAgICovXG4gICAgZ2V0IGFsbG93ZWRMaW5lYXJFcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3LmFsbG93ZWRMaW5lYXJFcnJvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltYWwgZGlzdGFuY2Ugc2VwYXJhdGluZyB0d28gb2JqZWN0cyB0aGF0IHdpbGwgZ2VuZXJhdGUgcHJlZGljdGl2ZSBjb250YWN0cyAoZGVmYXVsdDogYDAuMDAyYCkuXG4gICAgICovXG4gICAgZ2V0IHByZWRpY3Rpb25EaXN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3LnByZWRpY3Rpb25EaXN0YW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyBwZXJmb3JtZWQgYnkgdGhlIHZlbG9jaXR5IGNvbnN0cmFpbnRzIHNvbHZlciAoZGVmYXVsdDogYDRgKS5cbiAgICAgKi9cbiAgICBnZXQgbWF4VmVsb2NpdHlJdGVyYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcubWF4VmVsb2NpdHlJdGVyYXRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBmcmljdGlvbiBpdGVyYXRpb25zIHBlcmZvcm1lZCBieSB0aGUgcG9zaXRpb24tYmFzZWQgY29uc3RyYWludHMgc29sdmVyIChkZWZhdWx0OiBgMWApLlxuICAgICAqL1xuICAgIGdldCBtYXhWZWxvY2l0eUZyaWN0aW9uSXRlcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3Lm1heFZlbG9jaXR5RnJpY3Rpb25JdGVyYXRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBzdGFiaWxpemF0aW9uIGl0ZXJhdGlvbnMgcGVyZm9ybWVkIGJ5IHRoZSBwb3NpdGlvbi1iYXNlZCBjb25zdHJhaW50cyBzb2x2ZXIgKGRlZmF1bHQ6IGAxYCkuXG4gICAgICovXG4gICAgZ2V0IG1heFN0YWJpbGl6YXRpb25JdGVyYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcubWF4U3RhYmlsaXphdGlvbkl0ZXJhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gbnVtYmVyIG9mIGR5bmFtaWMgYm9kaWVzIGluIGVhY2ggYWN0aXZlIGlzbGFuZCAoZGVmYXVsdDogYDEyOGApLlxuICAgICAqL1xuICAgIGdldCBtaW5Jc2xhbmRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcubWluSXNsYW5kU2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF4aW11bSBudW1iZXIgb2Ygc3Vic3RlcHMgcGVyZm9ybWVkIGJ5IHRoZSAgc29sdmVyIChkZWZhdWx0OiBgMWApLlxuICAgICAqL1xuICAgIGdldCBtYXhDY2RTdWJzdGVwcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3Lm1heENjZFN1YnN0ZXBzO1xuICAgIH1cbiAgICBzZXQgZHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yYXcuZHQgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGVycCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5lcnAgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGFsbG93ZWRMaW5lYXJFcnJvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5hbGxvd2VkTGluZWFyRXJyb3IgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IHByZWRpY3Rpb25EaXN0YW5jZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5wcmVkaWN0aW9uRGlzdGFuY2UgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1heFZlbG9jaXR5SXRlcmF0aW9ucyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5tYXhWZWxvY2l0eUl0ZXJhdGlvbnMgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1heFZlbG9jaXR5RnJpY3Rpb25JdGVyYXRpb25zKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmF3Lm1heFZlbG9jaXR5RnJpY3Rpb25JdGVyYXRpb25zID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXhTdGFiaWxpemF0aW9uSXRlcmF0aW9ucyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5tYXhTdGFiaWxpemF0aW9uSXRlcmF0aW9ucyA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgbWluSXNsYW5kU2l6ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5taW5Jc2xhbmRTaXplID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXhDY2RTdWJzdGVwcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhdy5tYXhDY2RTdWJzdGVwcyA9IHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVncmF0aW9uX3BhcmFtZXRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/island_manager.js":
/*!********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/island_manager.js ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IslandManager\": () => (/* binding */ IslandManager)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nclass IslandManager {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawIslandManager();\n    }\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Applies the given closure to the handle of each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBodyHandle(f) {\n        this.raw.forEachActiveRigidBodyHandle(f);\n    }\n}\n//# sourceMappingURL=island_manager.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL2lzbGFuZF9tYW5hZ2VyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4QkFBOEIsa0RBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9keW5hbWljcy9pc2xhbmRfbWFuYWdlci5qcz8xZmYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0lzbGFuZE1hbmFnZXIgfSBmcm9tIFwiLi4vcmF3XCI7XG4vKipcbiAqIFRoZSBDQ0Qgc29sdmVyIHJlc3BvbnNpYmxlIGZvciByZXNvbHZpbmcgQ29udGludW91cyBDb2xsaXNpb24gRGV0ZWN0aW9uLlxuICpcbiAqIFRvIGF2b2lkIGxlYWtpbmcgV0FTTSByZXNvdXJjZXMsIHRoaXMgTVVTVCBiZSBmcmVlZCBtYW51YWxseSB3aXRoIGBjY2RTb2x2ZXIuZnJlZSgpYFxuICogb25jZSB5b3UgYXJlIGRvbmUgdXNpbmcgaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJc2xhbmRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihyYXcpIHtcbiAgICAgICAgdGhpcy5yYXcgPSByYXcgfHwgbmV3IFJhd0lzbGFuZE1hbmFnZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsZWFzZSB0aGUgV0FTTSBtZW1vcnkgb2NjdXBpZWQgYnkgdGhpcyBuYXJyb3ctcGhhc2UuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgZ2l2ZW4gY2xvc3VyZSB0byB0aGUgaGFuZGxlIG9mIGVhY2ggYWN0aXZlIHJpZ2lkLWJvZGllcyBjb250YWluZWQgYnkgdGhpcyBzZXQuXG4gICAgICpcbiAgICAgKiBBIHJpZ2lkLWJvZHkgaXMgYWN0aXZlIGlmIGl0IGlzIG5vdCBzbGVlcGluZywgaS5lLiwgaWYgaXQgbW92ZWQgcmVjZW50bHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIFRoZSBjbG9zdXJlIHRvIGFwcGx5LlxuICAgICAqL1xuICAgIGZvckVhY2hBY3RpdmVSaWdpZEJvZHlIYW5kbGUoZikge1xuICAgICAgICB0aGlzLnJhdy5mb3JFYWNoQWN0aXZlUmlnaWRCb2R5SGFuZGxlKGYpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzbGFuZF9tYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/island_manager.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js ***!
  \*********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FixedMultibodyJoint\": () => (/* binding */ FixedMultibodyJoint),\n/* harmony export */   \"MultibodyJoint\": () => (/* binding */ MultibodyJoint),\n/* harmony export */   \"PrismaticMultibodyJoint\": () => (/* binding */ PrismaticMultibodyJoint),\n/* harmony export */   \"RevoluteMultibodyJoint\": () => (/* binding */ RevoluteMultibodyJoint),\n/* harmony export */   \"SphericalMultibodyJoint\": () => (/* binding */ SphericalMultibodyJoint),\n/* harmony export */   \"UnitMultibodyJoint\": () => (/* binding */ UnitMultibodyJoint)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _impulse_joint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./impulse_joint */ \"./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_impulse_joint__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__]);\n([_impulse_joint__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass MultibodyJoint {\n    constructor(rawSet, handle) {\n        this.rawSet = rawSet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case _impulse_joint__WEBPACK_IMPORTED_MODULE_0__.JointType.Revolute:\n                return new RevoluteMultibodyJoint(rawSet, handle);\n            case _impulse_joint__WEBPACK_IMPORTED_MODULE_0__.JointType.Prismatic:\n                return new PrismaticMultibodyJoint(rawSet, handle);\n            case _impulse_joint__WEBPACK_IMPORTED_MODULE_0__.JointType.Fixed:\n                return new FixedMultibodyJoint(rawSet, handle);\n            // #if DIM3\n            case _impulse_joint__WEBPACK_IMPORTED_MODULE_0__.JointType.Spherical:\n                return new SphericalMultibodyJoint(rawSet, handle);\n            // #endif\n            default:\n                return new MultibodyJoint(rawSet, handle);\n        }\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    // /**\n    //  * The unique integer identifier of the first rigid-body this joint it attached to.\n    //  */\n    // public bodyHandle1(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle1(this.handle);\n    // }\n    //\n    // /**\n    //  * The unique integer identifier of the second rigid-body this joint is attached to.\n    //  */\n    // public bodyHandle2(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle2(this.handle);\n    // }\n    //\n    // /**\n    //  * The type of this joint given as a string.\n    //  */\n    // public type(): JointType {\n    //     return this.rawSet.jointType(this.handle);\n    // }\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n    //  */\n    // public frameX1(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n    //  */\n    // public frameX2(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // /**\n    //  * The position of the first anchor of this joint.\n    //  *\n    //  * The first anchor gives the position of the points application point on the\n    //  * local frame of the first rigid-body it is attached to.\n    //  */\n    // public anchor1(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    // }\n    //\n    // /**\n    //  * The position of the second anchor of this joint.\n    //  *\n    //  * The second anchor gives the position of the points application point on the\n    //  * local frame of the second rigid-body it is attached to.\n    //  */\n    // public anchor2(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    // }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nclass UnitMultibodyJoint extends MultibodyJoint {\n}\nclass FixedMultibodyJoint extends MultibodyJoint {\n}\nclass PrismaticMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return _raw__WEBPACK_IMPORTED_MODULE_1__.RawJointAxis.X;\n    }\n}\nclass RevoluteMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return _raw__WEBPACK_IMPORTED_MODULE_1__.RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nclass SphericalMultibodyJoint extends MultibodyJoint {\n}\n// #endif\n//# sourceMappingURL=multibody_joint.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL211bHRpYm9keV9qb2ludC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzQztBQUNPO0FBQ3RDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhEQUFrQjtBQUNuQztBQUNBLGlCQUFpQiwrREFBbUI7QUFDcEM7QUFDQSxpQkFBaUIsMkRBQWU7QUFDaEM7QUFDQTtBQUNBLGlCQUFpQiwrREFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQSxlQUFlLGdEQUFjO0FBQzdCO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSxtREFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL211bHRpYm9keV9qb2ludC5qcz82ZjVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0pvaW50QXhpcyB9IGZyb20gXCIuLi9yYXdcIjtcbmltcG9ydCB7IEpvaW50VHlwZSwgfSBmcm9tIFwiLi9pbXB1bHNlX2pvaW50XCI7XG5leHBvcnQgY2xhc3MgTXVsdGlib2R5Sm9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHJhd1NldCwgaGFuZGxlKSB7XG4gICAgICAgIHRoaXMucmF3U2V0ID0gcmF3U2V0O1xuICAgICAgICB0aGlzLmhhbmRsZSA9IGhhbmRsZTtcbiAgICB9XG4gICAgc3RhdGljIG5ld1R5cGVkKHJhd1NldCwgaGFuZGxlKSB7XG4gICAgICAgIHN3aXRjaCAocmF3U2V0LmpvaW50VHlwZShoYW5kbGUpKSB7XG4gICAgICAgICAgICBjYXNlIEpvaW50VHlwZS5SZXZvbHV0ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJldm9sdXRlTXVsdGlib2R5Sm9pbnQocmF3U2V0LCBoYW5kbGUpO1xuICAgICAgICAgICAgY2FzZSBKb2ludFR5cGUuUHJpc21hdGljOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJpc21hdGljTXVsdGlib2R5Sm9pbnQocmF3U2V0LCBoYW5kbGUpO1xuICAgICAgICAgICAgY2FzZSBKb2ludFR5cGUuRml4ZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaXhlZE11bHRpYm9keUpvaW50KHJhd1NldCwgaGFuZGxlKTtcbiAgICAgICAgICAgIC8vICNpZiBESU0zXG4gICAgICAgICAgICBjYXNlIEpvaW50VHlwZS5TcGhlcmljYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTcGhlcmljYWxNdWx0aWJvZHlKb2ludChyYXdTZXQsIGhhbmRsZSk7XG4gICAgICAgICAgICAvLyAjZW5kaWZcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNdWx0aWJvZHlKb2ludChyYXdTZXQsIGhhbmRsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoaXMgam9pbnQgaXMgc3RpbGwgdmFsaWQgKGkuZS4gdGhhdCBpdCBoYXNcbiAgICAgKiBub3QgYmVlbiBkZWxldGVkIGZyb20gdGhlIGpvaW50IHNldCB5ZXQpLlxuICAgICAqL1xuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhd1NldC5jb250YWlucyh0aGlzLmhhbmRsZSk7XG4gICAgfVxuICAgIC8vIC8qKlxuICAgIC8vICAqIFRoZSB1bmlxdWUgaW50ZWdlciBpZGVudGlmaWVyIG9mIHRoZSBmaXJzdCByaWdpZC1ib2R5IHRoaXMgam9pbnQgaXQgYXR0YWNoZWQgdG8uXG4gICAgLy8gICovXG4gICAgLy8gcHVibGljIGJvZHlIYW5kbGUxKCk6IFJpZ2lkQm9keUhhbmRsZSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzLnJhd1NldC5qb2ludEJvZHlIYW5kbGUxKHRoaXMuaGFuZGxlKTtcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyAvKipcbiAgICAvLyAgKiBUaGUgdW5pcXVlIGludGVnZXIgaWRlbnRpZmllciBvZiB0aGUgc2Vjb25kIHJpZ2lkLWJvZHkgdGhpcyBqb2ludCBpcyBhdHRhY2hlZCB0by5cbiAgICAvLyAgKi9cbiAgICAvLyBwdWJsaWMgYm9keUhhbmRsZTIoKTogUmlnaWRCb2R5SGFuZGxlIHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMucmF3U2V0LmpvaW50Qm9keUhhbmRsZTIodGhpcy5oYW5kbGUpO1xuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIC8qKlxuICAgIC8vICAqIFRoZSB0eXBlIG9mIHRoaXMgam9pbnQgZ2l2ZW4gYXMgYSBzdHJpbmcuXG4gICAgLy8gICovXG4gICAgLy8gcHVibGljIHR5cGUoKTogSm9pbnRUeXBlIHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMucmF3U2V0LmpvaW50VHlwZSh0aGlzLmhhbmRsZSk7XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gLy8gI2lmIERJTTNcbiAgICAvLyAvKipcbiAgICAvLyAgKiBUaGUgcm90YXRpb24gcXVhdGVybmlvbiB0aGF0IGFsaWducyB0aGlzIGpvaW50J3MgZmlyc3QgbG9jYWwgYXhpcyB0byB0aGUgYHhgIGF4aXMuXG4gICAgLy8gICovXG4gICAgLy8gcHVibGljIGZyYW1lWDEoKTogUm90YXRpb24ge1xuICAgIC8vICAgICByZXR1cm4gUm90YXRpb25PcHMuZnJvbVJhdyh0aGlzLnJhd1NldC5qb2ludEZyYW1lWDEodGhpcy5oYW5kbGUpKTtcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyAvLyAjZW5kaWZcbiAgICAvL1xuICAgIC8vIC8vICNpZiBESU0zXG4gICAgLy8gLyoqXG4gICAgLy8gICogVGhlIHJvdGF0aW9uIG1hdHJpeCB0aGF0IGFsaWducyB0aGlzIGpvaW50J3Mgc2Vjb25kIGxvY2FsIGF4aXMgdG8gdGhlIGB4YCBheGlzLlxuICAgIC8vICAqL1xuICAgIC8vIHB1YmxpYyBmcmFtZVgyKCk6IFJvdGF0aW9uIHtcbiAgICAvLyAgICAgcmV0dXJuIFJvdGF0aW9uT3BzLmZyb21SYXcodGhpcy5yYXdTZXQuam9pbnRGcmFtZVgyKHRoaXMuaGFuZGxlKSk7XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gLy8gI2VuZGlmXG4gICAgLy9cbiAgICAvLyAvKipcbiAgICAvLyAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IGFuY2hvciBvZiB0aGlzIGpvaW50LlxuICAgIC8vICAqXG4gICAgLy8gICogVGhlIGZpcnN0IGFuY2hvciBnaXZlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvaW50cyBhcHBsaWNhdGlvbiBwb2ludCBvbiB0aGVcbiAgICAvLyAgKiBsb2NhbCBmcmFtZSBvZiB0aGUgZmlyc3QgcmlnaWQtYm9keSBpdCBpcyBhdHRhY2hlZCB0by5cbiAgICAvLyAgKi9cbiAgICAvLyBwdWJsaWMgYW5jaG9yMSgpOiBWZWN0b3Ige1xuICAgIC8vICAgICByZXR1cm4gVmVjdG9yT3BzLmZyb21SYXcodGhpcy5yYXdTZXQuam9pbnRBbmNob3IxKHRoaXMuaGFuZGxlKSk7XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gLyoqXG4gICAgLy8gICogVGhlIHBvc2l0aW9uIG9mIHRoZSBzZWNvbmQgYW5jaG9yIG9mIHRoaXMgam9pbnQuXG4gICAgLy8gICpcbiAgICAvLyAgKiBUaGUgc2Vjb25kIGFuY2hvciBnaXZlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvaW50cyBhcHBsaWNhdGlvbiBwb2ludCBvbiB0aGVcbiAgICAvLyAgKiBsb2NhbCBmcmFtZSBvZiB0aGUgc2Vjb25kIHJpZ2lkLWJvZHkgaXQgaXMgYXR0YWNoZWQgdG8uXG4gICAgLy8gICovXG4gICAgLy8gcHVibGljIGFuY2hvcjIoKTogVmVjdG9yIHtcbiAgICAvLyAgICAgcmV0dXJuIFZlY3Rvck9wcy5mcm9tUmF3KHRoaXMucmF3U2V0LmpvaW50QW5jaG9yMih0aGlzLmhhbmRsZSkpO1xuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB3aGV0aGVyIGNvbnRhY3RzIGFyZSBjb21wdXRlZCBiZXR3ZWVuIGNvbGxpZGVycyBhdHRhY2hlZFxuICAgICAqIHRvIHRoZSByaWdpZC1ib2RpZXMgbGlua2VkIGJ5IHRoaXMgam9pbnQuXG4gICAgICovXG4gICAgc2V0Q29udGFjdHNFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5yYXdTZXQuam9pbnRTZXRDb250YWN0c0VuYWJsZWQodGhpcy5oYW5kbGUsIGVuYWJsZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgY29udGFjdHMgYXJlIGVuYWJsZWQgYmV0d2VlbiBjb2xsaWRlcnMgYXR0YWNoZWRcbiAgICAgKiB0byB0aGUgcmlnaWQtYm9kaWVzIGxpbmtlZCBieSB0aGlzIGpvaW50LlxuICAgICAqL1xuICAgIGNvbnRhY3RzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3U2V0LmpvaW50Q29udGFjdHNFbmFibGVkKHRoaXMuaGFuZGxlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVW5pdE11bHRpYm9keUpvaW50IGV4dGVuZHMgTXVsdGlib2R5Sm9pbnQge1xufVxuZXhwb3J0IGNsYXNzIEZpeGVkTXVsdGlib2R5Sm9pbnQgZXh0ZW5kcyBNdWx0aWJvZHlKb2ludCB7XG59XG5leHBvcnQgY2xhc3MgUHJpc21hdGljTXVsdGlib2R5Sm9pbnQgZXh0ZW5kcyBVbml0TXVsdGlib2R5Sm9pbnQge1xuICAgIHJhd0F4aXMoKSB7XG4gICAgICAgIHJldHVybiBSYXdKb2ludEF4aXMuWDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmV2b2x1dGVNdWx0aWJvZHlKb2ludCBleHRlbmRzIFVuaXRNdWx0aWJvZHlKb2ludCB7XG4gICAgcmF3QXhpcygpIHtcbiAgICAgICAgcmV0dXJuIFJhd0pvaW50QXhpcy5BbmdYO1xuICAgIH1cbn1cbi8vICNpZiBESU0zXG5leHBvcnQgY2xhc3MgU3BoZXJpY2FsTXVsdGlib2R5Sm9pbnQgZXh0ZW5kcyBNdWx0aWJvZHlKb2ludCB7XG59XG4vLyAjZW5kaWZcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpYm9keV9qb2ludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js ***!
  \*************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultibodyJointSet\": () => (/* binding */ MultibodyJointSet)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _coarena__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../coarena */ \"./node_modules/@dimforge/rapier3d/coarena.js\");\n/* harmony import */ var _multibody_joint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multibody_joint */ \"./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _multibody_joint__WEBPACK_IMPORTED_MODULE_2__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _multibody_joint__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nclass MultibodyJointSet {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawMultibodyJointSet();\n        this.map = new _coarena__WEBPACK_IMPORTED_MODULE_1__.Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, _multibody_joint__WEBPACK_IMPORTED_MODULE_2__.MultibodyJoint.newTyped(this.raw, handle));\n            });\n        }\n    }\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = _multibody_joint__WEBPACK_IMPORTED_MODULE_2__.MultibodyJoint.newTyped(this.raw, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wake_up - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wake_up) {\n        this.raw.remove(handle, wake_up);\n        this.map.delete(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Calls the given closure with the integer handle of each multibody joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each multibody joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=multibody_joint_set.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL211bHRpYm9keV9qb2ludF9zZXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4QztBQUNUO0FBR1Q7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhCQUE4QixzREFBb0I7QUFDbEQsdUJBQXVCLDZDQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxxRUFBdUI7QUFDNUQsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxRUFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2R5bmFtaWNzL211bHRpYm9keV9qb2ludF9zZXQuanM/NWI2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdNdWx0aWJvZHlKb2ludFNldCB9IGZyb20gXCIuLi9yYXdcIjtcbmltcG9ydCB7IENvYXJlbmEgfSBmcm9tIFwiLi4vY29hcmVuYVwiO1xuaW1wb3J0IHsgTXVsdGlib2R5Sm9pbnQsXG4vLyAjZW5kaWZcbiB9IGZyb20gXCIuL211bHRpYm9keV9qb2ludFwiO1xuLyoqXG4gKiBBIHNldCBvZiBqb2ludHMuXG4gKlxuICogVG8gYXZvaWQgbGVha2luZyBXQVNNIHJlc291cmNlcywgdGhpcyBNVVNUIGJlIGZyZWVkIG1hbnVhbGx5IHdpdGggYGpvaW50U2V0LmZyZWUoKWBcbiAqIG9uY2UgeW91IGFyZSBkb25lIHVzaW5nIGl0IChhbmQgYWxsIHRoZSBqb2ludHMgaXQgY3JlYXRlZCkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aWJvZHlKb2ludFNldCB7XG4gICAgY29uc3RydWN0b3IocmF3KSB7XG4gICAgICAgIHRoaXMucmF3ID0gcmF3IHx8IG5ldyBSYXdNdWx0aWJvZHlKb2ludFNldCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBDb2FyZW5hKCk7XG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIG1hcCB3aXRoIHRoZSBleGlzdGluZyBlbGVtZW50cywgaWYgYW55LlxuICAgICAgICBpZiAocmF3KSB7XG4gICAgICAgICAgICByYXcuZm9yRWFjaEpvaW50SGFuZGxlKChoYW5kbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXQoaGFuZGxlLCBNdWx0aWJvZHlKb2ludC5uZXdUeXBlZCh0aGlzLnJhdywgaGFuZGxlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBXQVNNIG1lbW9yeSBvY2N1cGllZCBieSB0aGlzIGpvaW50IHNldC5cbiAgICAgKi9cbiAgICBmcmVlKCkge1xuICAgICAgICBpZiAoISF0aGlzLnJhdykge1xuICAgICAgICAgICAgdGhpcy5yYXcuZnJlZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmF3ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoISF0aGlzLm1hcCkge1xuICAgICAgICAgICAgdGhpcy5tYXAuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBqb2ludCBhbmQgcmV0dXJuIGl0cyBpbnRlZ2VyIGhhbmRsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZXNjIC0gVGhlIGpvaW50J3MgcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0gcGFyZW50MSAtIFRoZSBoYW5kbGUgb2YgdGhlIGZpcnN0IHJpZ2lkLWJvZHkgdGhpcyBqb2ludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKiBAcGFyYW0gcGFyZW50MiAtIFRoZSBoYW5kbGUgb2YgdGhlIHNlY29uZCByaWdpZC1ib2R5IHRoaXMgam9pbnQgaXMgYXR0YWNoZWQgdG8uXG4gICAgICogQHBhcmFtIHdha2VVcCAtIFNob3VsZCB0aGUgYXR0YWNoZWQgcmlnaWQtYm9kaWVzIGJlIGF3YWtlbmVkP1xuICAgICAqL1xuICAgIGNyZWF0ZUpvaW50KGRlc2MsIHBhcmVudDEsIHBhcmVudDIsIHdha2VVcCkge1xuICAgICAgICBjb25zdCByYXdQYXJhbXMgPSBkZXNjLmludG9SYXcoKTtcbiAgICAgICAgY29uc3QgaGFuZGxlID0gdGhpcy5yYXcuY3JlYXRlSm9pbnQocmF3UGFyYW1zLCBwYXJlbnQxLCBwYXJlbnQyLCB3YWtlVXApO1xuICAgICAgICByYXdQYXJhbXMuZnJlZSgpO1xuICAgICAgICBsZXQgam9pbnQgPSBNdWx0aWJvZHlKb2ludC5uZXdUeXBlZCh0aGlzLnJhdywgaGFuZGxlKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGhhbmRsZSwgam9pbnQpO1xuICAgICAgICByZXR1cm4gam9pbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGpvaW50IGZyb20gdGhpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlIC0gVGhlIGludGVnZXIgaGFuZGxlIG9mIHRoZSBqb2ludC5cbiAgICAgKiBAcGFyYW0gd2FrZV91cCAtIElmIGB0cnVlYCwgdGhlIHJpZ2lkLWJvZGllcyBhdHRhY2hlZCBieSB0aGUgcmVtb3ZlZCBqb2ludCB3aWxsIGJlIHdva2VuLXVwIGF1dG9tYXRpY2FsbHkuXG4gICAgICovXG4gICAgcmVtb3ZlKGhhbmRsZSwgd2FrZV91cCkge1xuICAgICAgICB0aGlzLnJhdy5yZW1vdmUoaGFuZGxlLCB3YWtlX3VwKTtcbiAgICAgICAgdGhpcy5tYXAuZGVsZXRlKGhhbmRsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGZ1bmN0aW9uLCBkbyBub3QgY2FsbCBkaXJlY3RseS5cbiAgICAgKiBAcGFyYW0gaGFuZGxlXG4gICAgICovXG4gICAgdW5tYXAoaGFuZGxlKSB7XG4gICAgICAgIHRoaXMubWFwLmRlbGV0ZShoYW5kbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGpvaW50cyBvbiB0aGlzIHNldC5cbiAgICAgKi9cbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5sZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRG9lcyB0aGlzIHNldCBjb250YWluIGEgam9pbnQgd2l0aCB0aGUgZ2l2ZW4gaGFuZGxlP1xuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZSAtIFRoZSBqb2ludCBoYW5kbGUgdG8gY2hlY2suXG4gICAgICovXG4gICAgY29udGFpbnMoaGFuZGxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChoYW5kbGUpICE9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGpvaW50IHdpdGggdGhlIGdpdmVuIGhhbmRsZS5cbiAgICAgKlxuICAgICAqIFJldHVybnMgYG51bGxgIGlmIG5vIGpvaW50IHdpdGggdGhlIHNwZWNpZmllZCBoYW5kbGUgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZSAtIFRoZSBpbnRlZ2VyIGhhbmRsZSBvZiB0aGUgam9pbnQgdG8gcmV0cmlldmUuXG4gICAgICovXG4gICAgZ2V0KGhhbmRsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGhhbmRsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGdpdmVuIGNsb3N1cmUgdG8gZWFjaCBqb2ludCBjb250YWluZWQgYnkgdGhpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIFRoZSBjbG9zdXJlIHRvIGFwcGx5LlxuICAgICAqL1xuICAgIGZvckVhY2goZikge1xuICAgICAgICB0aGlzLm1hcC5mb3JFYWNoKGYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2xvc3VyZSB3aXRoIHRoZSBpbnRlZ2VyIGhhbmRsZSBvZiBlYWNoIG11bHRpYm9keSBqb2ludCBhdHRhY2hlZCB0byB0aGlzIHJpZ2lkLWJvZHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIFRoZSBjbG9zdXJlIGNhbGxlZCB3aXRoIHRoZSBpbnRlZ2VyIGhhbmRsZSBvZiBlYWNoIG11bHRpYm9keSBqb2ludCBhdHRhY2hlZCB0byB0aGUgcmlnaWQtYm9keS5cbiAgICAgKi9cbiAgICBmb3JFYWNoSm9pbnRIYW5kbGVBdHRhY2hlZFRvUmlnaWRCb2R5KGhhbmRsZSwgZikge1xuICAgICAgICB0aGlzLnJhdy5mb3JFYWNoSm9pbnRBdHRhY2hlZFRvUmlnaWRCb2R5KGhhbmRsZSwgZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGpvaW50cyBpbiB0aGUgbGlzdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGpvaW50IGxpc3QuXG4gICAgICovXG4gICAgZ2V0QWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0QWxsKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGlib2R5X2pvaW50X3NldC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js":
/*!****************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RigidBody\": () => (/* binding */ RigidBody),\n/* harmony export */   \"RigidBodyDesc\": () => (/* binding */ RigidBodyDesc),\n/* harmony export */   \"RigidBodyType\": () => (/* binding */ RigidBodyType)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__]);\n_math__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// #if DIM3\n\n/**\n * The simulation status of a rigid-body.\n */\n// TODO: rename this to RigidBodyType\nvar RigidBodyType;\n(function (RigidBodyType) {\n    /**\n     * A `RigidBodyType::Dynamic` body can be affected by all external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Dynamic\"] = 0] = \"Dynamic\";\n    /**\n     * A `RigidBodyType::Fixed` body cannot be affected by external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Fixed\"] = 1] = \"Fixed\";\n    /**\n     * A `RigidBodyType::KinematicPositionBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the position level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicPositionBased\"] = 2] = \"KinematicPositionBased\";\n    /**\n     * A `RigidBodyType::KinematicVelocityBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the velocity level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicVelocityBased\"] = 3] = \"KinematicVelocityBased\";\n})(RigidBodyType || (RigidBodyType = {}));\n/**\n * A rigid-body.\n */\nclass RigidBody {\n    constructor(rawSet, colliderSet, handle) {\n        this.rawSet = rawSet;\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n    }\n    /** @internal */\n    finalizeDeserialization(colliderSet) {\n        this.colliderSet = colliderSet;\n    }\n    /**\n     * Checks if this rigid-body is still valid (i.e. that it has\n     * not been deleted from the rigid-body set yet.\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer translate due to forces and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockTranslations(locked, wakeUp) {\n        return this.rawSet.rbLockTranslations(this.handle, locked, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer rotate due to torques and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockRotations(locked, wakeUp) {\n        return this.rawSet.rbLockRotations(this.handle, locked, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledTranslations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledTranslations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledTranslations(enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledRotations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledRotations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledRotations` with the same arguments instead.\n     */\n    restrictRotations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledRotations(enableX, enableY, enableZ, wakeUp);\n    }\n    // #endif\n    /**\n     * The dominance group, in [-127, +127] this rigid-body is part of.\n     */\n    dominanceGroup() {\n        return this.rawSet.rbDominanceGroup(this.handle);\n    }\n    /**\n     * Sets the dominance group of this rigid-body.\n     *\n     * @param group - The dominance group of this rigid-body. Must be a signed integer in the range [-127, +127].\n     */\n    setDominanceGroup(group) {\n        this.rawSet.rbSetDominanceGroup(this.handle, group);\n    }\n    /**\n     * Enable or disable CCD (Continuous Collision Detection) for this rigid-body.\n     *\n     * @param enabled - If `true`, CCD will be enabled for this rigid-body.\n     */\n    enableCcd(enabled) {\n        this.rawSet.rbEnableCcd(this.handle, enabled);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        let res = this.rawSet.rbTranslation(this.handle);\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        let res = this.rawSet.rbRotation(this.handle);\n        return _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.fromRaw(res);\n    }\n    /**\n     * The world-space next translation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextTranslation() {\n        let res = this.rawSet.rbNextTranslation(this.handle);\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space next orientation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextRotation() {\n        let res = this.rawSet.rbNextRotation(this.handle);\n        return _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.fromRaw(res);\n    }\n    /**\n     * Sets the translation of this rigid-body.\n     *\n     * @param tra - The world-space position of the rigid-body.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     *                 wasn't moving before modifying its position.\n     */\n    setTranslation(tra, wakeUp) {\n        // #if DIM3\n        this.rawSet.rbSetTranslation(this.handle, tra.x, tra.y, tra.z, wakeUp);\n        // #endif\n    }\n    /**\n     * Sets the linear velocity fo this rigid-body.\n     *\n     * @param vel - The linear velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setLinvel(vel, wakeUp) {\n        let rawVel = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(vel);\n        this.rawSet.rbSetLinvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    /**\n     * The scale factor applied to the gravity affecting\n     * this rigid-body.\n     */\n    gravityScale() {\n        return this.rawSet.rbGravityScale(this.handle);\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * this rigid-body.\n     *\n     * @param factor - The scale factor to set. A value of 0.0 means\n     *   that this rigid-body will on longer be affected by gravity.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setGravityScale(factor, wakeUp) {\n        this.rawSet.rbSetGravityScale(this.handle, factor, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     */\n    setRotation(rot, wakeUp) {\n        this.rawSet.rbSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w, wakeUp);\n    }\n    /**\n     * Sets the angular velocity fo this rigid-body.\n     *\n     * @param vel - The angular velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setAngvel(vel, wakeUp) {\n        let rawVel = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(vel);\n        this.rawSet.rbSetAngvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    // #endif\n    /**\n     * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param t - The kinematic translation to set.\n     */\n    setNextKinematicTranslation(t) {\n        // #if DIM3\n        this.rawSet.rbSetNextKinematicTranslation(this.handle, t.x, t.y, t.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param rot - The kinematic rotation to set.\n     */\n    setNextKinematicRotation(rot) {\n        this.rawSet.rbSetNextKinematicRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The linear velocity of this rigid-body.\n     */\n    linvel() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbLinvel(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The angular velocity of this rigid-body.\n     */\n    angvel() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbAngvel(this.handle));\n    }\n    // #endif\n    /**\n     * The mass of this rigid-body.\n     */\n    mass() {\n        return this.rawSet.rbMass(this.handle);\n    }\n    /**\n     * The inverse mass taking into account translation locking.\n     */\n    effectiveInvMass() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle));\n    }\n    /**\n     * The inverse of the mass of a rigid-body.\n     *\n     * If this is zero, the rigid-body is assumed to have infinite mass.\n     */\n    invMass() {\n        return this.rawSet.rbInvMass(this.handle);\n    }\n    /**\n     * The center of mass of a rigid-body expressed in its local-space.\n     */\n    localCom() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbLocalCom(this.handle));\n    }\n    /**\n     * The world-space center of mass of the rigid-body.\n     */\n    worldCom() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbWorldCom(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The inverse of the principal angular inertia of the rigid-body.\n     *\n     * Components set to zero are assumed to be infinite along the corresponding principal axis.\n     */\n    invPrincipalInertiaSqrt() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The angular inertia along the principal inertia axes of the rigid-body.\n     */\n    principalInertia() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.rawSet.rbPrincipalInertia(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The principal vectors of the local angular inertia tensor of the rigid-body.\n     */\n    principalInertiaLocalFrame() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n     * taking into account rotation locking.\n     */\n    effectiveWorldInvInertiaSqrt() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n     * this rigid-body.\n     */\n    effectiveAngularInertia() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle));\n    }\n    // #endif\n    /**\n     * Put this rigid body to sleep.\n     *\n     * A sleeping body no longer moves and is no longer simulated by the physics engine unless\n     * it is waken up. It can be woken manually with `this.wakeUp()` or automatically due to\n     * external forces like contacts.\n     */\n    sleep() {\n        this.rawSet.rbSleep(this.handle);\n    }\n    /**\n     * Wakes this rigid-body up.\n     *\n     * A dynamic rigid-body that does not move during several consecutive frames will\n     * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n     * to avoid useless computations.\n     * This methods forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n     * the position of a dynamic body so that it is properly simulated afterwards.\n     */\n    wakeUp() {\n        this.rawSet.rbWakeUp(this.handle);\n    }\n    /**\n     * Is CCD enabled for this rigid-body?\n     */\n    isCcdEnabled() {\n        return this.rawSet.rbIsCcdEnabled(this.handle);\n    }\n    /**\n     * The number of colliders attached to this rigid-body.\n     */\n    numColliders() {\n        return this.rawSet.rbNumColliders(this.handle);\n    }\n    /**\n     * Retrieves the `i-th` collider attached to this rigid-body.\n     *\n     * @param i - The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n     *         This index is **not** the same as the unique identifier of the collider.\n     */\n    collider(i) {\n        return this.colliderSet.get(this.rawSet.rbCollider(this.handle, i));\n    }\n    /**\n     * Sets whether this rigid-body is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this rigid-body and all its attached colliders.\n     */\n    setEnabled(enabled) {\n        this.rawSet.rbSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this rigid-body enabled?\n     */\n    isEnabled() {\n        return this.rawSet.rbIsEnabled(this.handle);\n    }\n    /**\n     * The status of this rigid-body: static, dynamic, or kinematic.\n     */\n    bodyType() {\n        return this.rawSet.rbBodyType(this.handle);\n    }\n    /**\n     * Set a new status for this rigid-body: static, dynamic, or kinematic.\n     */\n    setBodyType(type, wakeUp) {\n        return this.rawSet.rbSetBodyType(this.handle, type, wakeUp);\n    }\n    /**\n     * Is this rigid-body sleeping?\n     */\n    isSleeping() {\n        return this.rawSet.rbIsSleeping(this.handle);\n    }\n    /**\n     * Is the velocity of this rigid-body not zero?\n     */\n    isMoving() {\n        return this.rawSet.rbIsMoving(this.handle);\n    }\n    /**\n     * Is this rigid-body static?\n     */\n    isFixed() {\n        return this.rawSet.rbIsFixed(this.handle);\n    }\n    /**\n     * Is this rigid-body kinematic?\n     */\n    isKinematic() {\n        return this.rawSet.rbIsKinematic(this.handle);\n    }\n    /**\n     * Is this rigid-body dynamic?\n     */\n    isDynamic() {\n        return this.rawSet.rbIsDynamic(this.handle);\n    }\n    /**\n     * The linear damping coefficient of this rigid-body.\n     */\n    linearDamping() {\n        return this.rawSet.rbLinearDamping(this.handle);\n    }\n    /**\n     * The angular damping coefficient of this rigid-body.\n     */\n    angularDamping() {\n        return this.rawSet.rbAngularDamping(this.handle);\n    }\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setLinearDamping(factor) {\n        this.rawSet.rbSetLinearDamping(this.handle, factor);\n    }\n    /**\n     * Recompute the mass-properties of this rigid-bodies based on its currently attached colliders.\n     */\n    recomputeMassPropertiesFromColliders() {\n        this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle, this.colliderSet.raw);\n    }\n    /**\n     * Sets the rigid-body's additional mass.\n     *\n     * The total angular inertia of the rigid-body will be scaled automatically based on this additional mass. If this\n     * scaling effect isn’t desired, use Self::additional_mass_properties instead of this method.\n     *\n     * This is only the \"additional\" mass because the total mass of the rigid-body is equal to the sum of this\n     * additional mass and the mass computed from the colliders (with non-zero densities) attached to this rigid-body.\n     *\n     * That total mass (which includes the attached colliders’ contributions) will be updated at the name physics step,\n     * or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous additional mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc::setAdditionalMass`, or\n     * `RigidBodyDesc.setAdditionalMassfProperties` for this rigid-body.\n     *\n     * @param mass - The additional mass to set.\n     * @param wakeUp - If `true` then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMass(mass, wakeUp) {\n        this.rawSet.rbSetAdditionalMass(this.handle, mass, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rigid-body's additional mass-properties.\n     *\n     * This is only the \"additional\" mass-properties because the total mass-properties of the rigid-body is equal to the\n     * sum of this additional mass-properties and the mass computed from the colliders (with non-zero densities) attached\n     * to this rigid-body.\n     *\n     * That total mass-properties (which include the attached colliders’ contributions) will be updated at the name\n     * physics step, or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc.setAdditionalMass`, or `RigidBodyDesc.setAdditionalMassProperties`\n     * for this rigid-body.\n     *\n     * If `wake_up` is true then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame, wakeUp) {\n        let rawCom = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.rawSet.rbSetAdditionalMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame, wakeUp);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setAngularDamping(factor) {\n        this.rawSet.rbSetAngularDamping(this.handle, factor);\n    }\n    /**\n     * Resets to zero the user forces (but not torques) applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetForces(wakeUp) {\n        this.rawSet.rbResetForces(this.handle, wakeUp);\n    }\n    /**\n     * Resets to zero the user torques applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetTorques(wakeUp) {\n        this.rawSet.rbResetTorques(this.handle, wakeUp);\n    }\n    /**\n     * Adds a force at the center-of-mass of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForce(force, wakeUp) {\n        const rawForce = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(force);\n        this.rawSet.rbAddForce(this.handle, rawForce, wakeUp);\n        rawForce.free();\n    }\n    /**\n     * Applies an impulse at the center-of-mass of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulse(impulse, wakeUp) {\n        const rawImpulse = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(impulse);\n        this.rawSet.rbApplyImpulse(this.handle, rawImpulse, wakeUp);\n        rawImpulse.free();\n    }\n    // #if DIM3\n    /**\n     * Adds a torque at the center-of-mass of this rigid-body.\n     *\n     * @param torque - the world-space torque to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addTorque(torque, wakeUp) {\n        const rawTorque = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(torque);\n        this.rawSet.rbAddTorque(this.handle, rawTorque, wakeUp);\n        rawTorque.free();\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Applies an impulsive torque at the center-of-mass of this rigid-body.\n     *\n     * @param torqueImpulse - the world-space torque impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyTorqueImpulse(torqueImpulse, wakeUp) {\n        const rawTorqueImpulse = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(torqueImpulse);\n        this.rawSet.rbApplyTorqueImpulse(this.handle, rawTorqueImpulse, wakeUp);\n        rawTorqueImpulse.free();\n    }\n    // #endif\n    /**\n     * Adds a force at the given world-space point of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForceAtPoint(force, point, wakeUp) {\n        const rawForce = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(force);\n        const rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(point);\n        this.rawSet.rbAddForceAtPoint(this.handle, rawForce, rawPoint, wakeUp);\n        rawForce.free();\n        rawPoint.free();\n    }\n    /**\n     * Applies an impulse at the given world-space point of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulseAtPoint(impulse, point, wakeUp) {\n        const rawImpulse = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(impulse);\n        const rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(point);\n        this.rawSet.rbApplyImpulseAtPoint(this.handle, rawImpulse, rawPoint, wakeUp);\n        rawImpulse.free();\n        rawPoint.free();\n    }\n}\nclass RigidBodyDesc {\n    constructor(status) {\n        this.enabled = true;\n        this.status = status;\n        this.translation = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.zeros();\n        this.rotation = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.identity();\n        this.gravityScale = 1.0;\n        this.linvel = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.zeros();\n        this.mass = 0.0;\n        this.massOnly = false;\n        this.centerOfMass = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.zeros();\n        this.translationsEnabledX = true;\n        this.translationsEnabledY = true;\n        // #if DIM3\n        this.angvel = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.zeros();\n        this.principalAngularInertia = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.zeros();\n        this.angularInertiaLocalFrame = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.identity();\n        this.translationsEnabledZ = true;\n        this.rotationsEnabledX = true;\n        this.rotationsEnabledY = true;\n        this.rotationsEnabledZ = true;\n        // #endif\n        this.linearDamping = 0.0;\n        this.angularDamping = 0.0;\n        this.canSleep = true;\n        this.sleeping = false;\n        this.ccdEnabled = false;\n        this.dominanceGroup = 0;\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     */\n    static dynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     */\n    static kinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     */\n    static kinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     */\n    static fixed() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.dynamic()`.\n     */\n    static newDynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicPositionBased()`.\n     */\n    static newKinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicVelocityBased()`.\n     */\n    static newKinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     *\n     * @deprecated The method has been renamed to `.fixed()`.\n     */\n    static newStatic() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    setDominanceGroup(group) {\n        this.dominanceGroup = group;\n        return this;\n    }\n    /**\n     * Sets whether the created rigid-body will be enabled or disabled.\n     * @param enabled − If set to `false` the rigid-body will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial translation of the rigid-body to create.\n     *\n     * @param tra - The translation to set.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the initial rotation of the rigid-body to create.\n     *\n     * @param rot - The rotation to set.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * the rigid-body being built.\n     *\n     * @param scale - The scale factor. Set this to `0.0` if the rigid-body\n     *   needs to ignore gravity.\n     */\n    setGravityScale(scale) {\n        this.gravityScale = scale;\n        return this;\n    }\n    /**\n     * Sets the initial mass of the rigid-body being built, before adding colliders' contributions.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     */\n    setAdditionalMass(mass) {\n        this.mass = mass;\n        this.massOnly = true;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial linear velocity of the rigid-body to create.\n     *\n     * @param x - The linear velocity to set along the `x` axis.\n     * @param y - The linear velocity to set along the `y` axis.\n     * @param z - The linear velocity to set along the `z` axis.\n     */\n    setLinvel(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The linvel components must be numbers.\");\n        this.linvel = { x: x, y: y, z: z };\n        return this;\n    }\n    /**\n     * Sets the initial angular velocity of the rigid-body to create.\n     *\n     * @param vel - The angular velocity to set.\n     */\n    setAngvel(vel) {\n        _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.copy(this.angvel, vel);\n        return this;\n    }\n    /**\n     * Sets the mass properties of the rigid-body being built.\n     *\n     * Note that the final mass properties of the rigid-bodies depends\n     * on the initial mass-properties of the rigid-body (set by this method)\n     * to which is added the contributions of all the colliders with non-zero density\n     * attached to this rigid-body.\n     *\n     * Therefore, if you want your provided mass properties to be the final\n     * mass properties of your rigid-body, don't attach colliders to it, or\n     * only attach colliders with densities equal to zero.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     * @param centerOfMass − The initial center-of-mass of the rigid-body to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the rigid-body to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the rigid-body to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.mass = mass;\n        _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.copy(this.centerOfMass, centerOfMass);\n        _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        this.massOnly = false;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     */\n    enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        this.translationsEnabledX = translationsEnabledX;\n        this.translationsEnabledY = translationsEnabledY;\n        this.translationsEnabledZ = translationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     * @deprecated use `this.enabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        return this.enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ);\n    }\n    /**\n     * Locks all translations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockTranslations() {\n        return this.enabledTranslations(false, false, false);\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     */\n    enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        this.rotationsEnabledX = rotationsEnabledX;\n        this.rotationsEnabledY = rotationsEnabledY;\n        this.rotationsEnabledZ = rotationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     * @deprecated use `this.enabledRotations` with the same arguments instead.\n     */\n    restrictRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        return this.enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ);\n    }\n    /**\n     * Locks all rotations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockRotations() {\n        return this.restrictRotations(false, false, false);\n    }\n    // #endif\n    /**\n     * Sets the linear damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the translational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the translational slowdown will be.\n     */\n    setLinearDamping(damping) {\n        this.linearDamping = damping;\n        return this;\n    }\n    /**\n     * Sets the angular damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the rotational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the rotational slowdown will be.\n     */\n    setAngularDamping(damping) {\n        this.angularDamping = damping;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body to create can sleep.\n     *\n     * @param can - true if the rigid-body can sleep, false if it can't.\n     */\n    setCanSleep(can) {\n        this.canSleep = can;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body is to be created asleep.\n     *\n     * @param can - true if the rigid-body should be in sleep, default false.\n     */\n    setSleeping(sleeping) {\n        this.sleeping = sleeping;\n        return this;\n    }\n    /**\n     * Sets whether Continuous Collision Detection (CCD) is enabled for this rigid-body.\n     *\n     * @param enabled - true if the rigid-body has CCD enabled.\n     */\n    setCcdEnabled(enabled) {\n        this.ccdEnabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the user-defined object of this rigid-body.\n     *\n     * @param userData - The user-defined object to set.\n     */\n    setUserData(data) {\n        this.userData = data;\n        return this;\n    }\n}\n//# sourceMappingURL=rigid_body.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js":
/*!********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RigidBodySet\": () => (/* binding */ RigidBodySet)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _coarena__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../coarena */ \"./node_modules/@dimforge/rapier3d/coarena.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _rigid_body__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rigid_body */ \"./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _rigid_body__WEBPACK_IMPORTED_MODULE_2__, _math__WEBPACK_IMPORTED_MODULE_3__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _rigid_body__WEBPACK_IMPORTED_MODULE_2__, _math__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `rigidBodySet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nclass RigidBodySet {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawRigidBodySet();\n        this.map = new _coarena__WEBPACK_IMPORTED_MODULE_1__.Coarena();\n        // deserialize\n        if (raw) {\n            raw.forEachRigidBodyHandle((handle) => {\n                this.map.set(handle, new _rigid_body__WEBPACK_IMPORTED_MODULE_2__.RigidBody(raw, null, handle));\n            });\n        }\n    }\n    /**\n     * Release the WASM memory occupied by this rigid-body set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    /**\n     * Internal method, do not call this explicitly.\n     */\n    finalizeDeserialization(colliderSet) {\n        this.map.forEach((rb) => rb.finalizeDeserialization(colliderSet));\n    }\n    /**\n     * Creates a new rigid-body and return its integer handle.\n     *\n     * @param desc - The description of the rigid-body to create.\n     */\n    createRigidBody(colliderSet, desc) {\n        let rawTra = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.translation);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_3__.RotationOps.intoRaw(desc.rotation);\n        let rawLv = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.linvel);\n        let rawCom = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawAv = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.angvel);\n        let rawPrincipalInertia = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = _math__WEBPACK_IMPORTED_MODULE_3__.RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createRigidBody(desc.enabled, rawTra, rawRot, desc.gravityScale, desc.mass, desc.massOnly, rawCom, rawLv, \n        // #if DIM3\n        rawAv, rawPrincipalInertia, rawInertiaFrame, desc.translationsEnabledX, desc.translationsEnabledY, desc.translationsEnabledZ, desc.rotationsEnabledX, desc.rotationsEnabledY, desc.rotationsEnabledZ, \n        // #endif\n        desc.linearDamping, desc.angularDamping, desc.status, desc.canSleep, desc.sleeping, desc.ccdEnabled, desc.dominanceGroup);\n        rawTra.free();\n        rawRot.free();\n        rawLv.free();\n        rawCom.free();\n        // #if DIM3\n        rawAv.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        const body = new _rigid_body__WEBPACK_IMPORTED_MODULE_2__.RigidBody(this.raw, colliderSet, handle);\n        body.userData = desc.userData;\n        this.map.set(handle, body);\n        return body;\n    }\n    /**\n     * Removes a rigid-body from this set.\n     *\n     * This will also remove all the colliders and joints attached to the rigid-body.\n     *\n     * @param handle - The integer handle of the rigid-body to remove.\n     * @param colliders - The set of colliders that may contain colliders attached to the removed rigid-body.\n     * @param impulseJoints - The set of impulse joints that may contain joints attached to the removed rigid-body.\n     * @param multibodyJoints - The set of multibody joints that may contain joints attached to the removed rigid-body.\n     */\n    remove(handle, islands, colliders, impulseJoints, multibodyJoints) {\n        // Unmap the entities that will be removed automatically because of the rigid-body removals.\n        for (let i = 0; i < this.raw.rbNumColliders(handle); i += 1) {\n            colliders.unmap(this.raw.rbCollider(handle, i));\n        }\n        impulseJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => impulseJoints.unmap(handle));\n        multibodyJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => multibodyJoints.unmap(handle));\n        // Remove the rigid-body.\n        this.raw.remove(handle, islands.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        this.map.delete(handle);\n    }\n    /**\n     * The number of rigid-bodies on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a rigid-body with the given handle?\n     *\n     * @param handle - The rigid-body handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each rigid-body contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBody(islands, f) {\n        islands.forEachActiveRigidBodyHandle((handle) => {\n            f(this.get(handle));\n        });\n    }\n    /**\n     * Gets all rigid-bodies in the list.\n     *\n     * @returns rigid-bodies list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=rigid_body_set.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/exports.js":
/*!****************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/exports.js ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveCollisionTypes\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ActiveCollisionTypes),\n/* harmony export */   \"ActiveEvents\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.ActiveEvents),\n/* harmony export */   \"ActiveHooks\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.ActiveHooks),\n/* harmony export */   \"Ball\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Ball),\n/* harmony export */   \"BroadPhase\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.BroadPhase),\n/* harmony export */   \"CCDSolver\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.CCDSolver),\n/* harmony export */   \"Capsule\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Capsule),\n/* harmony export */   \"CharacterCollision\": () => (/* reexport safe */ _control__WEBPACK_IMPORTED_MODULE_5__.CharacterCollision),\n/* harmony export */   \"CoefficientCombineRule\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.CoefficientCombineRule),\n/* harmony export */   \"Collider\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Collider),\n/* harmony export */   \"ColliderDesc\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ColliderDesc),\n/* harmony export */   \"ColliderSet\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ColliderSet),\n/* harmony export */   \"Cone\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Cone),\n/* harmony export */   \"ConvexPolyhedron\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ConvexPolyhedron),\n/* harmony export */   \"Cuboid\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Cuboid),\n/* harmony export */   \"Cylinder\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Cylinder),\n/* harmony export */   \"DebugRenderBuffers\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.DebugRenderBuffers),\n/* harmony export */   \"DebugRenderPipeline\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.DebugRenderPipeline),\n/* harmony export */   \"EventQueue\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.EventQueue),\n/* harmony export */   \"FeatureType\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.FeatureType),\n/* harmony export */   \"FixedImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.FixedImpulseJoint),\n/* harmony export */   \"FixedMultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.FixedMultibodyJoint),\n/* harmony export */   \"HalfSpace\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.HalfSpace),\n/* harmony export */   \"Heightfield\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Heightfield),\n/* harmony export */   \"ImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.ImpulseJoint),\n/* harmony export */   \"ImpulseJointSet\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.ImpulseJointSet),\n/* harmony export */   \"IntegrationParameters\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.IntegrationParameters),\n/* harmony export */   \"IslandManager\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.IslandManager),\n/* harmony export */   \"JointData\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.JointData),\n/* harmony export */   \"JointType\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.JointType),\n/* harmony export */   \"KinematicCharacterController\": () => (/* reexport safe */ _control__WEBPACK_IMPORTED_MODULE_5__.KinematicCharacterController),\n/* harmony export */   \"MassPropsMode\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.MassPropsMode),\n/* harmony export */   \"MotorModel\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.MotorModel),\n/* harmony export */   \"MultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.MultibodyJoint),\n/* harmony export */   \"MultibodyJointSet\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.MultibodyJointSet),\n/* harmony export */   \"NarrowPhase\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.NarrowPhase),\n/* harmony export */   \"PhysicsPipeline\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.PhysicsPipeline),\n/* harmony export */   \"PointColliderProjection\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.PointColliderProjection),\n/* harmony export */   \"PointProjection\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.PointProjection),\n/* harmony export */   \"Polyline\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Polyline),\n/* harmony export */   \"PrismaticImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.PrismaticImpulseJoint),\n/* harmony export */   \"PrismaticMultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.PrismaticMultibodyJoint),\n/* harmony export */   \"Quaternion\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.Quaternion),\n/* harmony export */   \"QueryFilterFlags\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.QueryFilterFlags),\n/* harmony export */   \"QueryPipeline\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.QueryPipeline),\n/* harmony export */   \"Ray\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Ray),\n/* harmony export */   \"RayColliderIntersection\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RayColliderIntersection),\n/* harmony export */   \"RayColliderToi\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RayColliderToi),\n/* harmony export */   \"RayIntersection\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RayIntersection),\n/* harmony export */   \"RevoluteImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RevoluteImpulseJoint),\n/* harmony export */   \"RevoluteMultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RevoluteMultibodyJoint),\n/* harmony export */   \"RigidBody\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RigidBody),\n/* harmony export */   \"RigidBodyDesc\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RigidBodyDesc),\n/* harmony export */   \"RigidBodySet\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RigidBodySet),\n/* harmony export */   \"RigidBodyType\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.RigidBodyType),\n/* harmony export */   \"RotationOps\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps),\n/* harmony export */   \"RoundCone\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RoundCone),\n/* harmony export */   \"RoundConvexPolyhedron\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RoundConvexPolyhedron),\n/* harmony export */   \"RoundCuboid\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RoundCuboid),\n/* harmony export */   \"RoundCylinder\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RoundCylinder),\n/* harmony export */   \"RoundTriangle\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.RoundTriangle),\n/* harmony export */   \"SdpMatrix3\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.SdpMatrix3),\n/* harmony export */   \"SdpMatrix3Ops\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.SdpMatrix3Ops),\n/* harmony export */   \"Segment\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Segment),\n/* harmony export */   \"SerializationPipeline\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.SerializationPipeline),\n/* harmony export */   \"Shape\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Shape),\n/* harmony export */   \"ShapeColliderTOI\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ShapeColliderTOI),\n/* harmony export */   \"ShapeContact\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ShapeContact),\n/* harmony export */   \"ShapeTOI\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ShapeTOI),\n/* harmony export */   \"ShapeType\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.ShapeType),\n/* harmony export */   \"SolverFlags\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.SolverFlags),\n/* harmony export */   \"SphericalImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.SphericalImpulseJoint),\n/* harmony export */   \"SphericalMultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.SphericalMultibodyJoint),\n/* harmony export */   \"TempContactForceEvent\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.TempContactForceEvent),\n/* harmony export */   \"TempContactManifold\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.TempContactManifold),\n/* harmony export */   \"TriMesh\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.TriMesh),\n/* harmony export */   \"Triangle\": () => (/* reexport safe */ _geometry__WEBPACK_IMPORTED_MODULE_3__.Triangle),\n/* harmony export */   \"UnitImpulseJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.UnitImpulseJoint),\n/* harmony export */   \"UnitMultibodyJoint\": () => (/* reexport safe */ _dynamics__WEBPACK_IMPORTED_MODULE_2__.UnitMultibodyJoint),\n/* harmony export */   \"Vector3\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.Vector3),\n/* harmony export */   \"VectorOps\": () => (/* reexport safe */ _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps),\n/* harmony export */   \"World\": () => (/* reexport safe */ _pipeline__WEBPACK_IMPORTED_MODULE_4__.World),\n/* harmony export */   \"version\": () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/index.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./geometry */ \"./node_modules/@dimforge/rapier3d/geometry/index.js\");\n/* harmony import */ var _pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/index.js\");\n/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./control */ \"./node_modules/@dimforge/rapier3d/control/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _dynamics__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _pipeline__WEBPACK_IMPORTED_MODULE_4__, _control__WEBPACK_IMPORTED_MODULE_5__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _dynamics__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _pipeline__WEBPACK_IMPORTED_MODULE_4__, _control__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\nfunction version() {\n    return (0,_raw__WEBPACK_IMPORTED_MODULE_0__.version)();\n}\n\n\n\n\n\n\n//# sourceMappingURL=exports.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2V4cG9ydHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDakM7QUFDUCxXQUFXLDZDQUFJO0FBQ2Y7QUFDdUI7QUFDSTtBQUNBO0FBQ0E7QUFDSjtBQUNHO0FBQzFCLG1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9leHBvcnRzLmpzPzMxNjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyc2lvbiBhcyB2ZXJzIH0gZnJvbSBcIi4vcmF3XCI7XG5leHBvcnQgZnVuY3Rpb24gdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdmVycygpO1xufVxuZXhwb3J0ICogZnJvbSBcIi4vbWF0aFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZHluYW1pY3NcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlb21ldHJ5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9waXBlbGluZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5pdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29udHJvbFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb3J0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/exports.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/broad_phase.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/broad_phase.js ***!
  \*****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BroadPhase\": () => (/* binding */ BroadPhase)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The broad-phase used for coarse collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `broadPhase.free()`\n * once you are done using it.\n */\nclass BroadPhase {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawBroadPhase();\n    }\n    /**\n     * Release the WASM memory occupied by this broad-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n}\n//# sourceMappingURL=broad_phase.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L2Jyb2FkX3BoYXNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4QkFBOEIsK0NBQWE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9nZW9tZXRyeS9icm9hZF9waGFzZS5qcz8wMmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0Jyb2FkUGhhc2UgfSBmcm9tIFwiLi4vcmF3XCI7XG4vKipcbiAqIFRoZSBicm9hZC1waGFzZSB1c2VkIGZvciBjb2Fyc2UgY29sbGlzaW9uLWRldGVjdGlvbi5cbiAqXG4gKiBUbyBhdm9pZCBsZWFraW5nIFdBU00gcmVzb3VyY2VzLCB0aGlzIE1VU1QgYmUgZnJlZWQgbWFudWFsbHkgd2l0aCBgYnJvYWRQaGFzZS5mcmVlKClgXG4gKiBvbmNlIHlvdSBhcmUgZG9uZSB1c2luZyBpdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJyb2FkUGhhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHJhdykge1xuICAgICAgICB0aGlzLnJhdyA9IHJhdyB8fCBuZXcgUmF3QnJvYWRQaGFzZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBXQVNNIG1lbW9yeSBvY2N1cGllZCBieSB0aGlzIGJyb2FkLXBoYXNlLlxuICAgICAqL1xuICAgIGZyZWUoKSB7XG4gICAgICAgIGlmICghIXRoaXMucmF3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdy5mcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYXcgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvYWRfcGhhc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/broad_phase.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/collider.js":
/*!**************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/collider.js ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveCollisionTypes\": () => (/* binding */ ActiveCollisionTypes),\n/* harmony export */   \"Collider\": () => (/* binding */ Collider),\n/* harmony export */   \"ColliderDesc\": () => (/* binding */ ColliderDesc),\n/* harmony export */   \"MassPropsMode\": () => (/* binding */ MassPropsMode)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js\");\n/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ \"./node_modules/@dimforge/rapier3d/geometry/shape.js\");\n/* harmony import */ var _ray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ray */ \"./node_modules/@dimforge/rapier3d/geometry/ray.js\");\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./point */ \"./node_modules/@dimforge/rapier3d/geometry/point.js\");\n/* harmony import */ var _toi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toi */ \"./node_modules/@dimforge/rapier3d/geometry/toi.js\");\n/* harmony import */ var _contact__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contact */ \"./node_modules/@dimforge/rapier3d/geometry/contact.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_shape__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _point__WEBPACK_IMPORTED_MODULE_2__, _toi__WEBPACK_IMPORTED_MODULE_3__, _contact__WEBPACK_IMPORTED_MODULE_4__, _ray__WEBPACK_IMPORTED_MODULE_5__]);\n([_shape__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _point__WEBPACK_IMPORTED_MODULE_2__, _toi__WEBPACK_IMPORTED_MODULE_3__, _contact__WEBPACK_IMPORTED_MODULE_4__, _ray__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n/**\n * Flags affecting whether collision-detection happens between two colliders\n * depending on the type of rigid-bodies they are attached to.\n */\nvar ActiveCollisionTypes;\n(function (ActiveCollisionTypes) {\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a dynamic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_DYNAMIC\"] = 1] = \"DYNAMIC_DYNAMIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_KINEMATIC\"] = 12] = \"DYNAMIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_FIXED\"] = 2] = \"DYNAMIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_KINEMATIC\"] = 52224] = \"KINEMATIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_FIXED\"] = 8704] = \"KINEMATIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a fixed body (or\n     * not attached to any body) and another collider attached to a fixed body (or\n     * not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"FIXED_FIXED\"] = 32] = \"FIXED_FIXED\";\n    /**\n     * The default active collision types, enabling collisions between a dynamic body\n     * and another body of any type, but not enabling collisions between two non-dynamic bodies.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DEFAULT\"] = 15] = \"DEFAULT\";\n    /**\n     * Enable collisions between any kind of rigid-bodies (including between two non-dynamic bodies).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"ALL\"] = 60943] = \"ALL\";\n})(ActiveCollisionTypes || (ActiveCollisionTypes = {}));\n/**\n * A geometric entity that can be attached to a body so it can be affected\n * by contacts and proximity queries.\n */\nclass Collider {\n    constructor(colliderSet, handle, parent, shape) {\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n        this._parent = parent;\n        this._shape = shape;\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        if (this.handle != null) {\n            this._parent = bodies.get(this.colliderSet.raw.coParent(this.handle));\n        }\n    }\n    ensureShapeIsCached() {\n        if (!this._shape)\n            this._shape = _shape__WEBPACK_IMPORTED_MODULE_0__.Shape.fromRaw(this.colliderSet.raw, this.handle);\n    }\n    /**\n     * The shape of this collider.\n     */\n    get shape() {\n        this.ensureShapeIsCached();\n        return this._shape;\n    }\n    /**\n     * Checks if this collider is still valid (i.e. that it has\n     * not been deleted from the collider set yet).\n     */\n    isValid() {\n        return this.colliderSet.raw.contains(this.handle);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.colliderSet.raw.coTranslation(this.handle));\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.fromRaw(this.colliderSet.raw.coRotation(this.handle));\n    }\n    /**\n     * Is this collider a sensor?\n     */\n    isSensor() {\n        return this.colliderSet.raw.coIsSensor(this.handle);\n    }\n    /**\n     * Sets whether or not this collider is a sensor.\n     * @param isSensor - If `true`, the collider will be a sensor.\n     */\n    setSensor(isSensor) {\n        this.colliderSet.raw.coSetSensor(this.handle, isSensor);\n    }\n    /**\n     * Sets the new shape of the collider.\n     * @param shape - The collider’s new shape.\n     */\n    setShape(shape) {\n        let rawShape = shape.intoRaw();\n        this.colliderSet.raw.coSetShape(this.handle, rawShape);\n        rawShape.free();\n        this._shape = shape;\n    }\n    /**\n     * Sets whether this collider is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this collider (its parent rigid-body won’t be disabled automatically by this).\n     */\n    setEnabled(enabled) {\n        this.colliderSet.raw.coSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this collider enabled?\n     */\n    isEnabled() {\n        return this.colliderSet.raw.coIsEnabled(this.handle);\n    }\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.colliderSet.raw.coSetRestitution(this.handle, restitution);\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.colliderSet.raw.coSetFriction(this.handle, friction);\n    }\n    /**\n     * Gets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    frictionCombineRule() {\n        return this.colliderSet.raw.coFrictionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.colliderSet.raw.coSetFrictionCombineRule(this.handle, rule);\n    }\n    /**\n     * Gets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    restitutionCombineRule() {\n        return this.colliderSet.raw.coRestitutionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.colliderSet.raw.coSetRestitutionCombineRule(this.handle, rule);\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.colliderSet.raw.coSetCollisionGroups(this.handle, groups);\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.colliderSet.raw.coSetSolverGroups(this.handle, groups);\n    }\n    /**\n     * Get the physics hooks active for this collider.\n     */\n    activeHooks() {\n        return this.colliderSet.raw.coActiveHooks(this.handle);\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.colliderSet.raw.coSetActiveHooks(this.handle, activeHooks);\n    }\n    /**\n     * The events active for this collider.\n     */\n    activeEvents() {\n        return this.colliderSet.raw.coActiveEvents(this.handle);\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.colliderSet.raw.coSetActiveEvents(this.handle, activeEvents);\n    }\n    /**\n     * Gets the collision types active for this collider.\n     */\n    activeCollisionTypes() {\n        return this.colliderSet.raw.coActiveCollisionTypes(this.handle);\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The new force threshold.\n     */\n    setContactForceEventThreshold(threshold) {\n        return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle, threshold);\n    }\n    /**\n     * The total force magnitude beyond which a contact force event can be emitted.\n     */\n    contactForceEventThreshold() {\n        return this.colliderSet.raw.coContactForceEventThreshold(this.handle);\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.colliderSet.raw.coSetActiveCollisionTypes(this.handle, activeCollisionTypes);\n    }\n    /**\n     * Sets the uniform density of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The mass and angular inertia of this collider will be computed automatically based on its\n     * shape.\n     */\n    setDensity(density) {\n        this.colliderSet.raw.coSetDensity(this.handle, density);\n    }\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The angular inertia of this collider will be computed automatically based on its shape\n     * and this mass value.\n     */\n    setMass(mass) {\n        this.colliderSet.raw.coSetMass(this.handle, mass);\n    }\n    // #if DIM3\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        let rawCom = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.colliderSet.raw.coSetMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the translation of this collider.\n     *\n     * @param tra - The world-space position of the collider.\n     */\n    setTranslation(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslation(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    /**\n     * Sets the translation of this collider relative to its parent rigid-body.\n     *\n     * Does nothing if this collider isn't attached to a rigid-body.\n     *\n     * @param tra - The new translation of the collider relative to its parent.\n     */\n    setTranslationWrtParent(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslationWrtParent(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this collider.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotation(rot) {\n        this.colliderSet.raw.coSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    /**\n     * Sets the rotation quaternion of this collider relative to its parent rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided or if this collider isn't\n     * attached to a rigid-body.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotationWrtParent(rot) {\n        this.colliderSet.raw.coSetRotationWrtParent(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The type of the shape of this collider.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    shapeType() {\n        return this.colliderSet.raw.coShapeType(this.handle);\n    }\n    /**\n     * The half-extents of this collider if it is a cuboid shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfExtents() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle));\n    }\n    /**\n     * Sets the half-extents of this collider if it is a cuboid shape.\n     *\n     * @param newHalfExtents - desired half extents.\n     */\n    setHalfExtents(newHalfExtents) {\n        const rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(newHalfExtents);\n        this.colliderSet.raw.coSetHalfExtents(this.handle, rawPoint);\n    }\n    /**\n     * The radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    radius() {\n        return this.colliderSet.raw.coRadius(this.handle);\n    }\n    /**\n     * Sets the radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     *\n     * @param newRadius - desired radius.\n     */\n    setRadius(newRadius) {\n        this.colliderSet.raw.coSetRadius(this.handle, newRadius);\n    }\n    /**\n     * The radius of the round edges of this collider if it is a round cylinder.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    roundRadius() {\n        return this.colliderSet.raw.coRoundRadius(this.handle);\n    }\n    /**\n     * Sets the radius of the round edges of this collider if it has round edges.\n     *\n     * @param newBorderRadius - desired round edge radius.\n     */\n    setRoundRadius(newBorderRadius) {\n        this.colliderSet.raw.coSetRoundRadius(this.handle, newBorderRadius);\n    }\n    /**\n     * The half height of this collider if it is a cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfHeight() {\n        return this.colliderSet.raw.coHalfHeight(this.handle);\n    }\n    /**\n     * Sets the half height of this collider if it is a cylinder, capsule, or cone shape.\n     *\n     * @param newHalfheight - desired half height.\n     */\n    setHalfHeight(newHalfheight) {\n        this.colliderSet.raw.coSetHalfHeight(this.handle, newHalfheight);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, convex polygon, or convex polyhedron shape,\n     * this returns the vertex buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    vertices() {\n        return this.colliderSet.raw.coVertices(this.handle);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, or convex polyhedron shape,\n     * this returns the index buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    indices() {\n        return this.colliderSet.raw.coIndices(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the heights buffer of\n     * the heightfield.\n     * In 3D, the returned height matrix is provided in column-major order.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldHeights() {\n        return this.colliderSet.raw.coHeightfieldHeights(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the scale\n     * applied to it.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldScale() {\n        let scale = this.colliderSet.raw.coHeightfieldScale(this.handle);\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(scale);\n    }\n    // #if DIM3\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * rows of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNRows() {\n        return this.colliderSet.raw.coHeightfieldNRows(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * columns of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNCols() {\n        return this.colliderSet.raw.coHeightfieldNCols(this.handle);\n    }\n    // #endif\n    /**\n     * The rigid-body this collider is attached to.\n     */\n    parent() {\n        return this._parent;\n    }\n    /**\n     * The friction coefficient of this collider.\n     */\n    friction() {\n        return this.colliderSet.raw.coFriction(this.handle);\n    }\n    /**\n     * The restitution coefficient of this collider.\n     */\n    restitution() {\n        return this.colliderSet.raw.coRestitution(this.handle);\n    }\n    /**\n     * The density of this collider.\n     */\n    density() {\n        return this.colliderSet.raw.coDensity(this.handle);\n    }\n    /**\n     * The mass of this collider.\n     */\n    mass() {\n        return this.colliderSet.raw.coMass(this.handle);\n    }\n    /**\n     * The volume of this collider.\n     */\n    volume() {\n        return this.colliderSet.raw.coVolume(this.handle);\n    }\n    /**\n     * The collision groups of this collider.\n     */\n    collisionGroups() {\n        return this.colliderSet.raw.coCollisionGroups(this.handle);\n    }\n    /**\n     * The solver groups of this collider.\n     */\n    solverGroups() {\n        return this.colliderSet.raw.coSolverGroups(this.handle);\n    }\n    /**\n     * Tests if this collider contains a point.\n     *\n     * @param point - The point to test.\n     */\n    containsPoint(point) {\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(point);\n        let result = this.colliderSet.raw.coContainsPoint(this.handle, rawPoint);\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on this collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     */\n    projectPoint(point, solid) {\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(point);\n        let result = _point__WEBPACK_IMPORTED_MODULE_2__.PointProjection.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle, rawPoint, solid));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Tests if this collider intersects the given ray.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     */\n    intersectsRay(ray, maxToi) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coIntersectsRay(this.handle, rawOrig, rawDir, maxToi);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given shape under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current shape to cast (i.e. the cast direction).\n     * @param shape2 - The shape to cast against.\n     * @param shape2Pos - The position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param shape2Vel - The constant velocity of the second shape.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `collider1Vel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exist that penetration state.\n     */\n    castShape(collider1Vel, shape2, shape2Pos, shape2Rot, shape2Vel, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(collider1Vel);\n        let rawShape2Pos = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shape2Pos);\n        let rawShape2Rot = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shape2Rot);\n        let rawShape2Vel = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shape2Vel);\n        let rawShape2 = shape2.intoRaw();\n        let result = _toi__WEBPACK_IMPORTED_MODULE_3__.ShapeTOI.fromRaw(this.colliderSet, this.colliderSet.raw.coCastShape(this.handle, rawCollider1Vel, rawShape2, rawShape2Pos, rawShape2Rot, rawShape2Vel, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawShape2Pos.free();\n        rawShape2Rot.free();\n        rawShape2Vel.free();\n        rawShape2.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given collider under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current collider to cast (i.e. the cast direction).\n     * @param collider2 - The collider to cast against.\n     * @param collider2Vel - The constant velocity of the second collider.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exist that penetration state.\n     */\n    castCollider(collider1Vel, collider2, collider2Vel, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(collider1Vel);\n        let rawCollider2Vel = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(collider2Vel);\n        let result = _toi__WEBPACK_IMPORTED_MODULE_3__.ShapeColliderTOI.fromRaw(this.colliderSet, this.colliderSet.raw.coCastCollider(this.handle, rawCollider1Vel, collider2.handle, rawCollider2Vel, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawCollider2Vel.free();\n        return result;\n    }\n    intersectsShape(shape2, shapePos2, shapeRot2) {\n        let rawPos2 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shapePos2);\n        let rawRot2 = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shapeRot2);\n        let rawShape2 = shape2.intoRaw();\n        let result = this.colliderSet.raw.coIntersectsShape(this.handle, rawShape2, rawPos2, rawRot2);\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the shape owned by this collider and the given shape.\n     *\n     * @param shape2 - The second shape.\n     * @param shape2Pos - The initial position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shape2, shape2Pos, shape2Rot, prediction) {\n        let rawPos2 = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shape2Pos);\n        let rawRot2 = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shape2Rot);\n        let rawShape2 = shape2.intoRaw();\n        let result = _contact__WEBPACK_IMPORTED_MODULE_4__.ShapeContact.fromRaw(this.colliderSet.raw.coContactShape(this.handle, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the collider and the given collider.\n     *\n     * @param collider2 - The second collider.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactCollider(collider2, prediction) {\n        let result = _contact__WEBPACK_IMPORTED_MODULE_4__.ShapeContact.fromRaw(this.colliderSet.raw.coContactCollider(this.handle, collider2.handle, prediction));\n        return result;\n    }\n    /*\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @returns The time-of-impact between this collider and the ray, or `-1` if there is no intersection.\n     */\n    castRay(ray, maxToi, solid) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coCastRay(this.handle, rawOrig, rawDir, maxToi, solid);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     */\n    castRayAndGetNormal(ray, maxToi, solid) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let result = _ray__WEBPACK_IMPORTED_MODULE_5__.RayIntersection.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle, rawOrig, rawDir, maxToi, solid));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n}\nvar MassPropsMode;\n(function (MassPropsMode) {\n    MassPropsMode[MassPropsMode[\"Density\"] = 0] = \"Density\";\n    MassPropsMode[MassPropsMode[\"Mass\"] = 1] = \"Mass\";\n    MassPropsMode[MassPropsMode[\"MassProps\"] = 2] = \"MassProps\";\n})(MassPropsMode || (MassPropsMode = {}));\nclass ColliderDesc {\n    /**\n     * Initializes a collider descriptor from the collision shape.\n     *\n     * @param shape - The shape of the collider being built.\n     */\n    constructor(shape) {\n        this.enabled = true;\n        this.shape = shape;\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = 1.0;\n        this.friction = 0.5;\n        this.restitution = 0.0;\n        this.rotation = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.identity();\n        this.translation = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.zeros();\n        this.isSensor = false;\n        this.collisionGroups = 4294967295;\n        this.solverGroups = 4294967295;\n        this.frictionCombineRule = _dynamics__WEBPACK_IMPORTED_MODULE_6__.CoefficientCombineRule.Average;\n        this.restitutionCombineRule = _dynamics__WEBPACK_IMPORTED_MODULE_6__.CoefficientCombineRule.Average;\n        this.activeCollisionTypes = ActiveCollisionTypes.DEFAULT;\n        this.activeEvents = 0;\n        this.activeHooks = 0;\n        this.mass = 0.0;\n        this.centerOfMass = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.zeros();\n        this.contactForceEventThreshold = 0.0;\n        // #if DIM3\n        this.principalAngularInertia = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.zeros();\n        this.angularInertiaLocalFrame = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.identity();\n        // #endif\n    }\n    /**\n     * Create a new collider descriptor with a ball shape.\n     *\n     * @param radius - The radius of the ball.\n     */\n    static ball(radius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Ball(radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a capsule shape.\n     *\n     * @param halfHeight - The half-height of the capsule, along the `y` axis.\n     * @param radius - The radius of the capsule basis.\n     */\n    static capsule(halfHeight, radius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Capsule(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new segment shape.\n     *\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    static segment(a, b) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Segment(a, b);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    static triangle(a, b, c) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Triangle(a, b, c);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    static roundTriangle(a, b, c, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundTriangle(a, b, c, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `undefined` or `null`,\n     *    the vertices are assumed to describe a line strip.\n     */\n    static polyline(vertices, indices) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Polyline(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    static trimesh(vertices, indices) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.TriMesh(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    // #if DIM3\n    /**\n     * Creates a new collider descriptor with a cuboid shape.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     */\n    static cuboid(hx, hy, hz) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Cuboid(hx, hy, hz);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a rectangular shape with round borders.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     * @param borderRadius - The radius of the cuboid's borders.\n     */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundCuboid(hx, hy, hz, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The scale factor applied to the heightfield.\n     */\n    static heightfield(nrows, ncols, heights, scale) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Heightfield(nrows, ncols, heights, scale);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     */\n    static cylinder(halfHeight, radius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Cylinder(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     * @param borderRadius - The radius of the cylinder's rounded edges and vertices.\n     */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundCylinder(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     */\n    static cone(halfHeight, radius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.Cone(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     * @param borderRadius - The radius of the cone's rounded edges and vertices.\n     */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundCone(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     */\n    static convexHull(points) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.ConvexPolyhedron(points, null);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     */\n    static convexMesh(vertices, indices) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.ConvexPolyhedron(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor. A\n     * border is added to that convex polyhedron to give it round corners.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     * @param borderRadius - The radius of the round border added to the convex polyhedron.\n     */\n    static roundConvexHull(points, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundConvexPolyhedron(points, null, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a round convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     * @param borderRadius - The radius of the round border added to the convex polyline.\n     */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const shape = new _shape__WEBPACK_IMPORTED_MODULE_0__.RoundConvexPolyhedron(vertices, indices, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Sets the position of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the rotation of the collider to be created relative to the rigid-body it is attached to.\n     *\n     * @param rot - The rotation of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets whether or not the collider being created is a sensor.\n     *\n     * A sensor collider does not take part of the physics simulation, but generates\n     * proximity events.\n     *\n     * @param sensor - Set to `true` of the collider built is to be a sensor.\n     */\n    setSensor(sensor) {\n        this.isSensor = sensor;\n        return this;\n    }\n    /**\n     * Sets whether the created collider will be enabled or disabled.\n     * @param enabled − If set to `false` the collider will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the density of the collider being built.\n     *\n     * The mass and angular inertia tensor will be computed automatically based on this density and the collider’s shape.\n     *\n     * @param density - The density to set, must be greater or equal to 0. A density of 0 means that this collider\n     *                  will not affect the mass or angular inertia of the rigid-body it is attached to.\n     */\n    setDensity(density) {\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = density;\n        return this;\n    }\n    /**\n     * Sets the mass of the collider being built.\n     *\n     * The angular inertia tensor will be computed automatically based on this mass and the collider’s shape.\n     *\n     * @param mass - The mass to set, must be greater or equal to 0.\n     */\n    setMass(mass) {\n        this.massPropsMode = MassPropsMode.Mass;\n        this.mass = mass;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the mass properties of the collider being built.\n     *\n     * This replaces the mass-properties automatically computed from the collider's density and shape.\n     * These mass-properties will be added to the mass-properties of the rigid-body this collider will be attached to.\n     *\n     * @param mass − The mass of the collider to create.\n     * @param centerOfMass − The center-of-mass of the collider to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the collider to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the collider to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.massPropsMode = MassPropsMode.MassProps;\n        this.mass = mass;\n        _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.copy(this.centerOfMass, centerOfMass);\n        _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.restitution = restitution;\n        return this;\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.friction = friction;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.frictionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.restitutionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.collisionGroups = groups;\n        return this;\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.solverGroups = groups;\n        return this;\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.activeHooks = activeHooks;\n        return this;\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.activeEvents = activeEvents;\n        return this;\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.activeCollisionTypes = activeCollisionTypes;\n        return this;\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The force threshold to set.\n     */\n    setContactForceEventThreshold(threshold) {\n        this.contactForceEventThreshold = threshold;\n        return this;\n    }\n}\n//# sourceMappingURL=collider.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/collider.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/collider_set.js":
/*!******************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/collider_set.js ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ColliderSet\": () => (/* binding */ ColliderSet)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _coarena__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../coarena */ \"./node_modules/@dimforge/rapier3d/coarena.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _collider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collider */ \"./node_modules/@dimforge/rapier3d/geometry/collider.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _collider__WEBPACK_IMPORTED_MODULE_2__, _math__WEBPACK_IMPORTED_MODULE_3__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _collider__WEBPACK_IMPORTED_MODULE_2__, _math__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `colliderSet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nclass ColliderSet {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawColliderSet();\n        this.map = new _coarena__WEBPACK_IMPORTED_MODULE_1__.Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachColliderHandle((handle) => {\n                this.map.set(handle, new _collider__WEBPACK_IMPORTED_MODULE_2__.Collider(this, handle, null));\n            });\n        }\n    }\n    /**\n     * Release the WASM memory occupied by this collider set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    /** @internal */\n    castClosure(f) {\n        return (handle) => {\n            if (!!f) {\n                return f(this.get(handle));\n            }\n            else {\n                return undefined;\n            }\n        };\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((collider) => collider.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new collider and return its integer handle.\n     *\n     * @param bodies - The set of bodies where the collider's parent can be found.\n     * @param desc - The collider's description.\n     * @param parentHandle - The integer handle of the rigid-body this collider is attached to.\n     */\n    createCollider(bodies, desc, parentHandle) {\n        let hasParent = parentHandle != undefined && parentHandle != null;\n        if (hasParent && isNaN(parentHandle))\n            throw Error(\"Cannot create a collider with a parent rigid-body handle that is not a number.\");\n        let rawShape = desc.shape.intoRaw();\n        let rawTra = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.translation);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_3__.RotationOps.intoRaw(desc.rotation);\n        let rawCom = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawPrincipalInertia = _math__WEBPACK_IMPORTED_MODULE_3__.VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = _math__WEBPACK_IMPORTED_MODULE_3__.RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createCollider(desc.enabled, rawShape, rawTra, rawRot, desc.massPropsMode, desc.mass, rawCom, \n        // #if DIM3\n        rawPrincipalInertia, rawInertiaFrame, \n        // #endif\n        desc.density, desc.friction, desc.restitution, desc.frictionCombineRule, desc.restitutionCombineRule, desc.isSensor, desc.collisionGroups, desc.solverGroups, desc.activeCollisionTypes, desc.activeHooks, desc.activeEvents, desc.contactForceEventThreshold, hasParent, hasParent ? parentHandle : 0, bodies.raw);\n        rawShape.free();\n        rawTra.free();\n        rawRot.free();\n        rawCom.free();\n        // #if DIM3\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        let parent = hasParent ? bodies.get(parentHandle) : null;\n        let collider = new _collider__WEBPACK_IMPORTED_MODULE_2__.Collider(this, handle, parent, desc.shape);\n        this.map.set(handle, collider);\n        return collider;\n    }\n    /**\n     * Remove a collider from this set.\n     *\n     * @param handle - The integer handle of the collider to remove.\n     * @param bodies - The set of rigid-body containing the rigid-body the collider is attached to.\n     * @param wakeUp - If `true`, the rigid-body the removed collider is attached to will be woken-up automatically.\n     */\n    remove(handle, islands, bodies, wakeUp) {\n        this.raw.remove(handle, islands.raw, bodies.raw, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * The number of colliders on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a collider with the given handle?\n     *\n     * @param handle - The collider handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Applies the given closure to each collider contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all colliders in the list.\n     *\n     * @returns collider list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=collider_set.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/collider_set.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/contact.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/contact.js ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShapeContact\": () => (/* binding */ ShapeContact)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__]);\n_math__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The contact info between two shapes.\n */\nclass ShapeContact {\n    constructor(dist, point1, point2, normal1, normal2) {\n        this.distance = dist;\n        this.point1 = point1;\n        this.point2 = point2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeContact(raw.distance(), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.point1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.point2()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=contact.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L2NvbnRhY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxvREFBaUIsZ0JBQWdCLG9EQUFpQixnQkFBZ0Isb0RBQWlCLGlCQUFpQixvREFBaUI7QUFDN0s7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvZ2VvbWV0cnkvY29udGFjdC5qcz81YTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3Rvck9wcyB9IGZyb20gXCIuLi9tYXRoXCI7XG4vKipcbiAqIFRoZSBjb250YWN0IGluZm8gYmV0d2VlbiB0d28gc2hhcGVzLlxuICovXG5leHBvcnQgY2xhc3MgU2hhcGVDb250YWN0IHtcbiAgICBjb25zdHJ1Y3RvcihkaXN0LCBwb2ludDEsIHBvaW50Miwgbm9ybWFsMSwgbm9ybWFsMikge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGlzdDtcbiAgICAgICAgdGhpcy5wb2ludDEgPSBwb2ludDE7XG4gICAgICAgIHRoaXMucG9pbnQyID0gcG9pbnQyO1xuICAgICAgICB0aGlzLm5vcm1hbDEgPSBub3JtYWwxO1xuICAgICAgICB0aGlzLm5vcm1hbDIgPSBub3JtYWwyO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJhdyhyYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNoYXBlQ29udGFjdChyYXcuZGlzdGFuY2UoKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3LnBvaW50MSgpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3LnBvaW50MigpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3Lm5vcm1hbDEoKSksIFZlY3Rvck9wcy5mcm9tUmF3KHJhdy5ub3JtYWwyKCkpKTtcbiAgICAgICAgcmF3LmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250YWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/contact.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/feature.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/feature.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FeatureType\": () => (/* binding */ FeatureType)\n/* harmony export */ });\n// #if DIM3\nvar FeatureType;\n(function (FeatureType) {\n    FeatureType[FeatureType[\"Vertex\"] = 0] = \"Vertex\";\n    FeatureType[FeatureType[\"Edge\"] = 1] = \"Edge\";\n    FeatureType[FeatureType[\"Face\"] = 2] = \"Face\";\n    FeatureType[FeatureType[\"Unknown\"] = 3] = \"Unknown\";\n})(FeatureType || (FeatureType = {}));\n// #endif\n//# sourceMappingURL=feature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L2ZlYXR1cmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvZ2VvbWV0cnkvZmVhdHVyZS5qcz9hYjZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICNpZiBESU0zXG5leHBvcnQgdmFyIEZlYXR1cmVUeXBlO1xuKGZ1bmN0aW9uIChGZWF0dXJlVHlwZSkge1xuICAgIEZlYXR1cmVUeXBlW0ZlYXR1cmVUeXBlW1wiVmVydGV4XCJdID0gMF0gPSBcIlZlcnRleFwiO1xuICAgIEZlYXR1cmVUeXBlW0ZlYXR1cmVUeXBlW1wiRWRnZVwiXSA9IDFdID0gXCJFZGdlXCI7XG4gICAgRmVhdHVyZVR5cGVbRmVhdHVyZVR5cGVbXCJGYWNlXCJdID0gMl0gPSBcIkZhY2VcIjtcbiAgICBGZWF0dXJlVHlwZVtGZWF0dXJlVHlwZVtcIlVua25vd25cIl0gPSAzXSA9IFwiVW5rbm93blwiO1xufSkoRmVhdHVyZVR5cGUgfHwgKEZlYXR1cmVUeXBlID0ge30pKTtcbi8vICNlbmRpZlxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVhdHVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/feature.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/index.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveCollisionTypes\": () => (/* reexport safe */ _collider__WEBPACK_IMPORTED_MODULE_3__.ActiveCollisionTypes),\n/* harmony export */   \"Ball\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Ball),\n/* harmony export */   \"BroadPhase\": () => (/* reexport safe */ _broad_phase__WEBPACK_IMPORTED_MODULE_0__.BroadPhase),\n/* harmony export */   \"Capsule\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Capsule),\n/* harmony export */   \"Collider\": () => (/* reexport safe */ _collider__WEBPACK_IMPORTED_MODULE_3__.Collider),\n/* harmony export */   \"ColliderDesc\": () => (/* reexport safe */ _collider__WEBPACK_IMPORTED_MODULE_3__.ColliderDesc),\n/* harmony export */   \"ColliderSet\": () => (/* reexport safe */ _collider_set__WEBPACK_IMPORTED_MODULE_4__.ColliderSet),\n/* harmony export */   \"Cone\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Cone),\n/* harmony export */   \"ConvexPolyhedron\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.ConvexPolyhedron),\n/* harmony export */   \"Cuboid\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Cuboid),\n/* harmony export */   \"Cylinder\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Cylinder),\n/* harmony export */   \"FeatureType\": () => (/* reexport safe */ _feature__WEBPACK_IMPORTED_MODULE_5__.FeatureType),\n/* harmony export */   \"HalfSpace\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.HalfSpace),\n/* harmony export */   \"Heightfield\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Heightfield),\n/* harmony export */   \"MassPropsMode\": () => (/* reexport safe */ _collider__WEBPACK_IMPORTED_MODULE_3__.MassPropsMode),\n/* harmony export */   \"NarrowPhase\": () => (/* reexport safe */ _narrow_phase__WEBPACK_IMPORTED_MODULE_1__.NarrowPhase),\n/* harmony export */   \"PointColliderProjection\": () => (/* reexport safe */ _point__WEBPACK_IMPORTED_MODULE_7__.PointColliderProjection),\n/* harmony export */   \"PointProjection\": () => (/* reexport safe */ _point__WEBPACK_IMPORTED_MODULE_7__.PointProjection),\n/* harmony export */   \"Polyline\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Polyline),\n/* harmony export */   \"Ray\": () => (/* reexport safe */ _ray__WEBPACK_IMPORTED_MODULE_6__.Ray),\n/* harmony export */   \"RayColliderIntersection\": () => (/* reexport safe */ _ray__WEBPACK_IMPORTED_MODULE_6__.RayColliderIntersection),\n/* harmony export */   \"RayColliderToi\": () => (/* reexport safe */ _ray__WEBPACK_IMPORTED_MODULE_6__.RayColliderToi),\n/* harmony export */   \"RayIntersection\": () => (/* reexport safe */ _ray__WEBPACK_IMPORTED_MODULE_6__.RayIntersection),\n/* harmony export */   \"RoundCone\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.RoundCone),\n/* harmony export */   \"RoundConvexPolyhedron\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.RoundConvexPolyhedron),\n/* harmony export */   \"RoundCuboid\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.RoundCuboid),\n/* harmony export */   \"RoundCylinder\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.RoundCylinder),\n/* harmony export */   \"RoundTriangle\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.RoundTriangle),\n/* harmony export */   \"Segment\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Segment),\n/* harmony export */   \"Shape\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Shape),\n/* harmony export */   \"ShapeColliderTOI\": () => (/* reexport safe */ _toi__WEBPACK_IMPORTED_MODULE_8__.ShapeColliderTOI),\n/* harmony export */   \"ShapeContact\": () => (/* reexport safe */ _contact__WEBPACK_IMPORTED_MODULE_9__.ShapeContact),\n/* harmony export */   \"ShapeTOI\": () => (/* reexport safe */ _toi__WEBPACK_IMPORTED_MODULE_8__.ShapeTOI),\n/* harmony export */   \"ShapeType\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.ShapeType),\n/* harmony export */   \"TempContactManifold\": () => (/* reexport safe */ _narrow_phase__WEBPACK_IMPORTED_MODULE_1__.TempContactManifold),\n/* harmony export */   \"TriMesh\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.TriMesh),\n/* harmony export */   \"Triangle\": () => (/* reexport safe */ _shape__WEBPACK_IMPORTED_MODULE_2__.Triangle)\n/* harmony export */ });\n/* harmony import */ var _broad_phase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./broad_phase */ \"./node_modules/@dimforge/rapier3d/geometry/broad_phase.js\");\n/* harmony import */ var _narrow_phase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./narrow_phase */ \"./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js\");\n/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shape */ \"./node_modules/@dimforge/rapier3d/geometry/shape.js\");\n/* harmony import */ var _collider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collider */ \"./node_modules/@dimforge/rapier3d/geometry/collider.js\");\n/* harmony import */ var _collider_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./collider_set */ \"./node_modules/@dimforge/rapier3d/geometry/collider_set.js\");\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./feature */ \"./node_modules/@dimforge/rapier3d/geometry/feature.js\");\n/* harmony import */ var _ray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ray */ \"./node_modules/@dimforge/rapier3d/geometry/ray.js\");\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./point */ \"./node_modules/@dimforge/rapier3d/geometry/point.js\");\n/* harmony import */ var _toi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./toi */ \"./node_modules/@dimforge/rapier3d/geometry/toi.js\");\n/* harmony import */ var _contact__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contact */ \"./node_modules/@dimforge/rapier3d/geometry/contact.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_broad_phase__WEBPACK_IMPORTED_MODULE_0__, _narrow_phase__WEBPACK_IMPORTED_MODULE_1__, _shape__WEBPACK_IMPORTED_MODULE_2__, _collider__WEBPACK_IMPORTED_MODULE_3__, _collider_set__WEBPACK_IMPORTED_MODULE_4__, _ray__WEBPACK_IMPORTED_MODULE_6__, _point__WEBPACK_IMPORTED_MODULE_7__, _toi__WEBPACK_IMPORTED_MODULE_8__, _contact__WEBPACK_IMPORTED_MODULE_9__]);\n([_broad_phase__WEBPACK_IMPORTED_MODULE_0__, _narrow_phase__WEBPACK_IMPORTED_MODULE_1__, _shape__WEBPACK_IMPORTED_MODULE_2__, _collider__WEBPACK_IMPORTED_MODULE_3__, _collider_set__WEBPACK_IMPORTED_MODULE_4__, _ray__WEBPACK_IMPORTED_MODULE_6__, _point__WEBPACK_IMPORTED_MODULE_7__, _toi__WEBPACK_IMPORTED_MODULE_8__, _contact__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ0M7QUFDUDtBQUNHO0FBQ0k7QUFDTDtBQUNKO0FBQ0U7QUFDRjtBQUNlO0FBQ1g7QUFDMUIsaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L2luZGV4LmpzP2E5OGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYnJvYWRfcGhhc2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25hcnJvd19waGFzZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2hhcGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbGxpZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb2xsaWRlcl9zZXRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ZlYXR1cmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JheVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcG9pbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvaVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW50ZXJhY3Rpb25fZ3JvdXBzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb250YWN0XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/index.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js":
/*!******************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NarrowPhase\": () => (/* binding */ NarrowPhase),\n/* harmony export */   \"TempContactManifold\": () => (/* binding */ TempContactManifold)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * The narrow-phase used for precise collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `narrowPhase.free()`\n * once you are done using it.\n */\nclass NarrowPhase {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawNarrowPhase();\n        this.tempManifold = new TempContactManifold(null);\n    }\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactsWith(collider1, f) {\n        this.raw.contacts_with(collider1, f);\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionsWith(collider1, f) {\n        this.raw.intersections_with(collider1, f);\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        const rawPair = this.raw.contact_pair(collider1, collider2);\n        if (!!rawPair) {\n            const flipped = rawPair.collider1() != collider1;\n            let i;\n            for (i = 0; i < rawPair.numContactManifolds(); ++i) {\n                this.tempManifold.raw = rawPair.contactManifold(i);\n                if (!!this.tempManifold.raw) {\n                    f(this.tempManifold, flipped);\n                }\n                // SAFETY: The RawContactManifold stores a raw pointer that will be invalidated\n                //         at the next timestep. So we must be sure to free the pair here\n                //         to avoid unsoundness in the Rust code.\n                this.tempManifold.free();\n            }\n            rawPair.free();\n        }\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.raw.intersection_pair(collider1, collider2);\n    }\n}\nclass TempContactManifold {\n    constructor(raw) {\n        this.raw = raw;\n    }\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    normal() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.normal());\n    }\n    localNormal1() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.local_n1());\n    }\n    localNormal2() {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.local_n2());\n    }\n    subshape1() {\n        return this.raw.subshape1();\n    }\n    subshape2() {\n        return this.raw.subshape2();\n    }\n    numContacts() {\n        return this.raw.num_contacts();\n    }\n    localContactPoint1(i) {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.contact_local_p1(i));\n    }\n    localContactPoint2(i) {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.contact_local_p2(i));\n    }\n    contactDist(i) {\n        return this.raw.contact_dist(i);\n    }\n    contactFid1(i) {\n        return this.raw.contact_fid1(i);\n    }\n    contactFid2(i) {\n        return this.raw.contact_fid2(i);\n    }\n    contactImpulse(i) {\n        return this.raw.contact_impulse(i);\n    }\n    // #if DIM3\n    contactTangentImpulseX(i) {\n        return this.raw.contact_tangent_impulse_x(i);\n    }\n    contactTangentImpulseY(i) {\n        return this.raw.contact_tangent_impulse_y(i);\n    }\n    // #endif\n    numSolverContacts() {\n        return this.raw.num_solver_contacts();\n    }\n    solverContactPoint(i) {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.solver_contact_point(i));\n    }\n    solverContactDist(i) {\n        return this.raw.solver_contact_dist(i);\n    }\n    solverContactFriction(i) {\n        return this.raw.solver_contact_friction(i);\n    }\n    solverContactRestitution(i) {\n        return this.raw.solver_contact_restitution(i);\n    }\n    solverContactTangentVelocity(i) {\n        return _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(this.raw.solver_contact_tangent_velocity(i));\n    }\n}\n//# sourceMappingURL=narrow_phase.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/point.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/point.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PointColliderProjection\": () => (/* binding */ PointColliderProjection),\n/* harmony export */   \"PointProjection\": () => (/* binding */ PointProjection)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feature */ \"./node_modules/@dimforge/rapier3d/geometry/feature.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__]);\n_math__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * The projection of a point on a collider.\n */\nclass PointProjection {\n    constructor(point, isInside) {\n        this.point = point;\n        this.isInside = isInside;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new PointProjection(_math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.point()), raw.isInside());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The projection of a point on a collider (includes the collider handle).\n */\nclass PointColliderProjection {\n    constructor(collider, point, isInside, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = _feature__WEBPACK_IMPORTED_MODULE_1__.FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.point = point;\n        this.isInside = isInside;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new PointColliderProjection(colliderSet.get(raw.colliderHandle()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.point()), raw.isInside(), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=point.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L3BvaW50LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBb0M7QUFDSTtBQUN4QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLG9EQUFpQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIseURBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRixvREFBaUI7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvZ2VvbWV0cnkvcG9pbnQuanM/YWFlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHsgRmVhdHVyZVR5cGUgfSBmcm9tIFwiLi9mZWF0dXJlXCI7XG4vKipcbiAqIFRoZSBwcm9qZWN0aW9uIG9mIGEgcG9pbnQgb24gYSBjb2xsaWRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvaW50UHJvamVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IocG9pbnQsIGlzSW5zaWRlKSB7XG4gICAgICAgIHRoaXMucG9pbnQgPSBwb2ludDtcbiAgICAgICAgdGhpcy5pc0luc2lkZSA9IGlzSW5zaWRlO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJhdyhyYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFBvaW50UHJvamVjdGlvbihWZWN0b3JPcHMuZnJvbVJhdyhyYXcucG9pbnQoKSksIHJhdy5pc0luc2lkZSgpKTtcbiAgICAgICAgcmF3LmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBwcm9qZWN0aW9uIG9mIGEgcG9pbnQgb24gYSBjb2xsaWRlciAoaW5jbHVkZXMgdGhlIGNvbGxpZGVyIGhhbmRsZSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb2ludENvbGxpZGVyUHJvamVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGlkZXIsIHBvaW50LCBpc0luc2lkZSwgZmVhdHVyZVR5cGUsIGZlYXR1cmVJZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIGdlb21ldHJpYyBmZWF0dXJlIHRoZSBwb2ludCB3YXMgcHJvamVjdGVkIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlVHlwZSA9IEZlYXR1cmVUeXBlLlVua25vd247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaWQgb2YgdGhlIGdlb21ldHJpYyBmZWF0dXJlIHRoZSBwb2ludCB3YXMgcHJvamVjdGVkIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29sbGlkZXIgPSBjb2xsaWRlcjtcbiAgICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgICAgICB0aGlzLmlzSW5zaWRlID0gaXNJbnNpZGU7XG4gICAgICAgIGlmIChmZWF0dXJlSWQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZUlkID0gZmVhdHVyZUlkO1xuICAgICAgICBpZiAoZmVhdHVyZVR5cGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZVR5cGUgPSBmZWF0dXJlVHlwZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21SYXcoY29sbGlkZXJTZXQsIHJhdykge1xuICAgICAgICBpZiAoIXJhdylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUG9pbnRDb2xsaWRlclByb2plY3Rpb24oY29sbGlkZXJTZXQuZ2V0KHJhdy5jb2xsaWRlckhhbmRsZSgpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3LnBvaW50KCkpLCByYXcuaXNJbnNpZGUoKSwgcmF3LmZlYXR1cmVUeXBlKCksIHJhdy5mZWF0dXJlSWQoKSk7XG4gICAgICAgIHJhdy5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9pbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/point.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/ray.js":
/*!*********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/ray.js ***!
  \*********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ray\": () => (/* binding */ Ray),\n/* harmony export */   \"RayColliderIntersection\": () => (/* binding */ RayColliderIntersection),\n/* harmony export */   \"RayColliderToi\": () => (/* binding */ RayColliderToi),\n/* harmony export */   \"RayIntersection\": () => (/* binding */ RayIntersection)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _feature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./feature */ \"./node_modules/@dimforge/rapier3d/geometry/feature.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_1__]);\n_math__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * A ray. This is a directed half-line.\n */\nclass Ray {\n    /**\n     * Builds a ray from its origin and direction.\n     *\n     * @param origin - The ray's starting point.\n     * @param dir - The ray's direction of propagation.\n     */\n    constructor(origin, dir) {\n        this.origin = origin;\n        this.dir = dir;\n    }\n    pointAt(t) {\n        return {\n            x: this.origin.x + this.dir.x * t,\n            y: this.origin.y + this.dir.y * t,\n            // #if DIM3\n            z: this.origin.z + this.dir.z * t,\n            // #endif\n        };\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nclass RayIntersection {\n    constructor(toi, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = _feature__WEBPACK_IMPORTED_MODULE_0__.FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.toi = toi;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new RayIntersection(raw.toi(), _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider (includes the collider handle).\n */\nclass RayColliderIntersection {\n    constructor(collider, toi, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = _feature__WEBPACK_IMPORTED_MODULE_0__.FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.toi = toi;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderIntersection(colliderSet.get(raw.colliderHandle()), raw.toi(), _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The time of impact between a ray and a collider.\n */\nclass RayColliderToi {\n    constructor(collider, toi) {\n        this.collider = collider;\n        this.toi = toi;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderToi(colliderSet.get(raw.colliderHandle()), raw.toi());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=ray.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L3JheS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0M7QUFDSTtBQUN4QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHlEQUFtQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG9EQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIseURBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFHQUFxRyxvREFBaUI7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9nZW9tZXRyeS9yYXkuanM/YjAzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHsgRmVhdHVyZVR5cGUgfSBmcm9tIFwiLi9mZWF0dXJlXCI7XG4vKipcbiAqIEEgcmF5LiBUaGlzIGlzIGEgZGlyZWN0ZWQgaGFsZi1saW5lLlxuICovXG5leHBvcnQgY2xhc3MgUmF5IHtcbiAgICAvKipcbiAgICAgKiBCdWlsZHMgYSByYXkgZnJvbSBpdHMgb3JpZ2luIGFuZCBkaXJlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3JpZ2luIC0gVGhlIHJheSdzIHN0YXJ0aW5nIHBvaW50LlxuICAgICAqIEBwYXJhbSBkaXIgLSBUaGUgcmF5J3MgZGlyZWN0aW9uIG9mIHByb3BhZ2F0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbiwgZGlyKSB7XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgICAgICB0aGlzLmRpciA9IGRpcjtcbiAgICB9XG4gICAgcG9pbnRBdCh0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLm9yaWdpbi54ICsgdGhpcy5kaXIueCAqIHQsXG4gICAgICAgICAgICB5OiB0aGlzLm9yaWdpbi55ICsgdGhpcy5kaXIueSAqIHQsXG4gICAgICAgICAgICAvLyAjaWYgRElNM1xuICAgICAgICAgICAgejogdGhpcy5vcmlnaW4ueiArIHRoaXMuZGlyLnogKiB0LFxuICAgICAgICAgICAgLy8gI2VuZGlmXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gYSByYXkgYW5kIGEgY29sbGlkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBSYXlJbnRlcnNlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRvaSwgbm9ybWFsLCBmZWF0dXJlVHlwZSwgZmVhdHVyZUlkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgZ2VvbWV0cmljIGZlYXR1cmUgdGhlIHBvaW50IHdhcyBwcm9qZWN0ZWQgb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZlYXR1cmVUeXBlID0gRmVhdHVyZVR5cGUuVW5rbm93bjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpZCBvZiB0aGUgZ2VvbWV0cmljIGZlYXR1cmUgdGhlIHBvaW50IHdhcyBwcm9qZWN0ZWQgb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZlYXR1cmVJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b2kgPSB0b2k7XG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgICAgICBpZiAoZmVhdHVyZUlkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVJZCA9IGZlYXR1cmVJZDtcbiAgICAgICAgaWYgKGZlYXR1cmVUeXBlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVUeXBlID0gZmVhdHVyZVR5cGU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KHJhdykge1xuICAgICAgICBpZiAoIXJhdylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmF5SW50ZXJzZWN0aW9uKHJhdy50b2koKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3Lm5vcm1hbCgpKSwgcmF3LmZlYXR1cmVUeXBlKCksIHJhdy5mZWF0dXJlSWQoKSk7XG4gICAgICAgIHJhdy5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gYSByYXkgYW5kIGEgY29sbGlkZXIgKGluY2x1ZGVzIHRoZSBjb2xsaWRlciBoYW5kbGUpLlxuICovXG5leHBvcnQgY2xhc3MgUmF5Q29sbGlkZXJJbnRlcnNlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxpZGVyLCB0b2ksIG5vcm1hbCwgZmVhdHVyZVR5cGUsIGZlYXR1cmVJZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIGdlb21ldHJpYyBmZWF0dXJlIHRoZSBwb2ludCB3YXMgcHJvamVjdGVkIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlVHlwZSA9IEZlYXR1cmVUeXBlLlVua25vd247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaWQgb2YgdGhlIGdlb21ldHJpYyBmZWF0dXJlIHRoZSBwb2ludCB3YXMgcHJvamVjdGVkIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29sbGlkZXIgPSBjb2xsaWRlcjtcbiAgICAgICAgdGhpcy50b2kgPSB0b2k7XG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgICAgICBpZiAoZmVhdHVyZUlkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVJZCA9IGZlYXR1cmVJZDtcbiAgICAgICAgaWYgKGZlYXR1cmVUeXBlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVUeXBlID0gZmVhdHVyZVR5cGU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KGNvbGxpZGVyU2V0LCByYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFJheUNvbGxpZGVySW50ZXJzZWN0aW9uKGNvbGxpZGVyU2V0LmdldChyYXcuY29sbGlkZXJIYW5kbGUoKSksIHJhdy50b2koKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3Lm5vcm1hbCgpKSwgcmF3LmZlYXR1cmVUeXBlKCksIHJhdy5mZWF0dXJlSWQoKSk7XG4gICAgICAgIHJhdy5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgdGltZSBvZiBpbXBhY3QgYmV0d2VlbiBhIHJheSBhbmQgYSBjb2xsaWRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFJheUNvbGxpZGVyVG9pIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsaWRlciwgdG9pKSB7XG4gICAgICAgIHRoaXMuY29sbGlkZXIgPSBjb2xsaWRlcjtcbiAgICAgICAgdGhpcy50b2kgPSB0b2k7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KGNvbGxpZGVyU2V0LCByYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFJheUNvbGxpZGVyVG9pKGNvbGxpZGVyU2V0LmdldChyYXcuY29sbGlkZXJIYW5kbGUoKSksIHJhdy50b2koKSk7XG4gICAgICAgIHJhdy5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/ray.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/shape.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/shape.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ball\": () => (/* binding */ Ball),\n/* harmony export */   \"Capsule\": () => (/* binding */ Capsule),\n/* harmony export */   \"Cone\": () => (/* binding */ Cone),\n/* harmony export */   \"ConvexPolyhedron\": () => (/* binding */ ConvexPolyhedron),\n/* harmony export */   \"Cuboid\": () => (/* binding */ Cuboid),\n/* harmony export */   \"Cylinder\": () => (/* binding */ Cylinder),\n/* harmony export */   \"HalfSpace\": () => (/* binding */ HalfSpace),\n/* harmony export */   \"Heightfield\": () => (/* binding */ Heightfield),\n/* harmony export */   \"Polyline\": () => (/* binding */ Polyline),\n/* harmony export */   \"RoundCone\": () => (/* binding */ RoundCone),\n/* harmony export */   \"RoundConvexPolyhedron\": () => (/* binding */ RoundConvexPolyhedron),\n/* harmony export */   \"RoundCuboid\": () => (/* binding */ RoundCuboid),\n/* harmony export */   \"RoundCylinder\": () => (/* binding */ RoundCylinder),\n/* harmony export */   \"RoundTriangle\": () => (/* binding */ RoundTriangle),\n/* harmony export */   \"Segment\": () => (/* binding */ Segment),\n/* harmony export */   \"Shape\": () => (/* binding */ Shape),\n/* harmony export */   \"ShapeType\": () => (/* binding */ ShapeType),\n/* harmony export */   \"TriMesh\": () => (/* binding */ TriMesh),\n/* harmony export */   \"Triangle\": () => (/* binding */ Triangle)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _contact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contact */ \"./node_modules/@dimforge/rapier3d/geometry/contact.js\");\n/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point */ \"./node_modules/@dimforge/rapier3d/geometry/point.js\");\n/* harmony import */ var _ray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ray */ \"./node_modules/@dimforge/rapier3d/geometry/ray.js\");\n/* harmony import */ var _toi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toi */ \"./node_modules/@dimforge/rapier3d/geometry/toi.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__, _toi__WEBPACK_IMPORTED_MODULE_1__, _contact__WEBPACK_IMPORTED_MODULE_2__, _point__WEBPACK_IMPORTED_MODULE_3__, _ray__WEBPACK_IMPORTED_MODULE_4__, _raw__WEBPACK_IMPORTED_MODULE_5__]);\n([_math__WEBPACK_IMPORTED_MODULE_0__, _toi__WEBPACK_IMPORTED_MODULE_1__, _contact__WEBPACK_IMPORTED_MODULE_2__, _point__WEBPACK_IMPORTED_MODULE_3__, _ray__WEBPACK_IMPORTED_MODULE_4__, _raw__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\nclass Shape {\n    /**\n     * instant mode without cache\n     */\n    static fromRaw(rawSet, handle) {\n        const rawType = rawSet.coShapeType(handle);\n        let extents;\n        let borderRadius;\n        let vs;\n        let indices;\n        let halfHeight;\n        let radius;\n        let normal;\n        switch (rawType) {\n            case ShapeType.Ball:\n                return new Ball(rawSet.coRadius(handle));\n            case ShapeType.Cuboid:\n                extents = rawSet.coHalfExtents(handle);\n                // #if DIM3\n                return new Cuboid(extents.x, extents.y, extents.z);\n            // #endif\n            case ShapeType.RoundCuboid:\n                extents = rawSet.coHalfExtents(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundCuboid(extents.x, extents.y, extents.z, borderRadius);\n            // #endif\n            case ShapeType.Capsule:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Capsule(halfHeight, radius);\n            case ShapeType.Segment:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Segment(_math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[0], vs[1], vs[2]), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[3], vs[4], vs[5]));\n            // #endif\n            case ShapeType.Polyline:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new Polyline(vs, indices);\n            case ShapeType.Triangle:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Triangle(_math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[0], vs[1], vs[2]), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[3], vs[4], vs[5]), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[6], vs[7], vs[8]));\n            // #endif\n            case ShapeType.RoundTriangle:\n                vs = rawSet.coVertices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundTriangle(_math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[0], vs[1], vs[2]), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[3], vs[4], vs[5]), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](vs[6], vs[7], vs[8]), borderRadius);\n            // #endif\n            case ShapeType.HalfSpace:\n                normal = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(rawSet.coHalfspaceNormal(handle));\n                return new HalfSpace(normal);\n            case ShapeType.TriMesh:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new TriMesh(vs, indices);\n            case ShapeType.HeightField:\n                const scale = rawSet.coHeightfieldScale(handle);\n                const heights = rawSet.coHeightfieldHeights(handle);\n                // #if DIM3\n                const nrows = rawSet.coHeightfieldNRows(handle);\n                const ncols = rawSet.coHeightfieldNCols(handle);\n                return new Heightfield(nrows, ncols, heights, scale);\n            // #endif\n            // #if DIM3\n            case ShapeType.ConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new ConvexPolyhedron(vs, indices);\n            case ShapeType.RoundConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundConvexPolyhedron(vs, indices, borderRadius);\n            case ShapeType.Cylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cylinder(halfHeight, radius);\n            case ShapeType.RoundCylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCylinder(halfHeight, radius, borderRadius);\n            case ShapeType.Cone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cone(halfHeight, radius);\n            case ShapeType.RoundCone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCone(halfHeight, radius, borderRadius);\n            // #endif\n            default:\n                throw new Error(\"unknown shape type: \" + rawType);\n        }\n    }\n    /**\n     * Computes the time of impact between two moving shapes.\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shapeVel1 - The velocity of this shape.\n     * @param shape2 - The second moving shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param shapeVel2 - The velocity of the second shape.\n     * @param maxToi - The maximum time when the impact can happen.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exist that penetration state.\n     * @returns If the two moving shapes collider at some point along their trajectories, this returns the\n     *  time at which the two shape collider as well as the contact information during the impact. Returns\n     *  `null`if the two shapes never collide along their paths.\n     */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, maxToi, stopAtPenetration) {\n        let rawPos1 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos1);\n        let rawRot1 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot1);\n        let rawVel1 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapeVel1);\n        let rawPos2 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos2);\n        let rawRot2 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot2);\n        let rawVel2 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapeVel2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = _toi__WEBPACK_IMPORTED_MODULE_1__.ShapeTOI.fromRaw(null, rawShape1.castShape(rawPos1, rawRot1, rawVel1, rawShape2, rawPos2, rawRot2, rawVel2, maxToi, stopAtPenetration));\n        rawPos1.free();\n        rawRot1.free();\n        rawVel1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawVel2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Tests if this shape intersects another shape.\n     *\n     * @param shapePos1 - The position of this shape.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2  - The second shape to test.\n     * @param shapePos2 - The position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @returns `true` if the two shapes intersect, `false` if they don’t.\n     */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        let rawPos1 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos1);\n        let rawRot1 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos2);\n        let rawRot2 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = rawShape1.intersectsShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2);\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between two shapes.\n     *\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2 - The second shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        let rawPos1 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos1);\n        let rawRot1 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos2);\n        let rawRot2 = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = _contact__WEBPACK_IMPORTED_MODULE_2__.ShapeContact.fromRaw(rawShape1.contactShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    containsPoint(shapePos, shapeRot, point) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot);\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = rawShape.containsPoint(rawPos, rawRot, rawPoint);\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    projectPoint(shapePos, shapeRot, point, solid) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot);\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = _point__WEBPACK_IMPORTED_MODULE_3__.PointProjection.fromRaw(rawShape.projectPoint(rawPos, rawRot, rawPoint, solid));\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    intersectsRay(ray, shapePos, shapeRot, maxToi) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.origin);\n        let rawRayDir = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.intersectsRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRay(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.origin);\n        let rawRayDir = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.castRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRayAndGetNormal(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_0__.RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.origin);\n        let rawRayDir = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = _ray__WEBPACK_IMPORTED_MODULE_4__.RayIntersection.fromRaw(rawShape.castRayAndGetNormal(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid));\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n}\n// #if DIM3\n/**\n * An enumeration representing the type of a shape.\n */\nvar ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType[\"Ball\"] = 0] = \"Ball\";\n    ShapeType[ShapeType[\"Cuboid\"] = 1] = \"Cuboid\";\n    ShapeType[ShapeType[\"Capsule\"] = 2] = \"Capsule\";\n    ShapeType[ShapeType[\"Segment\"] = 3] = \"Segment\";\n    ShapeType[ShapeType[\"Polyline\"] = 4] = \"Polyline\";\n    ShapeType[ShapeType[\"Triangle\"] = 5] = \"Triangle\";\n    ShapeType[ShapeType[\"TriMesh\"] = 6] = \"TriMesh\";\n    ShapeType[ShapeType[\"HeightField\"] = 7] = \"HeightField\";\n    // Compound = 8,\n    ShapeType[ShapeType[\"ConvexPolyhedron\"] = 9] = \"ConvexPolyhedron\";\n    ShapeType[ShapeType[\"Cylinder\"] = 10] = \"Cylinder\";\n    ShapeType[ShapeType[\"Cone\"] = 11] = \"Cone\";\n    ShapeType[ShapeType[\"RoundCuboid\"] = 12] = \"RoundCuboid\";\n    ShapeType[ShapeType[\"RoundTriangle\"] = 13] = \"RoundTriangle\";\n    ShapeType[ShapeType[\"RoundCylinder\"] = 14] = \"RoundCylinder\";\n    ShapeType[ShapeType[\"RoundCone\"] = 15] = \"RoundCone\";\n    ShapeType[ShapeType[\"RoundConvexPolyhedron\"] = 16] = \"RoundConvexPolyhedron\";\n    ShapeType[ShapeType[\"HalfSpace\"] = 17] = \"HalfSpace\";\n})(ShapeType || (ShapeType = {}));\n// #endif\n/**\n * A shape that is a sphere in 3D and a circle in 2D.\n */\nclass Ball extends Shape {\n    /**\n     * Creates a new ball with the given radius.\n     * @param radius - The balls radius.\n     */\n    constructor(radius) {\n        super();\n        this.type = ShapeType.Ball;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.ball(this.radius);\n    }\n}\nclass HalfSpace extends Shape {\n    /**\n     * Creates a new halfspace delimited by an infinite plane.\n     *\n     * @param normal - The outward normal of the plane.\n     */\n    constructor(normal) {\n        super();\n        this.type = ShapeType.HalfSpace;\n        this.normal = normal;\n    }\n    intoRaw() {\n        let n = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.normal);\n        let result = _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.halfspace(n);\n        n.free();\n        return result;\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D.\n */\nclass Cuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     */\n    constructor(hx, hy, hz) {\n        super();\n        this.type = ShapeType.Cuboid;\n        this.halfExtents = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](hx, hy, hz);\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.cuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z);\n        // #endif\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D, with round corners.\n */\nclass RoundCuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     * @param borderRadius - The radius of the borders of this cuboid. This will\n     *   effectively increase the half-extents of the cuboid by this radius.\n     */\n    constructor(hx, hy, hz, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCuboid;\n        this.halfExtents = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps[\"new\"](hx, hy, hz);\n        this.borderRadius = borderRadius;\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundCuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z, this.borderRadius);\n        // #endif\n    }\n}\n/**\n * A shape that is a capsule.\n */\nclass Capsule extends Shape {\n    /**\n     * Creates a new capsule with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Capsule;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.capsule(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a segment.\n */\nclass Segment extends Shape {\n    /**\n     * Creates a new segment shape.\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    constructor(a, b) {\n        super();\n        this.type = ShapeType.Segment;\n        this.a = a;\n        this.b = b;\n    }\n    intoRaw() {\n        let ra = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.a);\n        let rb = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.b);\n        let result = _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.segment(ra, rb);\n        ra.free();\n        rb.free();\n        return result;\n    }\n}\n/**\n * A shape that is a segment.\n */\nclass Triangle extends Shape {\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    constructor(a, b, c) {\n        super();\n        this.type = ShapeType.Triangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    intoRaw() {\n        let ra = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.a);\n        let rb = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.b);\n        let rc = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.c);\n        let result = _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.triangle(ra, rb, rc);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle with round borders and a non-zero thickness.\n */\nclass RoundTriangle extends Shape {\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    constructor(a, b, c, borderRadius) {\n        super();\n        this.type = ShapeType.RoundTriangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        let ra = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.a);\n        let rb = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.b);\n        let rc = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.c);\n        let result = _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundTriangle(ra, rb, rc, this.borderRadius);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nclass Polyline extends Shape {\n    /**\n     * Creates a new polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `null` or not provided, then\n     *    the vertices are assumed to form a line strip.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.Polyline;\n        this.vertices = vertices;\n        this.indices = indices !== null && indices !== void 0 ? indices : new Uint32Array(0);\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.polyline(this.vertices, this.indices);\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nclass TriMesh extends Shape {\n    /**\n     * Creates a new triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.TriMesh;\n        this.vertices = vertices;\n        this.indices = indices;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.trimesh(this.vertices, this.indices);\n    }\n}\n// #if DIM3\n/**\n * A shape that is a convex polygon.\n */\nclass ConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.ConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.convexMesh(this.vertices, this.indices);\n        }\n        else {\n            return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.convexHull(this.vertices);\n        }\n    }\n}\n/**\n * A shape that is a convex polygon.\n */\nclass RoundConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     * @param borderRadius - The radius of the borders of this convex polyhedron.\n     */\n    constructor(vertices, indices, borderRadius) {\n        super();\n        this.type = ShapeType.RoundConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundConvexMesh(this.vertices, this.indices, this.borderRadius);\n        }\n        else {\n            return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundConvexHull(this.vertices, this.borderRadius);\n        }\n    }\n}\n/**\n * A shape that is a heightfield.\n */\nclass Heightfield extends Shape {\n    /**\n     * Creates a new heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The dimensions of the heightfield's local `x,z` plane.\n     */\n    constructor(nrows, ncols, heights, scale) {\n        super();\n        this.type = ShapeType.HeightField;\n        this.nrows = nrows;\n        this.ncols = ncols;\n        this.heights = heights;\n        this.scale = scale;\n    }\n    intoRaw() {\n        let rawScale = _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.intoRaw(this.scale);\n        let rawShape = _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.heightfield(this.nrows, this.ncols, this.heights, rawScale);\n        rawScale.free();\n        return rawShape;\n    }\n}\n/**\n * A shape that is a 3D cylinder.\n */\nclass Cylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cylinder;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.cylinder(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cylinder with round corners.\n */\nclass RoundCylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cylinder.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCylinder;\n        this.borderRadius = borderRadius;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundCylinder(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n/**\n * A shape that is a 3D cone.\n */\nclass Cone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.cone(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cone with round corners.\n */\nclass RoundCone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cone.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        return _raw__WEBPACK_IMPORTED_MODULE_5__.RawShape.roundCone(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n// #endif\n//# sourceMappingURL=shape.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/shape.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/geometry/toi.js":
/*!*********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/geometry/toi.js ***!
  \*********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShapeColliderTOI\": () => (/* binding */ ShapeColliderTOI),\n/* harmony export */   \"ShapeTOI\": () => (/* binding */ ShapeTOI)\n/* harmony export */ });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__]);\n_math__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The intersection between a ray and a collider.\n */\nclass ShapeTOI {\n    constructor(toi, witness1, witness2, normal1, normal2) {\n        this.toi = toi;\n        this.witness1 = witness1;\n        this.witness2 = witness2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeTOI(raw.toi(), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.witness1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.witness2()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nclass ShapeColliderTOI extends ShapeTOI {\n    constructor(collider, toi, witness1, witness2, normal1, normal2) {\n        super(toi, witness1, witness2, normal1, normal2);\n        this.collider = collider;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeColliderTOI(colliderSet.get(raw.colliderHandle()), raw.toi(), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.witness1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.witness2()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal1()), _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=toi.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL2dlb21ldHJ5L3RvaS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxvREFBaUIsa0JBQWtCLG9EQUFpQixrQkFBa0Isb0RBQWlCLGlCQUFpQixvREFBaUI7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGLG9EQUFpQixrQkFBa0Isb0RBQWlCLGtCQUFrQixvREFBaUIsaUJBQWlCLG9EQUFpQjtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9nZW9tZXRyeS90b2kuanM/ZTE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuLyoqXG4gKiBUaGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gYSByYXkgYW5kIGEgY29sbGlkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFwZVRPSSB7XG4gICAgY29uc3RydWN0b3IodG9pLCB3aXRuZXNzMSwgd2l0bmVzczIsIG5vcm1hbDEsIG5vcm1hbDIpIHtcbiAgICAgICAgdGhpcy50b2kgPSB0b2k7XG4gICAgICAgIHRoaXMud2l0bmVzczEgPSB3aXRuZXNzMTtcbiAgICAgICAgdGhpcy53aXRuZXNzMiA9IHdpdG5lc3MyO1xuICAgICAgICB0aGlzLm5vcm1hbDEgPSBub3JtYWwxO1xuICAgICAgICB0aGlzLm5vcm1hbDIgPSBub3JtYWwyO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJhdyhjb2xsaWRlclNldCwgcmF3KSB7XG4gICAgICAgIGlmICghcmF3KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTaGFwZVRPSShyYXcudG9pKCksIFZlY3Rvck9wcy5mcm9tUmF3KHJhdy53aXRuZXNzMSgpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3LndpdG5lc3MyKCkpLCBWZWN0b3JPcHMuZnJvbVJhdyhyYXcubm9ybWFsMSgpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3Lm5vcm1hbDIoKSkpO1xuICAgICAgICByYXcuZnJlZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8qKlxuICogVGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIGEgcmF5IGFuZCBhIGNvbGxpZGVyLlxuICovXG5leHBvcnQgY2xhc3MgU2hhcGVDb2xsaWRlclRPSSBleHRlbmRzIFNoYXBlVE9JIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsaWRlciwgdG9pLCB3aXRuZXNzMSwgd2l0bmVzczIsIG5vcm1hbDEsIG5vcm1hbDIpIHtcbiAgICAgICAgc3VwZXIodG9pLCB3aXRuZXNzMSwgd2l0bmVzczIsIG5vcm1hbDEsIG5vcm1hbDIpO1xuICAgICAgICB0aGlzLmNvbGxpZGVyID0gY29sbGlkZXI7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KGNvbGxpZGVyU2V0LCByYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNoYXBlQ29sbGlkZXJUT0koY29sbGlkZXJTZXQuZ2V0KHJhdy5jb2xsaWRlckhhbmRsZSgpKSwgcmF3LnRvaSgpLCBWZWN0b3JPcHMuZnJvbVJhdyhyYXcud2l0bmVzczEoKSksIFZlY3Rvck9wcy5mcm9tUmF3KHJhdy53aXRuZXNzMigpKSwgVmVjdG9yT3BzLmZyb21SYXcocmF3Lm5vcm1hbDEoKSksIFZlY3Rvck9wcy5mcm9tUmF3KHJhdy5ub3JtYWwyKCkpKTtcbiAgICAgICAgcmF3LmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/geometry/toi.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/math.js":
/*!*************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/math.js ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Quaternion\": () => (/* binding */ Quaternion),\n/* harmony export */   \"RotationOps\": () => (/* binding */ RotationOps),\n/* harmony export */   \"SdpMatrix3\": () => (/* binding */ SdpMatrix3),\n/* harmony export */   \"SdpMatrix3Ops\": () => (/* binding */ SdpMatrix3Ops),\n/* harmony export */   \"Vector3\": () => (/* binding */ Vector3),\n/* harmony export */   \"VectorOps\": () => (/* binding */ VectorOps)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * A 3D vector.\n */\nclass Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\nclass VectorOps {\n    static new(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    static intoRaw(v) {\n        return new _raw__WEBPACK_IMPORTED_MODULE_0__.RawVector(v.x, v.y, v.z);\n    }\n    static zeros() {\n        return VectorOps.new(0.0, 0.0, 0.0);\n    }\n    // FIXME: type ram: RawVector?\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = VectorOps.new(raw.x, raw.y, raw.z);\n        raw.free();\n        return res;\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n    }\n}\n/**\n * A quaternion.\n */\nclass Quaternion {\n    constructor(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n}\nclass RotationOps {\n    static identity() {\n        return new Quaternion(0.0, 0.0, 0.0, 1.0);\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = new Quaternion(raw.x, raw.y, raw.z, raw.w);\n        raw.free();\n        return res;\n    }\n    static intoRaw(rot) {\n        return new _raw__WEBPACK_IMPORTED_MODULE_0__.RawRotation(rot.x, rot.y, rot.z, rot.w);\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n        out.w = input.w;\n    }\n}\n/**\n * A 3D symmetric-positive-definite matrix.\n */\nclass SdpMatrix3 {\n    constructor(elements) {\n        this.elements = elements;\n    }\n    /**\n     * Matrix element at row 1, column 1.\n     */\n    get m11() {\n        return this.elements[0];\n    }\n    /**\n     * Matrix element at row 1, column 2.\n     */\n    get m12() {\n        return this.elements[1];\n    }\n    /**\n     * Matrix element at row 2, column 1.\n     */\n    get m21() {\n        return this.m12;\n    }\n    /**\n     * Matrix element at row 1, column 3.\n     */\n    get m13() {\n        return this.elements[2];\n    }\n    /**\n     * Matrix element at row 3, column 1.\n     */\n    get m31() {\n        return this.m13;\n    }\n    /**\n     * Matrix element at row 2, column 2.\n     */\n    get m22() {\n        return this.elements[3];\n    }\n    /**\n     * Matrix element at row 2, column 3.\n     */\n    get m23() {\n        return this.elements[4];\n    }\n    /**\n     * Matrix element at row 3, column 2.\n     */\n    get m32() {\n        return this.m23;\n    }\n    /**\n     * Matrix element at row 3, column 3.\n     */\n    get m33() {\n        return this.elements[5];\n    }\n}\nclass SdpMatrix3Ops {\n    static fromRaw(raw) {\n        const sdpMatrix3 = new SdpMatrix3(raw.elements());\n        raw.free();\n        return sdpMatrix3;\n    }\n}\n// #endif\n//# sourceMappingURL=math.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL21hdGguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2Q0FBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvbWF0aC5qcz9jZjI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd1ZlY3RvciwgUmF3Um90YXRpb24gfSBmcm9tIFwiLi9yYXdcIjtcbi8qKlxuICogQSAzRCB2ZWN0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3IzIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFZlY3Rvck9wcyB7XG4gICAgc3RhdGljIG5ldyh4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh4LCB5LCB6KTtcbiAgICB9XG4gICAgc3RhdGljIGludG9SYXcodikge1xuICAgICAgICByZXR1cm4gbmV3IFJhd1ZlY3Rvcih2LngsIHYueSwgdi56KTtcbiAgICB9XG4gICAgc3RhdGljIHplcm9zKCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yT3BzLm5ldygwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLy8gRklYTUU6IHR5cGUgcmFtOiBSYXdWZWN0b3I/XG4gICAgc3RhdGljIGZyb21SYXcocmF3KSB7XG4gICAgICAgIGlmICghcmF3KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCByZXMgPSBWZWN0b3JPcHMubmV3KHJhdy54LCByYXcueSwgcmF3LnopO1xuICAgICAgICByYXcuZnJlZSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBzdGF0aWMgY29weShvdXQsIGlucHV0KSB7XG4gICAgICAgIG91dC54ID0gaW5wdXQueDtcbiAgICAgICAgb3V0LnkgPSBpbnB1dC55O1xuICAgICAgICBvdXQueiA9IGlucHV0Lno7XG4gICAgfVxufVxuLyoqXG4gKiBBIHF1YXRlcm5pb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBRdWF0ZXJuaW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6LCB3KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMudyA9IHc7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJvdGF0aW9uT3BzIHtcbiAgICBzdGF0aWMgaWRlbnRpdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbigwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJhdyhyYXcpIHtcbiAgICAgICAgaWYgKCFyYXcpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHJlcyA9IG5ldyBRdWF0ZXJuaW9uKHJhdy54LCByYXcueSwgcmF3LnosIHJhdy53KTtcbiAgICAgICAgcmF3LmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgc3RhdGljIGludG9SYXcocm90KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmF3Um90YXRpb24ocm90LngsIHJvdC55LCByb3Queiwgcm90LncpO1xuICAgIH1cbiAgICBzdGF0aWMgY29weShvdXQsIGlucHV0KSB7XG4gICAgICAgIG91dC54ID0gaW5wdXQueDtcbiAgICAgICAgb3V0LnkgPSBpbnB1dC55O1xuICAgICAgICBvdXQueiA9IGlucHV0Lno7XG4gICAgICAgIG91dC53ID0gaW5wdXQudztcbiAgICB9XG59XG4vKipcbiAqIEEgM0Qgc3ltbWV0cmljLXBvc2l0aXZlLWRlZmluaXRlIG1hdHJpeC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNkcE1hdHJpeDMge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0cml4IGVsZW1lbnQgYXQgcm93IDEsIGNvbHVtbiAxLlxuICAgICAqL1xuICAgIGdldCBtMTEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRyaXggZWxlbWVudCBhdCByb3cgMSwgY29sdW1uIDIuXG4gICAgICovXG4gICAgZ2V0IG0xMigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdHJpeCBlbGVtZW50IGF0IHJvdyAyLCBjb2x1bW4gMS5cbiAgICAgKi9cbiAgICBnZXQgbTIxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tMTI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdHJpeCBlbGVtZW50IGF0IHJvdyAxLCBjb2x1bW4gMy5cbiAgICAgKi9cbiAgICBnZXQgbTEzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1syXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0cml4IGVsZW1lbnQgYXQgcm93IDMsIGNvbHVtbiAxLlxuICAgICAqL1xuICAgIGdldCBtMzEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm0xMztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0cml4IGVsZW1lbnQgYXQgcm93IDIsIGNvbHVtbiAyLlxuICAgICAqL1xuICAgIGdldCBtMjIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzWzNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRyaXggZWxlbWVudCBhdCByb3cgMiwgY29sdW1uIDMuXG4gICAgICovXG4gICAgZ2V0IG0yMygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbNF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdHJpeCBlbGVtZW50IGF0IHJvdyAzLCBjb2x1bW4gMi5cbiAgICAgKi9cbiAgICBnZXQgbTMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tMjM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdHJpeCBlbGVtZW50IGF0IHJvdyAzLCBjb2x1bW4gMy5cbiAgICAgKi9cbiAgICBnZXQgbTMzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1s1XTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2RwTWF0cml4M09wcyB7XG4gICAgc3RhdGljIGZyb21SYXcocmF3KSB7XG4gICAgICAgIGNvbnN0IHNkcE1hdHJpeDMgPSBuZXcgU2RwTWF0cml4MyhyYXcuZWxlbWVudHMoKSk7XG4gICAgICAgIHJhdy5mcmVlKCk7XG4gICAgICAgIHJldHVybiBzZHBNYXRyaXgzO1xuICAgIH1cbn1cbi8vICNlbmRpZlxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/math.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DebugRenderBuffers\": () => (/* binding */ DebugRenderBuffers),\n/* harmony export */   \"DebugRenderPipeline\": () => (/* binding */ DebugRenderPipeline)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__]);\n_raw__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\n * The vertex and color buffers for debug-redering the physics scene.\n */\nclass DebugRenderBuffers {\n    constructor(vertices, colors) {\n        this.vertices = vertices;\n        this.colors = colors;\n    }\n}\n/**\n * A pipeline for rendering the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `debugRenderPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nclass DebugRenderPipeline {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawDebugRenderPipeline();\n    }\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        this.vertices = undefined;\n        this.colors = undefined;\n    }\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        this.raw.render(bodies.raw, colliders.raw, impulse_joints.raw, multibody_joints.raw, narrow_phase.raw);\n        this.vertices = this.raw.vertices();\n        this.colors = this.raw.colors();\n    }\n}\n//# sourceMappingURL=debug_render_pipeline.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL2RlYnVnX3JlbmRlcl9waXBlbGluZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhCQUE4Qix3REFBc0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL2RlYnVnX3JlbmRlcl9waXBlbGluZS5qcz9kZWI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0RlYnVnUmVuZGVyUGlwZWxpbmUgfSBmcm9tIFwiLi4vcmF3XCI7XG4vKipcbiAqIFRoZSB2ZXJ0ZXggYW5kIGNvbG9yIGJ1ZmZlcnMgZm9yIGRlYnVnLXJlZGVyaW5nIHRoZSBwaHlzaWNzIHNjZW5lLlxuICovXG5leHBvcnQgY2xhc3MgRGVidWdSZW5kZXJCdWZmZXJzIHtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJ0aWNlcywgY29sb3JzKSB7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICAgICAgdGhpcy5jb2xvcnMgPSBjb2xvcnM7XG4gICAgfVxufVxuLyoqXG4gKiBBIHBpcGVsaW5lIGZvciByZW5kZXJpbmcgdGhlIHBoeXNpY3Mgc2NlbmUuXG4gKlxuICogVG8gYXZvaWQgbGVha2luZyBXQVNNIHJlc291cmNlcywgdGhpcyBNVVNUIGJlIGZyZWVkIG1hbnVhbGx5IHdpdGggYGRlYnVnUmVuZGVyUGlwZWxpbmUuZnJlZSgpYFxuICogb25jZSB5b3UgYXJlIGRvbmUgdXNpbmcgaXQgKGFuZCBhbGwgdGhlIHJpZ2lkLWJvZGllcyBpdCBjcmVhdGVkKS5cbiAqL1xuZXhwb3J0IGNsYXNzIERlYnVnUmVuZGVyUGlwZWxpbmUge1xuICAgIGNvbnN0cnVjdG9yKHJhdykge1xuICAgICAgICB0aGlzLnJhdyA9IHJhdyB8fCBuZXcgUmF3RGVidWdSZW5kZXJQaXBlbGluZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBXQVNNIG1lbW9yeSBvY2N1cGllZCBieSB0aGlzIHNlcmlhbGl6YXRpb24gcGlwZWxpbmUuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJlbmRlcihib2RpZXMsIGNvbGxpZGVycywgaW1wdWxzZV9qb2ludHMsIG11bHRpYm9keV9qb2ludHMsIG5hcnJvd19waGFzZSkge1xuICAgICAgICB0aGlzLnJhdy5yZW5kZXIoYm9kaWVzLnJhdywgY29sbGlkZXJzLnJhdywgaW1wdWxzZV9qb2ludHMucmF3LCBtdWx0aWJvZHlfam9pbnRzLnJhdywgbmFycm93X3BoYXNlLnJhdyk7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSB0aGlzLnJhdy52ZXJ0aWNlcygpO1xuICAgICAgICB0aGlzLmNvbG9ycyA9IHRoaXMucmF3LmNvbG9ycygpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnX3JlbmRlcl9waXBlbGluZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/event_queue.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/event_queue.js ***!
  \*****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveEvents\": () => (/* binding */ ActiveEvents),\n/* harmony export */   \"EventQueue\": () => (/* binding */ EventQueue),\n/* harmony export */   \"TempContactForceEvent\": () => (/* binding */ TempContactForceEvent)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_math__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__]);\n([_math__WEBPACK_IMPORTED_MODULE_0__, _raw__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Flags indicating what events are enabled for colliders.\n */\nvar ActiveEvents;\n(function (ActiveEvents) {\n    /**\n     * Enable collision events.\n     */\n    ActiveEvents[ActiveEvents[\"COLLISION_EVENTS\"] = 1] = \"COLLISION_EVENTS\";\n    /**\n     * Enable contact force events.\n     */\n    ActiveEvents[ActiveEvents[\"CONTACT_FORCE_EVENTS\"] = 2] = \"CONTACT_FORCE_EVENTS\";\n})(ActiveEvents || (ActiveEvents = {}));\n/**\n * Event occurring when the sum of the magnitudes of the\n * contact forces between two colliders exceed a threshold.\n *\n * This object should **not** be stored anywhere. Its properties can only be\n * read from within the closure given to `EventHandler.drainContactForceEvents`.\n */\nclass TempContactForceEvent {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The first collider involved in the contact.\n     */\n    collider1() {\n        return this.raw.collider1();\n    }\n    /**\n     * The second collider involved in the contact.\n     */\n    collider2() {\n        return this.raw.collider2();\n    }\n    /**\n     * The sum of all the forces between the two colliders.\n     */\n    totalForce() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.raw.total_force());\n    }\n    /**\n     * The sum of the magnitudes of each force between the two colliders.\n     *\n     * Note that this is **not** the same as the magnitude of `self.total_force`.\n     * Here we are summing the magnitude of all the forces, instead of taking\n     * the magnitude of their sum.\n     */\n    totalForceMagnitude() {\n        return this.raw.total_force_magnitude();\n    }\n    /**\n     * The world-space (unit) direction of the force with strongest magnitude.\n     */\n    maxForceDirection() {\n        return _math__WEBPACK_IMPORTED_MODULE_0__.VectorOps.fromRaw(this.raw.max_force_direction());\n    }\n    /**\n     * The magnitude of the largest force at a contact point of this contact pair.\n     */\n    maxForceMagnitude() {\n        return this.raw.max_force_magnitude();\n    }\n}\n/**\n * A structure responsible for collecting events generated\n * by the physics engine.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `eventQueue.free()`\n * once you are done using it.\n */\nclass EventQueue {\n    /**\n     * Creates a new event collector.\n     *\n     * @param autoDrain -setting this to `true` is strongly recommended. If true, the collector will\n     * be automatically drained before each `world.step(collector)`. If false, the collector will\n     * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n     * RAM if no drain is performed.\n     */\n    constructor(autoDrain, raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_1__.RawEventQueue(autoDrain);\n    }\n    /**\n     * Release the WASM memory occupied by this event-queue.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Applies the given javascript closure on each collision event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     * closure must take three arguments: two integers representing the handles of the colliders\n     * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n     * (false).\n     */\n    drainCollisionEvents(f) {\n        this.raw.drainCollisionEvents(f);\n    }\n    /**\n     * Applies the given javascript closure on each contact force event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     *            closure must take one `TempContactForceEvent` argument.\n     */\n    drainContactForceEvents(f) {\n        let event = new TempContactForceEvent();\n        this.raw.drainContactForceEvents((raw) => {\n            event.raw = raw;\n            f(event);\n            event.free();\n        });\n    }\n    /**\n     * Removes all events contained by this collector\n     */\n    clear() {\n        this.raw.clear();\n    }\n}\n//# sourceMappingURL=event_queue.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL2V2ZW50X3F1ZXVlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ0g7QUFDcEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLCtDQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9waXBlbGluZS9ldmVudF9xdWV1ZS5qcz9mMjAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0V2ZW50UXVldWUgfSBmcm9tIFwiLi4vcmF3XCI7XG5pbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuLyoqXG4gKiBGbGFncyBpbmRpY2F0aW5nIHdoYXQgZXZlbnRzIGFyZSBlbmFibGVkIGZvciBjb2xsaWRlcnMuXG4gKi9cbmV4cG9ydCB2YXIgQWN0aXZlRXZlbnRzO1xuKGZ1bmN0aW9uIChBY3RpdmVFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBFbmFibGUgY29sbGlzaW9uIGV2ZW50cy5cbiAgICAgKi9cbiAgICBBY3RpdmVFdmVudHNbQWN0aXZlRXZlbnRzW1wiQ09MTElTSU9OX0VWRU5UU1wiXSA9IDFdID0gXCJDT0xMSVNJT05fRVZFTlRTXCI7XG4gICAgLyoqXG4gICAgICogRW5hYmxlIGNvbnRhY3QgZm9yY2UgZXZlbnRzLlxuICAgICAqL1xuICAgIEFjdGl2ZUV2ZW50c1tBY3RpdmVFdmVudHNbXCJDT05UQUNUX0ZPUkNFX0VWRU5UU1wiXSA9IDJdID0gXCJDT05UQUNUX0ZPUkNFX0VWRU5UU1wiO1xufSkoQWN0aXZlRXZlbnRzIHx8IChBY3RpdmVFdmVudHMgPSB7fSkpO1xuLyoqXG4gKiBFdmVudCBvY2N1cnJpbmcgd2hlbiB0aGUgc3VtIG9mIHRoZSBtYWduaXR1ZGVzIG9mIHRoZVxuICogY29udGFjdCBmb3JjZXMgYmV0d2VlbiB0d28gY29sbGlkZXJzIGV4Y2VlZCBhIHRocmVzaG9sZC5cbiAqXG4gKiBUaGlzIG9iamVjdCBzaG91bGQgKipub3QqKiBiZSBzdG9yZWQgYW55d2hlcmUuIEl0cyBwcm9wZXJ0aWVzIGNhbiBvbmx5IGJlXG4gKiByZWFkIGZyb20gd2l0aGluIHRoZSBjbG9zdXJlIGdpdmVuIHRvIGBFdmVudEhhbmRsZXIuZHJhaW5Db250YWN0Rm9yY2VFdmVudHNgLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcENvbnRhY3RGb3JjZUV2ZW50IHtcbiAgICBmcmVlKCkge1xuICAgICAgICBpZiAoISF0aGlzLnJhdykge1xuICAgICAgICAgICAgdGhpcy5yYXcuZnJlZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmF3ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3QgY29sbGlkZXIgaW52b2x2ZWQgaW4gdGhlIGNvbnRhY3QuXG4gICAgICovXG4gICAgY29sbGlkZXIxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcuY29sbGlkZXIxKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzZWNvbmQgY29sbGlkZXIgaW52b2x2ZWQgaW4gdGhlIGNvbnRhY3QuXG4gICAgICovXG4gICAgY29sbGlkZXIyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcuY29sbGlkZXIyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzdW0gb2YgYWxsIHRoZSBmb3JjZXMgYmV0d2VlbiB0aGUgdHdvIGNvbGxpZGVycy5cbiAgICAgKi9cbiAgICB0b3RhbEZvcmNlKCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yT3BzLmZyb21SYXcodGhpcy5yYXcudG90YWxfZm9yY2UoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzdW0gb2YgdGhlIG1hZ25pdHVkZXMgb2YgZWFjaCBmb3JjZSBiZXR3ZWVuIHRoZSB0d28gY29sbGlkZXJzLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgaXMgKipub3QqKiB0aGUgc2FtZSBhcyB0aGUgbWFnbml0dWRlIG9mIGBzZWxmLnRvdGFsX2ZvcmNlYC5cbiAgICAgKiBIZXJlIHdlIGFyZSBzdW1taW5nIHRoZSBtYWduaXR1ZGUgb2YgYWxsIHRoZSBmb3JjZXMsIGluc3RlYWQgb2YgdGFraW5nXG4gICAgICogdGhlIG1hZ25pdHVkZSBvZiB0aGVpciBzdW0uXG4gICAgICovXG4gICAgdG90YWxGb3JjZU1hZ25pdHVkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3LnRvdGFsX2ZvcmNlX21hZ25pdHVkZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgd29ybGQtc3BhY2UgKHVuaXQpIGRpcmVjdGlvbiBvZiB0aGUgZm9yY2Ugd2l0aCBzdHJvbmdlc3QgbWFnbml0dWRlLlxuICAgICAqL1xuICAgIG1heEZvcmNlRGlyZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yT3BzLmZyb21SYXcodGhpcy5yYXcubWF4X2ZvcmNlX2RpcmVjdGlvbigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG1hZ25pdHVkZSBvZiB0aGUgbGFyZ2VzdCBmb3JjZSBhdCBhIGNvbnRhY3QgcG9pbnQgb2YgdGhpcyBjb250YWN0IHBhaXIuXG4gICAgICovXG4gICAgbWF4Rm9yY2VNYWduaXR1ZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdy5tYXhfZm9yY2VfbWFnbml0dWRlKCk7XG4gICAgfVxufVxuLyoqXG4gKiBBIHN0cnVjdHVyZSByZXNwb25zaWJsZSBmb3IgY29sbGVjdGluZyBldmVudHMgZ2VuZXJhdGVkXG4gKiBieSB0aGUgcGh5c2ljcyBlbmdpbmUuXG4gKlxuICogVG8gYXZvaWQgbGVha2luZyBXQVNNIHJlc291cmNlcywgdGhpcyBNVVNUIGJlIGZyZWVkIG1hbnVhbGx5IHdpdGggYGV2ZW50UXVldWUuZnJlZSgpYFxuICogb25jZSB5b3UgYXJlIGRvbmUgdXNpbmcgaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFF1ZXVlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGV2ZW50IGNvbGxlY3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdXRvRHJhaW4gLXNldHRpbmcgdGhpcyB0byBgdHJ1ZWAgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQuIElmIHRydWUsIHRoZSBjb2xsZWN0b3Igd2lsbFxuICAgICAqIGJlIGF1dG9tYXRpY2FsbHkgZHJhaW5lZCBiZWZvcmUgZWFjaCBgd29ybGQuc3RlcChjb2xsZWN0b3IpYC4gSWYgZmFsc2UsIHRoZSBjb2xsZWN0b3Igd2lsbFxuICAgICAqIGtlZXAgYWxsIGV2ZW50cyBpbiBtZW1vcnkgdW5sZXNzIGl0IGlzIG1hbnVhbGx5IGRyYWluZWQvY2xlYXJlZDsgdGhpcyBtYXkgbGVhZCB0byB1bmJvdW5kZWQgdXNlIG9mXG4gICAgICogUkFNIGlmIG5vIGRyYWluIGlzIHBlcmZvcm1lZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhdXRvRHJhaW4sIHJhdykge1xuICAgICAgICB0aGlzLnJhdyA9IHJhdyB8fCBuZXcgUmF3RXZlbnRRdWV1ZShhdXRvRHJhaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBXQVNNIG1lbW9yeSBvY2N1cGllZCBieSB0aGlzIGV2ZW50LXF1ZXVlLlxuICAgICAqL1xuICAgIGZyZWUoKSB7XG4gICAgICAgIGlmICghIXRoaXMucmF3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdy5mcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYXcgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGdpdmVuIGphdmFzY3JpcHQgY2xvc3VyZSBvbiBlYWNoIGNvbGxpc2lvbiBldmVudCBvZiB0aGlzIGNvbGxlY3RvciwgdGhlbiBjbGVhclxuICAgICAqIHRoZSBpbnRlcm5hbCBjb2xsaXNpb24gZXZlbnQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGYgLSBKYXZhU2NyaXB0IGNsb3N1cmUgYXBwbGllZCB0byBlYWNoIGNvbGxpc2lvbiBldmVudC4gVGhlXG4gICAgICogY2xvc3VyZSBtdXN0IHRha2UgdGhyZWUgYXJndW1lbnRzOiB0d28gaW50ZWdlcnMgcmVwcmVzZW50aW5nIHRoZSBoYW5kbGVzIG9mIHRoZSBjb2xsaWRlcnNcbiAgICAgKiBpbnZvbHZlZCBpbiB0aGUgY29sbGlzaW9uLCBhbmQgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbGxpc2lvbiBzdGFydGVkICh0cnVlKSBvciBzdG9wcGVkXG4gICAgICogKGZhbHNlKS5cbiAgICAgKi9cbiAgICBkcmFpbkNvbGxpc2lvbkV2ZW50cyhmKSB7XG4gICAgICAgIHRoaXMucmF3LmRyYWluQ29sbGlzaW9uRXZlbnRzKGYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBnaXZlbiBqYXZhc2NyaXB0IGNsb3N1cmUgb24gZWFjaCBjb250YWN0IGZvcmNlIGV2ZW50IG9mIHRoaXMgY29sbGVjdG9yLCB0aGVuIGNsZWFyXG4gICAgICogdGhlIGludGVybmFsIGNvbGxpc2lvbiBldmVudCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIEphdmFTY3JpcHQgY2xvc3VyZSBhcHBsaWVkIHRvIGVhY2ggY29sbGlzaW9uIGV2ZW50LiBUaGVcbiAgICAgKiAgICAgICAgICAgIGNsb3N1cmUgbXVzdCB0YWtlIG9uZSBgVGVtcENvbnRhY3RGb3JjZUV2ZW50YCBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBkcmFpbkNvbnRhY3RGb3JjZUV2ZW50cyhmKSB7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBUZW1wQ29udGFjdEZvcmNlRXZlbnQoKTtcbiAgICAgICAgdGhpcy5yYXcuZHJhaW5Db250YWN0Rm9yY2VFdmVudHMoKHJhdykgPT4ge1xuICAgICAgICAgICAgZXZlbnQucmF3ID0gcmF3O1xuICAgICAgICAgICAgZihldmVudCk7XG4gICAgICAgICAgICBldmVudC5mcmVlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBldmVudHMgY29udGFpbmVkIGJ5IHRoaXMgY29sbGVjdG9yXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMucmF3LmNsZWFyKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRfcXVldWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/event_queue.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/index.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveEvents\": () => (/* reexport safe */ _event_queue__WEBPACK_IMPORTED_MODULE_3__.ActiveEvents),\n/* harmony export */   \"ActiveHooks\": () => (/* reexport safe */ _physics_hooks__WEBPACK_IMPORTED_MODULE_4__.ActiveHooks),\n/* harmony export */   \"DebugRenderBuffers\": () => (/* reexport safe */ _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_5__.DebugRenderBuffers),\n/* harmony export */   \"DebugRenderPipeline\": () => (/* reexport safe */ _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_5__.DebugRenderPipeline),\n/* harmony export */   \"EventQueue\": () => (/* reexport safe */ _event_queue__WEBPACK_IMPORTED_MODULE_3__.EventQueue),\n/* harmony export */   \"PhysicsPipeline\": () => (/* reexport safe */ _physics_pipeline__WEBPACK_IMPORTED_MODULE_1__.PhysicsPipeline),\n/* harmony export */   \"QueryFilterFlags\": () => (/* reexport safe */ _query_pipeline__WEBPACK_IMPORTED_MODULE_6__.QueryFilterFlags),\n/* harmony export */   \"QueryPipeline\": () => (/* reexport safe */ _query_pipeline__WEBPACK_IMPORTED_MODULE_6__.QueryPipeline),\n/* harmony export */   \"SerializationPipeline\": () => (/* reexport safe */ _serialization_pipeline__WEBPACK_IMPORTED_MODULE_2__.SerializationPipeline),\n/* harmony export */   \"SolverFlags\": () => (/* reexport safe */ _physics_hooks__WEBPACK_IMPORTED_MODULE_4__.SolverFlags),\n/* harmony export */   \"TempContactForceEvent\": () => (/* reexport safe */ _event_queue__WEBPACK_IMPORTED_MODULE_3__.TempContactForceEvent),\n/* harmony export */   \"World\": () => (/* reexport safe */ _world__WEBPACK_IMPORTED_MODULE_0__.World)\n/* harmony export */ });\n/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./world */ \"./node_modules/@dimforge/rapier3d/pipeline/world.js\");\n/* harmony import */ var _physics_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./physics_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js\");\n/* harmony import */ var _serialization_pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serialization_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js\");\n/* harmony import */ var _event_queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event_queue */ \"./node_modules/@dimforge/rapier3d/pipeline/event_queue.js\");\n/* harmony import */ var _physics_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./physics_hooks */ \"./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js\");\n/* harmony import */ var _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug_render_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js\");\n/* harmony import */ var _query_pipeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./query_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_world__WEBPACK_IMPORTED_MODULE_0__, _physics_pipeline__WEBPACK_IMPORTED_MODULE_1__, _serialization_pipeline__WEBPACK_IMPORTED_MODULE_2__, _event_queue__WEBPACK_IMPORTED_MODULE_3__, _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_5__, _query_pipeline__WEBPACK_IMPORTED_MODULE_6__]);\n([_world__WEBPACK_IMPORTED_MODULE_0__, _physics_pipeline__WEBPACK_IMPORTED_MODULE_1__, _serialization_pipeline__WEBPACK_IMPORTED_MODULE_2__, _event_queue__WEBPACK_IMPORTED_MODULE_3__, _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_5__, _query_pipeline__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDVztBQUNNO0FBQ1g7QUFDRTtBQUNRO0FBQ1A7QUFDakMsaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL2luZGV4LmpzP2Q2MWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vd29ybGRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BoeXNpY3NfcGlwZWxpbmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NlcmlhbGl6YXRpb25fcGlwZWxpbmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V2ZW50X3F1ZXVlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9waHlzaWNzX2hvb2tzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kZWJ1Z19yZW5kZXJfcGlwZWxpbmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3F1ZXJ5X3BpcGVsaW5lXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/index.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveHooks\": () => (/* binding */ ActiveHooks),\n/* harmony export */   \"SolverFlags\": () => (/* binding */ SolverFlags)\n/* harmony export */ });\nvar ActiveHooks;\n(function (ActiveHooks) {\n    ActiveHooks[ActiveHooks[\"FILTER_CONTACT_PAIRS\"] = 1] = \"FILTER_CONTACT_PAIRS\";\n    ActiveHooks[ActiveHooks[\"FILTER_INTERSECTION_PAIRS\"] = 2] = \"FILTER_INTERSECTION_PAIRS\";\n    // MODIFY_SOLVER_CONTACTS = 0b0100, /* Not supported yet in JS. */\n})(ActiveHooks || (ActiveHooks = {}));\nvar SolverFlags;\n(function (SolverFlags) {\n    SolverFlags[SolverFlags[\"EMPTY\"] = 0] = \"EMPTY\";\n    SolverFlags[SolverFlags[\"COMPUTE_IMPULSE\"] = 1] = \"COMPUTE_IMPULSE\";\n})(SolverFlags || (SolverFlags = {}));\n//# sourceMappingURL=physics_hooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3BoeXNpY3NfaG9va3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDNUI7QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvcGlwZWxpbmUvcGh5c2ljc19ob29rcy5qcz82MjliIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQWN0aXZlSG9va3M7XG4oZnVuY3Rpb24gKEFjdGl2ZUhvb2tzKSB7XG4gICAgQWN0aXZlSG9va3NbQWN0aXZlSG9va3NbXCJGSUxURVJfQ09OVEFDVF9QQUlSU1wiXSA9IDFdID0gXCJGSUxURVJfQ09OVEFDVF9QQUlSU1wiO1xuICAgIEFjdGl2ZUhvb2tzW0FjdGl2ZUhvb2tzW1wiRklMVEVSX0lOVEVSU0VDVElPTl9QQUlSU1wiXSA9IDJdID0gXCJGSUxURVJfSU5URVJTRUNUSU9OX1BBSVJTXCI7XG4gICAgLy8gTU9ESUZZX1NPTFZFUl9DT05UQUNUUyA9IDBiMDEwMCwgLyogTm90IHN1cHBvcnRlZCB5ZXQgaW4gSlMuICovXG59KShBY3RpdmVIb29rcyB8fCAoQWN0aXZlSG9va3MgPSB7fSkpO1xuZXhwb3J0IHZhciBTb2x2ZXJGbGFncztcbihmdW5jdGlvbiAoU29sdmVyRmxhZ3MpIHtcbiAgICBTb2x2ZXJGbGFnc1tTb2x2ZXJGbGFnc1tcIkVNUFRZXCJdID0gMF0gPSBcIkVNUFRZXCI7XG4gICAgU29sdmVyRmxhZ3NbU29sdmVyRmxhZ3NbXCJDT01QVVRFX0lNUFVMU0VcIl0gPSAxXSA9IFwiQ09NUFVURV9JTVBVTFNFXCI7XG59KShTb2x2ZXJGbGFncyB8fCAoU29sdmVyRmxhZ3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGh5c2ljc19ob29rcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js ***!
  \**********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PhysicsPipeline\": () => (/* binding */ PhysicsPipeline)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass PhysicsPipeline {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawPhysicsPipeline();\n    }\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints, ccdSolver, eventQueue, hooks) {\n        let rawG = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(gravity);\n        if (!!eventQueue) {\n            this.raw.stepWithEvents(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw, eventQueue.raw, hooks, !!hooks ? hooks.filterContactPair : null, !!hooks ? hooks.filterIntersectionPair : null);\n        }\n        else {\n            this.raw.step(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw);\n        }\n        rawG.free();\n    }\n}\n//# sourceMappingURL=physics_pipeline.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3BoeXNpY3NfcGlwZWxpbmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRDO0FBQ1I7QUFDN0I7QUFDUDtBQUNBLDhCQUE4QixvREFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvREFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3BoeXNpY3NfcGlwZWxpbmUuanM/NjhhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdQaHlzaWNzUGlwZWxpbmUgfSBmcm9tIFwiLi4vcmF3XCI7XG5pbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuZXhwb3J0IGNsYXNzIFBoeXNpY3NQaXBlbGluZSB7XG4gICAgY29uc3RydWN0b3IocmF3KSB7XG4gICAgICAgIHRoaXMucmF3ID0gcmF3IHx8IG5ldyBSYXdQaHlzaWNzUGlwZWxpbmUoKTtcbiAgICB9XG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3RlcChncmF2aXR5LCBpbnRlZ3JhdGlvblBhcmFtZXRlcnMsIGlzbGFuZHMsIGJyb2FkUGhhc2UsIG5hcnJvd1BoYXNlLCBib2RpZXMsIGNvbGxpZGVycywgaW1wdWxzZUpvaW50cywgbXVsdGlib2R5Sm9pbnRzLCBjY2RTb2x2ZXIsIGV2ZW50UXVldWUsIGhvb2tzKSB7XG4gICAgICAgIGxldCByYXdHID0gVmVjdG9yT3BzLmludG9SYXcoZ3Jhdml0eSk7XG4gICAgICAgIGlmICghIWV2ZW50UXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LnN0ZXBXaXRoRXZlbnRzKHJhd0csIGludGVncmF0aW9uUGFyYW1ldGVycy5yYXcsIGlzbGFuZHMucmF3LCBicm9hZFBoYXNlLnJhdywgbmFycm93UGhhc2UucmF3LCBib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCBpbXB1bHNlSm9pbnRzLnJhdywgbXVsdGlib2R5Sm9pbnRzLnJhdywgY2NkU29sdmVyLnJhdywgZXZlbnRRdWV1ZS5yYXcsIGhvb2tzLCAhIWhvb2tzID8gaG9va3MuZmlsdGVyQ29udGFjdFBhaXIgOiBudWxsLCAhIWhvb2tzID8gaG9va3MuZmlsdGVySW50ZXJzZWN0aW9uUGFpciA6IG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yYXcuc3RlcChyYXdHLCBpbnRlZ3JhdGlvblBhcmFtZXRlcnMucmF3LCBpc2xhbmRzLnJhdywgYnJvYWRQaGFzZS5yYXcsIG5hcnJvd1BoYXNlLnJhdywgYm9kaWVzLnJhdywgY29sbGlkZXJzLnJhdywgaW1wdWxzZUpvaW50cy5yYXcsIG11bHRpYm9keUpvaW50cy5yYXcsIGNjZFNvbHZlci5yYXcpO1xuICAgICAgICB9XG4gICAgICAgIHJhd0cuZnJlZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBoeXNpY3NfcGlwZWxpbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js":
/*!********************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QueryFilterFlags\": () => (/* binding */ QueryFilterFlags),\n/* harmony export */   \"QueryPipeline\": () => (/* binding */ QueryPipeline)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/ray.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/point.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/toi.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _geometry__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _geometry__WEBPACK_IMPORTED_MODULE_4__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _geometry__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _geometry__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// NOTE: must match the bits in the QueryFilterFlags on the Rust side.\n/**\n * Flags for excluding whole sets of colliders from a scene query.\n */\nvar QueryFilterFlags;\n(function (QueryFilterFlags) {\n    /**\n     * Exclude from the query any collider attached to a fixed rigid-body and colliders with no rigid-body attached.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_FIXED\"] = 1] = \"EXCLUDE_FIXED\";\n    /**\n     * Exclude from the query any collider attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_KINEMATIC\"] = 2] = \"EXCLUDE_KINEMATIC\";\n    /**\n     * Exclude from the query any collider attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_DYNAMIC\"] = 4] = \"EXCLUDE_DYNAMIC\";\n    /**\n     * Exclude from the query any collider that is a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SENSORS\"] = 8] = \"EXCLUDE_SENSORS\";\n    /**\n     * Exclude from the query any collider that is not a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SOLIDS\"] = 16] = \"EXCLUDE_SOLIDS\";\n    /**\n     * Excludes all colliders not attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_DYNAMIC\"] = 3] = \"ONLY_DYNAMIC\";\n    /**\n     * Excludes all colliders not attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_KINEMATIC\"] = 5] = \"ONLY_KINEMATIC\";\n    /**\n     * Exclude all colliders attached to a non-fixed rigid-body\n     * (this will not exclude colliders not attached to any rigid-body).\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_FIXED\"] = 6] = \"ONLY_FIXED\";\n})(QueryFilterFlags || (QueryFilterFlags = {}));\n/**\n * A pipeline for performing queries on all the colliders of a scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nclass QueryPipeline {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawQueryPipeline();\n    }\n    /**\n     * Release the WASM memory occupied by this query pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Updates the acceleration structure of the query pipeline.\n     * @param bodies - The set of rigid-bodies taking part in this pipeline.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     */\n    update(bodies, colliders) {\n        this.raw.update(bodies.raw, colliders.raw);\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let result = _geometry__WEBPACK_IMPORTED_MODULE_2__.RayColliderToi.fromRaw(colliders, this.raw.castRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let result = _geometry__WEBPACK_IMPORTED_MODULE_2__.RayColliderIntersection.fromRaw(colliders, this.raw.castRayAndGetNormal(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(bodies, colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.origin);\n        let rawDir = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(ray.dir);\n        let rawCallback = (rawInter) => {\n            return callback(_geometry__WEBPACK_IMPORTED_MODULE_2__.RayColliderIntersection.fromRaw(colliders, rawInter));\n        };\n        this.raw.intersectionsWithRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, rawCallback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawOrig.free();\n        rawDir.free();\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        let result = this.raw.intersectionWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(bodies, colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(point);\n        let result = _geometry__WEBPACK_IMPORTED_MODULE_3__.PointColliderProjection.fromRaw(colliders, this.raw.projectPoint(bodies.raw, colliders.raw, rawPoint, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(bodies, colliders, point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(point);\n        let result = _geometry__WEBPACK_IMPORTED_MODULE_3__.PointColliderProjection.fromRaw(colliders, this.raw.projectPointAndGetFeature(bodies.raw, colliders.raw, rawPoint, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(bodies, colliders, point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(point);\n        this.raw.intersectionsWithPoint(bodies.raw, colliders.raw, rawPoint, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPoint.free();\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exist that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shapeRot);\n        let rawVel = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shapeVel);\n        let rawShape = shape.intoRaw();\n        let result = _geometry__WEBPACK_IMPORTED_MODULE_4__.ShapeColliderTOI.fromRaw(colliders, this.raw.castShape(bodies.raw, colliders.raw, rawPos, rawRot, rawVel, rawShape, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPos.free();\n        rawRot.free();\n        rawVel.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(shapePos);\n        let rawRot = _math__WEBPACK_IMPORTED_MODULE_1__.RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        this.raw.intersectionsWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        let rawCenter = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(aabbCenter);\n        let rawHalfExtents = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(aabbHalfExtents);\n        this.raw.collidersWithAabbIntersectingAabb(rawCenter, rawHalfExtents, callback);\n        rawCenter.free();\n        rawHalfExtents.free();\n    }\n}\n//# sourceMappingURL=query_pipeline.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3F1ZXJ5X3BpcGVsaW5lLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDd0U7QUFDakU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhCQUE4QixrREFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvREFBaUI7QUFDdkMscUJBQXFCLG9EQUFpQjtBQUN0QyxxQkFBcUIsNkRBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvREFBaUI7QUFDdkMscUJBQXFCLG9EQUFpQjtBQUN0QyxxQkFBcUIsc0VBQStCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG9EQUFpQjtBQUN2QyxxQkFBcUIsb0RBQWlCO0FBQ3RDO0FBQ0EsNEJBQTRCLHNFQUErQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvREFBaUI7QUFDdEMscUJBQXFCLHNEQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0RBQWlCO0FBQ3hDLHFCQUFxQixzRUFBK0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9EQUFpQjtBQUN4QyxxQkFBcUIsc0VBQStCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0RBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9EQUFpQjtBQUN0QyxxQkFBcUIsc0RBQW1CO0FBQ3hDLHFCQUFxQixvREFBaUI7QUFDdEM7QUFDQSxxQkFBcUIsK0RBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvREFBaUI7QUFDdEMscUJBQXFCLHNEQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0RBQWlCO0FBQ3pDLDZCQUE2QixvREFBaUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGNpLTUyNS1ncm91cC1wcm9qZWN0LXYyLy4vbm9kZV9tb2R1bGVzL0BkaW1mb3JnZS9yYXBpZXIzZC9waXBlbGluZS9xdWVyeV9waXBlbGluZS5qcz9lN2RhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd1F1ZXJ5UGlwZWxpbmUgfSBmcm9tIFwiLi4vcmF3XCI7XG5pbXBvcnQgeyBQb2ludENvbGxpZGVyUHJvamVjdGlvbiwgUmF5Q29sbGlkZXJJbnRlcnNlY3Rpb24sIFJheUNvbGxpZGVyVG9pLCBTaGFwZUNvbGxpZGVyVE9JLCB9IGZyb20gXCIuLi9nZW9tZXRyeVwiO1xuaW1wb3J0IHsgUm90YXRpb25PcHMsIFZlY3Rvck9wcyB9IGZyb20gXCIuLi9tYXRoXCI7XG4vLyBOT1RFOiBtdXN0IG1hdGNoIHRoZSBiaXRzIGluIHRoZSBRdWVyeUZpbHRlckZsYWdzIG9uIHRoZSBSdXN0IHNpZGUuXG4vKipcbiAqIEZsYWdzIGZvciBleGNsdWRpbmcgd2hvbGUgc2V0cyBvZiBjb2xsaWRlcnMgZnJvbSBhIHNjZW5lIHF1ZXJ5LlxuICovXG5leHBvcnQgdmFyIFF1ZXJ5RmlsdGVyRmxhZ3M7XG4oZnVuY3Rpb24gKFF1ZXJ5RmlsdGVyRmxhZ3MpIHtcbiAgICAvKipcbiAgICAgKiBFeGNsdWRlIGZyb20gdGhlIHF1ZXJ5IGFueSBjb2xsaWRlciBhdHRhY2hlZCB0byBhIGZpeGVkIHJpZ2lkLWJvZHkgYW5kIGNvbGxpZGVycyB3aXRoIG5vIHJpZ2lkLWJvZHkgYXR0YWNoZWQuXG4gICAgICovXG4gICAgUXVlcnlGaWx0ZXJGbGFnc1tRdWVyeUZpbHRlckZsYWdzW1wiRVhDTFVERV9GSVhFRFwiXSA9IDFdID0gXCJFWENMVURFX0ZJWEVEXCI7XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBmcm9tIHRoZSBxdWVyeSBhbnkgY29sbGlkZXIgYXR0YWNoZWQgdG8gYSBkeW5hbWljIHJpZ2lkLWJvZHkuXG4gICAgICovXG4gICAgUXVlcnlGaWx0ZXJGbGFnc1tRdWVyeUZpbHRlckZsYWdzW1wiRVhDTFVERV9LSU5FTUFUSUNcIl0gPSAyXSA9IFwiRVhDTFVERV9LSU5FTUFUSUNcIjtcbiAgICAvKipcbiAgICAgKiBFeGNsdWRlIGZyb20gdGhlIHF1ZXJ5IGFueSBjb2xsaWRlciBhdHRhY2hlZCB0byBhIGtpbmVtYXRpYyByaWdpZC1ib2R5LlxuICAgICAqL1xuICAgIFF1ZXJ5RmlsdGVyRmxhZ3NbUXVlcnlGaWx0ZXJGbGFnc1tcIkVYQ0xVREVfRFlOQU1JQ1wiXSA9IDRdID0gXCJFWENMVURFX0RZTkFNSUNcIjtcbiAgICAvKipcbiAgICAgKiBFeGNsdWRlIGZyb20gdGhlIHF1ZXJ5IGFueSBjb2xsaWRlciB0aGF0IGlzIGEgc2Vuc29yLlxuICAgICAqL1xuICAgIFF1ZXJ5RmlsdGVyRmxhZ3NbUXVlcnlGaWx0ZXJGbGFnc1tcIkVYQ0xVREVfU0VOU09SU1wiXSA9IDhdID0gXCJFWENMVURFX1NFTlNPUlNcIjtcbiAgICAvKipcbiAgICAgKiBFeGNsdWRlIGZyb20gdGhlIHF1ZXJ5IGFueSBjb2xsaWRlciB0aGF0IGlzIG5vdCBhIHNlbnNvci5cbiAgICAgKi9cbiAgICBRdWVyeUZpbHRlckZsYWdzW1F1ZXJ5RmlsdGVyRmxhZ3NbXCJFWENMVURFX1NPTElEU1wiXSA9IDE2XSA9IFwiRVhDTFVERV9TT0xJRFNcIjtcbiAgICAvKipcbiAgICAgKiBFeGNsdWRlcyBhbGwgY29sbGlkZXJzIG5vdCBhdHRhY2hlZCB0byBhIGR5bmFtaWMgcmlnaWQtYm9keS5cbiAgICAgKi9cbiAgICBRdWVyeUZpbHRlckZsYWdzW1F1ZXJ5RmlsdGVyRmxhZ3NbXCJPTkxZX0RZTkFNSUNcIl0gPSAzXSA9IFwiT05MWV9EWU5BTUlDXCI7XG4gICAgLyoqXG4gICAgICogRXhjbHVkZXMgYWxsIGNvbGxpZGVycyBub3QgYXR0YWNoZWQgdG8gYSBraW5lbWF0aWMgcmlnaWQtYm9keS5cbiAgICAgKi9cbiAgICBRdWVyeUZpbHRlckZsYWdzW1F1ZXJ5RmlsdGVyRmxhZ3NbXCJPTkxZX0tJTkVNQVRJQ1wiXSA9IDVdID0gXCJPTkxZX0tJTkVNQVRJQ1wiO1xuICAgIC8qKlxuICAgICAqIEV4Y2x1ZGUgYWxsIGNvbGxpZGVycyBhdHRhY2hlZCB0byBhIG5vbi1maXhlZCByaWdpZC1ib2R5XG4gICAgICogKHRoaXMgd2lsbCBub3QgZXhjbHVkZSBjb2xsaWRlcnMgbm90IGF0dGFjaGVkIHRvIGFueSByaWdpZC1ib2R5KS5cbiAgICAgKi9cbiAgICBRdWVyeUZpbHRlckZsYWdzW1F1ZXJ5RmlsdGVyRmxhZ3NbXCJPTkxZX0ZJWEVEXCJdID0gNl0gPSBcIk9OTFlfRklYRURcIjtcbn0pKFF1ZXJ5RmlsdGVyRmxhZ3MgfHwgKFF1ZXJ5RmlsdGVyRmxhZ3MgPSB7fSkpO1xuLyoqXG4gKiBBIHBpcGVsaW5lIGZvciBwZXJmb3JtaW5nIHF1ZXJpZXMgb24gYWxsIHRoZSBjb2xsaWRlcnMgb2YgYSBzY2VuZS5cbiAqXG4gKiBUbyBhdm9pZCBsZWFraW5nIFdBU00gcmVzb3VyY2VzLCB0aGlzIE1VU1QgYmUgZnJlZWQgbWFudWFsbHkgd2l0aCBgcXVlcnlQaXBlbGluZS5mcmVlKClgXG4gKiBvbmNlIHlvdSBhcmUgZG9uZSB1c2luZyBpdCAoYW5kIGFsbCB0aGUgcmlnaWQtYm9kaWVzIGl0IGNyZWF0ZWQpLlxuICovXG5leHBvcnQgY2xhc3MgUXVlcnlQaXBlbGluZSB7XG4gICAgY29uc3RydWN0b3IocmF3KSB7XG4gICAgICAgIHRoaXMucmF3ID0gcmF3IHx8IG5ldyBSYXdRdWVyeVBpcGVsaW5lKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgdGhlIFdBU00gbWVtb3J5IG9jY3VwaWVkIGJ5IHRoaXMgcXVlcnkgcGlwZWxpbmUuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYWNjZWxlcmF0aW9uIHN0cnVjdHVyZSBvZiB0aGUgcXVlcnkgcGlwZWxpbmUuXG4gICAgICogQHBhcmFtIGJvZGllcyAtIFRoZSBzZXQgb2YgcmlnaWQtYm9kaWVzIHRha2luZyBwYXJ0IGluIHRoaXMgcGlwZWxpbmUuXG4gICAgICogQHBhcmFtIGNvbGxpZGVycyAtIFRoZSBzZXQgb2YgY29sbGlkZXJzIHRha2luZyBwYXJ0IGluIHRoaXMgcGlwZWxpbmUuXG4gICAgICovXG4gICAgdXBkYXRlKGJvZGllcywgY29sbGlkZXJzKSB7XG4gICAgICAgIHRoaXMucmF3LnVwZGF0ZShib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgY2xvc2VzdCBpbnRlcnNlY3Rpb24gYmV0d2VlbiBhIHJheSBhbmQgYSBzZXQgb2YgY29sbGlkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gcmF5IC0gVGhlIHJheSB0byBjYXN0LlxuICAgICAqIEBwYXJhbSBtYXhUb2kgLSBUaGUgbWF4aW11bSB0aW1lLW9mLWltcGFjdCB0aGF0IGNhbiBiZSByZXBvcnRlZCBieSB0aGlzIGNhc3QuIFRoaXMgZWZmZWN0aXZlbHlcbiAgICAgKiAgIGxpbWl0cyB0aGUgbGVuZ3RoIG9mIHRoZSByYXkgdG8gYHJheS5kaXIubm9ybSgpICogbWF4VG9pYC5cbiAgICAgKiBAcGFyYW0gc29saWQgLSBJZiBgZmFsc2VgIHRoZW4gdGhlIHJheSB3aWxsIGF0dGVtcHQgdG8gaGl0IHRoZSBib3VuZGFyeSBvZiBhIHNoYXBlLCBldmVuIGlmIGl0c1xuICAgICAqICAgb3JpZ2luIGFscmVhZHkgbGllcyBpbnNpZGUgb2YgYSBzaGFwZS4gSW4gb3RoZXIgdGVybXMsIGB0cnVlYCBpbXBsaWVzIHRoYXQgYWxsIHNoYXBlcyBhcmUgcGxhaW4sXG4gICAgICogICB3aGVyZWFzIGBmYWxzZWAgaW1wbGllcyB0aGF0IGFsbCBzaGFwZXMgYXJlIGhvbGxvdyBmb3IgdGhpcyByYXktY2FzdC5cbiAgICAgKiBAcGFyYW0gZ3JvdXBzIC0gVXNlZCB0byBmaWx0ZXIgdGhlIGNvbGxpZGVycyB0aGF0IGNhbiBvciBjYW5ub3QgYmUgaGl0IGJ5IHRoZSByYXkuXG4gICAgICogQHBhcmFtIGZpbHRlciAtIFRoZSBjYWxsYmFjayB0byBmaWx0ZXIgb3V0IHdoaWNoIGNvbGxpZGVyIHdpbGwgYmUgaGl0LlxuICAgICAqL1xuICAgIGNhc3RSYXkoYm9kaWVzLCBjb2xsaWRlcnMsIHJheSwgbWF4VG9pLCBzb2xpZCwgZmlsdGVyRmxhZ3MsIGZpbHRlckdyb3VwcywgZmlsdGVyRXhjbHVkZUNvbGxpZGVyLCBmaWx0ZXJFeGNsdWRlUmlnaWRCb2R5LCBmaWx0ZXJQcmVkaWNhdGUpIHtcbiAgICAgICAgbGV0IHJhd09yaWcgPSBWZWN0b3JPcHMuaW50b1JhdyhyYXkub3JpZ2luKTtcbiAgICAgICAgbGV0IHJhd0RpciA9IFZlY3Rvck9wcy5pbnRvUmF3KHJheS5kaXIpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gUmF5Q29sbGlkZXJUb2kuZnJvbVJhdyhjb2xsaWRlcnMsIHRoaXMucmF3LmNhc3RSYXkoYm9kaWVzLnJhdywgY29sbGlkZXJzLnJhdywgcmF3T3JpZywgcmF3RGlyLCBtYXhUb2ksIHNvbGlkLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkpO1xuICAgICAgICByYXdPcmlnLmZyZWUoKTtcbiAgICAgICAgcmF3RGlyLmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgY2xvc2VzdCBpbnRlcnNlY3Rpb24gYmV0d2VlbiBhIHJheSBhbmQgYSBzZXQgb2YgY29sbGlkZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIGFsc28gY29tcHV0ZXMgdGhlIG5vcm1hbCBhdCB0aGUgaGl0IHBvaW50LlxuICAgICAqIEBwYXJhbSBjb2xsaWRlcnMgLSBUaGUgc2V0IG9mIGNvbGxpZGVycyB0YWtpbmcgcGFydCBpbiB0aGlzIHBpcGVsaW5lLlxuICAgICAqIEBwYXJhbSByYXkgLSBUaGUgcmF5IHRvIGNhc3QuXG4gICAgICogQHBhcmFtIG1heFRvaSAtIFRoZSBtYXhpbXVtIHRpbWUtb2YtaW1wYWN0IHRoYXQgY2FuIGJlIHJlcG9ydGVkIGJ5IHRoaXMgY2FzdC4gVGhpcyBlZmZlY3RpdmVseVxuICAgICAqICAgbGltaXRzIHRoZSBsZW5ndGggb2YgdGhlIHJheSB0byBgcmF5LmRpci5ub3JtKCkgKiBtYXhUb2lgLlxuICAgICAqIEBwYXJhbSBzb2xpZCAtIElmIGBmYWxzZWAgdGhlbiB0aGUgcmF5IHdpbGwgYXR0ZW1wdCB0byBoaXQgdGhlIGJvdW5kYXJ5IG9mIGEgc2hhcGUsIGV2ZW4gaWYgaXRzXG4gICAgICogICBvcmlnaW4gYWxyZWFkeSBsaWVzIGluc2lkZSBvZiBhIHNoYXBlLiBJbiBvdGhlciB0ZXJtcywgYHRydWVgIGltcGxpZXMgdGhhdCBhbGwgc2hhcGVzIGFyZSBwbGFpbixcbiAgICAgKiAgIHdoZXJlYXMgYGZhbHNlYCBpbXBsaWVzIHRoYXQgYWxsIHNoYXBlcyBhcmUgaG9sbG93IGZvciB0aGlzIHJheS1jYXN0LlxuICAgICAqIEBwYXJhbSBncm91cHMgLSBVc2VkIHRvIGZpbHRlciB0aGUgY29sbGlkZXJzIHRoYXQgY2FuIG9yIGNhbm5vdCBiZSBoaXQgYnkgdGhlIHJheS5cbiAgICAgKi9cbiAgICBjYXN0UmF5QW5kR2V0Tm9ybWFsKGJvZGllcywgY29sbGlkZXJzLCByYXksIG1heFRvaSwgc29saWQsIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByYXdPcmlnID0gVmVjdG9yT3BzLmludG9SYXcocmF5Lm9yaWdpbik7XG4gICAgICAgIGxldCByYXdEaXIgPSBWZWN0b3JPcHMuaW50b1JhdyhyYXkuZGlyKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFJheUNvbGxpZGVySW50ZXJzZWN0aW9uLmZyb21SYXcoY29sbGlkZXJzLCB0aGlzLnJhdy5jYXN0UmF5QW5kR2V0Tm9ybWFsKGJvZGllcy5yYXcsIGNvbGxpZGVycy5yYXcsIHJhd09yaWcsIHJhd0RpciwgbWF4VG9pLCBzb2xpZCwgZmlsdGVyRmxhZ3MsIGZpbHRlckdyb3VwcywgZmlsdGVyRXhjbHVkZUNvbGxpZGVyLCBmaWx0ZXJFeGNsdWRlUmlnaWRCb2R5LCBmaWx0ZXJQcmVkaWNhdGUpKTtcbiAgICAgICAgcmF3T3JpZy5mcmVlKCk7XG4gICAgICAgIHJhd0Rpci5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhc3QgYSByYXkgYW5kIGNvbGxlY3RzIGFsbCB0aGUgaW50ZXJzZWN0aW9ucyBiZXR3ZWVuIGEgcmF5IGFuZCB0aGUgc2NlbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gcmF5IC0gVGhlIHJheSB0byBjYXN0LlxuICAgICAqIEBwYXJhbSBtYXhUb2kgLSBUaGUgbWF4aW11bSB0aW1lLW9mLWltcGFjdCB0aGF0IGNhbiBiZSByZXBvcnRlZCBieSB0aGlzIGNhc3QuIFRoaXMgZWZmZWN0aXZlbHlcbiAgICAgKiAgIGxpbWl0cyB0aGUgbGVuZ3RoIG9mIHRoZSByYXkgdG8gYHJheS5kaXIubm9ybSgpICogbWF4VG9pYC5cbiAgICAgKiBAcGFyYW0gc29saWQgLSBJZiBgZmFsc2VgIHRoZW4gdGhlIHJheSB3aWxsIGF0dGVtcHQgdG8gaGl0IHRoZSBib3VuZGFyeSBvZiBhIHNoYXBlLCBldmVuIGlmIGl0c1xuICAgICAqICAgb3JpZ2luIGFscmVhZHkgbGllcyBpbnNpZGUgb2YgYSBzaGFwZS4gSW4gb3RoZXIgdGVybXMsIGB0cnVlYCBpbXBsaWVzIHRoYXQgYWxsIHNoYXBlcyBhcmUgcGxhaW4sXG4gICAgICogICB3aGVyZWFzIGBmYWxzZWAgaW1wbGllcyB0aGF0IGFsbCBzaGFwZXMgYXJlIGhvbGxvdyBmb3IgdGhpcyByYXktY2FzdC5cbiAgICAgKiBAcGFyYW0gZ3JvdXBzIC0gVXNlZCB0byBmaWx0ZXIgdGhlIGNvbGxpZGVycyB0aGF0IGNhbiBvciBjYW5ub3QgYmUgaGl0IGJ5IHRoZSByYXkuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGNhbGxlZCBvbmNlIHBlciBoaXQgKGluIG5vIHBhcnRpY3VsYXIgb3JkZXIpIGJldHdlZW4gYSByYXkgYW5kIGEgY29sbGlkZXIuXG4gICAgICogICBJZiB0aGlzIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdGhlbiB0aGUgY2FzdCB3aWxsIHN0b3AgYW5kIG5vIGZ1cnRoZXIgaGl0cyB3aWxsIGJlIGRldGVjdGVkL3JlcG9ydGVkLlxuICAgICAqL1xuICAgIGludGVyc2VjdGlvbnNXaXRoUmF5KGJvZGllcywgY29sbGlkZXJzLCByYXksIG1heFRvaSwgc29saWQsIGNhbGxiYWNrLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkge1xuICAgICAgICBsZXQgcmF3T3JpZyA9IFZlY3Rvck9wcy5pbnRvUmF3KHJheS5vcmlnaW4pO1xuICAgICAgICBsZXQgcmF3RGlyID0gVmVjdG9yT3BzLmludG9SYXcocmF5LmRpcik7XG4gICAgICAgIGxldCByYXdDYWxsYmFjayA9IChyYXdJbnRlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFJheUNvbGxpZGVySW50ZXJzZWN0aW9uLmZyb21SYXcoY29sbGlkZXJzLCByYXdJbnRlcikpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJhdy5pbnRlcnNlY3Rpb25zV2l0aFJheShib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCByYXdPcmlnLCByYXdEaXIsIG1heFRvaSwgc29saWQsIHJhd0NhbGxiYWNrLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSk7XG4gICAgICAgIHJhd09yaWcuZnJlZSgpO1xuICAgICAgICByYXdEaXIuZnJlZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYW5kbGUgb2YgdXAgdG8gb25lIGNvbGxpZGVyIGludGVyc2VjdGluZyB0aGUgZ2l2ZW4gc2hhcGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gc2hhcGVQb3MgLSBUaGUgcG9zaXRpb24gb2YgdGhlIHNoYXBlIHVzZWQgZm9yIHRoZSBpbnRlcnNlY3Rpb24gdGVzdC5cbiAgICAgKiBAcGFyYW0gc2hhcGVSb3QgLSBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHNoYXBlIHVzZWQgZm9yIHRoZSBpbnRlcnNlY3Rpb24gdGVzdC5cbiAgICAgKiBAcGFyYW0gc2hhcGUgLSBUaGUgc2hhcGUgdXNlZCBmb3IgdGhlIGludGVyc2VjdGlvbiB0ZXN0LlxuICAgICAqIEBwYXJhbSBncm91cHMgLSBUaGUgYml0IGdyb3VwcyBhbmQgZmlsdGVyIGFzc29jaWF0ZWQgdG8gdGhlIHJheSwgaW4gb3JkZXIgdG8gb25seVxuICAgICAqICAgaGl0IHRoZSBjb2xsaWRlcnMgd2l0aCBjb2xsaXNpb24gZ3JvdXBzIGNvbXBhdGlibGUgd2l0aCB0aGUgcmF5J3MgZ3JvdXAuXG4gICAgICovXG4gICAgaW50ZXJzZWN0aW9uV2l0aFNoYXBlKGJvZGllcywgY29sbGlkZXJzLCBzaGFwZVBvcywgc2hhcGVSb3QsIHNoYXBlLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkge1xuICAgICAgICBsZXQgcmF3UG9zID0gVmVjdG9yT3BzLmludG9SYXcoc2hhcGVQb3MpO1xuICAgICAgICBsZXQgcmF3Um90ID0gUm90YXRpb25PcHMuaW50b1JhdyhzaGFwZVJvdCk7XG4gICAgICAgIGxldCByYXdTaGFwZSA9IHNoYXBlLmludG9SYXcoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucmF3LmludGVyc2VjdGlvbldpdGhTaGFwZShib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCByYXdQb3MsIHJhd1JvdCwgcmF3U2hhcGUsIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKTtcbiAgICAgICAgcmF3UG9zLmZyZWUoKTtcbiAgICAgICAgcmF3Um90LmZyZWUoKTtcbiAgICAgICAgcmF3U2hhcGUuZnJlZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBwcm9qZWN0aW9uIG9mIGEgcG9pbnQgb24gdGhlIGNsb3Nlc3QgY29sbGlkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gcHJvamVjdC5cbiAgICAgKiBAcGFyYW0gc29saWQgLSBJZiB0aGlzIGlzIHNldCB0byBgdHJ1ZWAgdGhlbiB0aGUgY29sbGlkZXIgc2hhcGVzIGFyZSBjb25zaWRlcmVkIHRvXG4gICAgICogICBiZSBwbGFpbiAoaWYgdGhlIHBvaW50IGlzIGxvY2F0ZWQgaW5zaWRlIG9mIGEgcGxhaW4gc2hhcGUsIGl0cyBwcm9qZWN0aW9uIGlzIHRoZSBwb2ludFxuICAgICAqICAgaXRzZWxmKS4gSWYgaXQgaXMgc2V0IHRvIGBmYWxzZWAgdGhlIGNvbGxpZGVyIHNoYXBlcyBhcmUgY29uc2lkZXJlZCB0byBiZSBob2xsb3dcbiAgICAgKiAgIChpZiB0aGUgcG9pbnQgaXMgbG9jYXRlZCBpbnNpZGUgb2YgYW4gaG9sbG93IHNoYXBlLCBpdCBpcyBwcm9qZWN0ZWQgb24gdGhlIHNoYXBlJ3NcbiAgICAgKiAgIGJvdW5kYXJ5KS5cbiAgICAgKiBAcGFyYW0gZ3JvdXBzIC0gVGhlIGJpdCBncm91cHMgYW5kIGZpbHRlciBhc3NvY2lhdGVkIHRvIHRoZSBwb2ludCB0byBwcm9qZWN0LCBpbiBvcmRlciB0byBvbmx5XG4gICAgICogICBwcm9qZWN0IG9uIGNvbGxpZGVycyB3aXRoIGNvbGxpc2lvbiBncm91cHMgY29tcGF0aWJsZSB3aXRoIHRoZSByYXkncyBncm91cC5cbiAgICAgKi9cbiAgICBwcm9qZWN0UG9pbnQoYm9kaWVzLCBjb2xsaWRlcnMsIHBvaW50LCBzb2xpZCwgZmlsdGVyRmxhZ3MsIGZpbHRlckdyb3VwcywgZmlsdGVyRXhjbHVkZUNvbGxpZGVyLCBmaWx0ZXJFeGNsdWRlUmlnaWRCb2R5LCBmaWx0ZXJQcmVkaWNhdGUpIHtcbiAgICAgICAgbGV0IHJhd1BvaW50ID0gVmVjdG9yT3BzLmludG9SYXcocG9pbnQpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gUG9pbnRDb2xsaWRlclByb2plY3Rpb24uZnJvbVJhdyhjb2xsaWRlcnMsIHRoaXMucmF3LnByb2plY3RQb2ludChib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCByYXdQb2ludCwgc29saWQsIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKSk7XG4gICAgICAgIHJhd1BvaW50LmZyZWUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgcHJvamVjdGlvbiBvZiBhIHBvaW50IG9uIHRoZSBjbG9zZXN0IGNvbGxpZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxpZGVycyAtIFRoZSBzZXQgb2YgY29sbGlkZXJzIHRha2luZyBwYXJ0IGluIHRoaXMgcGlwZWxpbmUuXG4gICAgICogQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIHByb2plY3QuXG4gICAgICogQHBhcmFtIGdyb3VwcyAtIFRoZSBiaXQgZ3JvdXBzIGFuZCBmaWx0ZXIgYXNzb2NpYXRlZCB0byB0aGUgcG9pbnQgdG8gcHJvamVjdCwgaW4gb3JkZXIgdG8gb25seVxuICAgICAqICAgcHJvamVjdCBvbiBjb2xsaWRlcnMgd2l0aCBjb2xsaXNpb24gZ3JvdXBzIGNvbXBhdGlibGUgd2l0aCB0aGUgcmF5J3MgZ3JvdXAuXG4gICAgICovXG4gICAgcHJvamVjdFBvaW50QW5kR2V0RmVhdHVyZShib2RpZXMsIGNvbGxpZGVycywgcG9pbnQsIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByYXdQb2ludCA9IFZlY3Rvck9wcy5pbnRvUmF3KHBvaW50KTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFBvaW50Q29sbGlkZXJQcm9qZWN0aW9uLmZyb21SYXcoY29sbGlkZXJzLCB0aGlzLnJhdy5wcm9qZWN0UG9pbnRBbmRHZXRGZWF0dXJlKGJvZGllcy5yYXcsIGNvbGxpZGVycy5yYXcsIHJhd1BvaW50LCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkpO1xuICAgICAgICByYXdQb2ludC5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIHRoZSBjb2xsaWRlcnMgY29udGFpbmluZyB0aGUgZ2l2ZW4gcG9pbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gcG9pbnQgLSBUaGUgcG9pbnQgdXNlZCBmb3IgdGhlIGNvbnRhaW5tZW50IHRlc3QuXG4gICAgICogQHBhcmFtIGdyb3VwcyAtIFRoZSBiaXQgZ3JvdXBzIGFuZCBmaWx0ZXIgYXNzb2NpYXRlZCB0byB0aGUgcG9pbnQgdG8gdGVzdCwgaW4gb3JkZXIgdG8gb25seVxuICAgICAqICAgdGVzdCBvbiBjb2xsaWRlcnMgd2l0aCBjb2xsaXNpb24gZ3JvdXBzIGNvbXBhdGlibGUgd2l0aCB0aGUgcmF5J3MgZ3JvdXAuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQSBmdW5jdGlvbiBjYWxsZWQgd2l0aCB0aGUgaGFuZGxlcyBvZiBlYWNoIGNvbGxpZGVyIHdpdGggYSBzaGFwZVxuICAgICAqICAgY29udGFpbmluZyB0aGUgYHBvaW50YC5cbiAgICAgKi9cbiAgICBpbnRlcnNlY3Rpb25zV2l0aFBvaW50KGJvZGllcywgY29sbGlkZXJzLCBwb2ludCwgY2FsbGJhY2ssIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByYXdQb2ludCA9IFZlY3Rvck9wcy5pbnRvUmF3KHBvaW50KTtcbiAgICAgICAgdGhpcy5yYXcuaW50ZXJzZWN0aW9uc1dpdGhQb2ludChib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCByYXdQb2ludCwgY2FsbGJhY2ssIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKTtcbiAgICAgICAgcmF3UG9pbnQuZnJlZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYXN0cyBhIHNoYXBlIGF0IGEgY29uc3RhbnQgbGluZWFyIHZlbG9jaXR5IGFuZCByZXRyaWV2ZSB0aGUgZmlyc3QgY29sbGlkZXIgaXQgaGl0cy5cbiAgICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8gcmF5LWNhc3RpbmcgZXhjZXB0IHRoYXQgd2UgYXJlIGNhc3RpbmcgYSB3aG9sZSBzaGFwZSBpbnN0ZWFkIG9mXG4gICAgICoganVzdCBhIHBvaW50ICh0aGUgcmF5IG9yaWdpbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gc2hhcGVQb3MgLSBUaGUgaW5pdGlhbCBwb3NpdGlvbiBvZiB0aGUgc2hhcGUgdG8gY2FzdC5cbiAgICAgKiBAcGFyYW0gc2hhcGVSb3QgLSBUaGUgaW5pdGlhbCByb3RhdGlvbiBvZiB0aGUgc2hhcGUgdG8gY2FzdC5cbiAgICAgKiBAcGFyYW0gc2hhcGVWZWwgLSBUaGUgY29uc3RhbnQgdmVsb2NpdHkgb2YgdGhlIHNoYXBlIHRvIGNhc3QgKGkuZS4gdGhlIGNhc3QgZGlyZWN0aW9uKS5cbiAgICAgKiBAcGFyYW0gc2hhcGUgLSBUaGUgc2hhcGUgdG8gY2FzdC5cbiAgICAgKiBAcGFyYW0gbWF4VG9pIC0gVGhlIG1heGltdW0gdGltZS1vZi1pbXBhY3QgdGhhdCBjYW4gYmUgcmVwb3J0ZWQgYnkgdGhpcyBjYXN0LiBUaGlzIGVmZmVjdGl2ZWx5XG4gICAgICogICBsaW1pdHMgdGhlIGRpc3RhbmNlIHRyYXZlbGVkIGJ5IHRoZSBzaGFwZSB0byBgc2hhcGVWZWwubm9ybSgpICogbWF4VG9pYC5cbiAgICAgKiBAcGFyYW0gc3RvcEF0UGVuZXRyYXRpb24gLSBJZiBzZXQgdG8gYGZhbHNlYCwgdGhlIGxpbmVhciBzaGFwZS1jYXN0IHdvbuKAmXQgaW1tZWRpYXRlbHkgc3RvcCBpZlxuICAgICAqICAgdGhlIHNoYXBlIGlzIHBlbmV0cmF0aW5nIGFub3RoZXIgc2hhcGUgYXQgaXRzIHN0YXJ0aW5nIHBvaW50ICoqYW5kKiogaXRzIHRyYWplY3RvcnkgaXMgc3VjaFxuICAgICAqICAgdGhhdCBpdOKAmXMgb24gYSBwYXRoIHRvIGV4aXN0IHRoYXQgcGVuZXRyYXRpb24gc3RhdGUuXG4gICAgICogQHBhcmFtIGdyb3VwcyAtIFRoZSBiaXQgZ3JvdXBzIGFuZCBmaWx0ZXIgYXNzb2NpYXRlZCB0byB0aGUgc2hhcGUgdG8gY2FzdCwgaW4gb3JkZXIgdG8gb25seVxuICAgICAqICAgdGVzdCBvbiBjb2xsaWRlcnMgd2l0aCBjb2xsaXNpb24gZ3JvdXBzIGNvbXBhdGlibGUgd2l0aCB0aGlzIGdyb3VwLlxuICAgICAqL1xuICAgIGNhc3RTaGFwZShib2RpZXMsIGNvbGxpZGVycywgc2hhcGVQb3MsIHNoYXBlUm90LCBzaGFwZVZlbCwgc2hhcGUsIG1heFRvaSwgc3RvcEF0UGVuZXRyYXRpb24sIGZpbHRlckZsYWdzLCBmaWx0ZXJHcm91cHMsIGZpbHRlckV4Y2x1ZGVDb2xsaWRlciwgZmlsdGVyRXhjbHVkZVJpZ2lkQm9keSwgZmlsdGVyUHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByYXdQb3MgPSBWZWN0b3JPcHMuaW50b1JhdyhzaGFwZVBvcyk7XG4gICAgICAgIGxldCByYXdSb3QgPSBSb3RhdGlvbk9wcy5pbnRvUmF3KHNoYXBlUm90KTtcbiAgICAgICAgbGV0IHJhd1ZlbCA9IFZlY3Rvck9wcy5pbnRvUmF3KHNoYXBlVmVsKTtcbiAgICAgICAgbGV0IHJhd1NoYXBlID0gc2hhcGUuaW50b1JhdygpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gU2hhcGVDb2xsaWRlclRPSS5mcm9tUmF3KGNvbGxpZGVycywgdGhpcy5yYXcuY2FzdFNoYXBlKGJvZGllcy5yYXcsIGNvbGxpZGVycy5yYXcsIHJhd1BvcywgcmF3Um90LCByYXdWZWwsIHJhd1NoYXBlLCBtYXhUb2ksIHN0b3BBdFBlbmV0cmF0aW9uLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkpO1xuICAgICAgICByYXdQb3MuZnJlZSgpO1xuICAgICAgICByYXdSb3QuZnJlZSgpO1xuICAgICAgICByYXdWZWwuZnJlZSgpO1xuICAgICAgICByYXdTaGFwZS5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGFsbCB0aGUgY29sbGlkZXJzIGludGVyc2VjdGluZyB0aGUgZ2l2ZW4gc2hhcGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXJzIC0gVGhlIHNldCBvZiBjb2xsaWRlcnMgdGFraW5nIHBhcnQgaW4gdGhpcyBwaXBlbGluZS5cbiAgICAgKiBAcGFyYW0gc2hhcGVQb3MgLSBUaGUgcG9zaXRpb24gb2YgdGhlIHNoYXBlIHRvIHRlc3QuXG4gICAgICogQHBhcmFtIHNoYXBlUm90IC0gVGhlIG9yaWVudGF0aW9uIG9mIHRoZSBzaGFwZSB0byB0ZXN0LlxuICAgICAqIEBwYXJhbSBzaGFwZSAtIFRoZSBzaGFwZSB0byB0ZXN0LlxuICAgICAqIEBwYXJhbSBncm91cHMgLSBUaGUgYml0IGdyb3VwcyBhbmQgZmlsdGVyIGFzc29jaWF0ZWQgdG8gdGhlIHNoYXBlIHRvIHRlc3QsIGluIG9yZGVyIHRvIG9ubHlcbiAgICAgKiAgIHRlc3Qgb24gY29sbGlkZXJzIHdpdGggY29sbGlzaW9uIGdyb3VwcyBjb21wYXRpYmxlIHdpdGggdGhpcyBncm91cC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBBIGZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBoYW5kbGVzIG9mIGVhY2ggY29sbGlkZXIgaW50ZXJzZWN0aW5nIHRoZSBgc2hhcGVgLlxuICAgICAqL1xuICAgIGludGVyc2VjdGlvbnNXaXRoU2hhcGUoYm9kaWVzLCBjb2xsaWRlcnMsIHNoYXBlUG9zLCBzaGFwZVJvdCwgc2hhcGUsIGNhbGxiYWNrLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSkge1xuICAgICAgICBsZXQgcmF3UG9zID0gVmVjdG9yT3BzLmludG9SYXcoc2hhcGVQb3MpO1xuICAgICAgICBsZXQgcmF3Um90ID0gUm90YXRpb25PcHMuaW50b1JhdyhzaGFwZVJvdCk7XG4gICAgICAgIGxldCByYXdTaGFwZSA9IHNoYXBlLmludG9SYXcoKTtcbiAgICAgICAgdGhpcy5yYXcuaW50ZXJzZWN0aW9uc1dpdGhTaGFwZShib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCByYXdQb3MsIHJhd1JvdCwgcmF3U2hhcGUsIGNhbGxiYWNrLCBmaWx0ZXJGbGFncywgZmlsdGVyR3JvdXBzLCBmaWx0ZXJFeGNsdWRlQ29sbGlkZXIsIGZpbHRlckV4Y2x1ZGVSaWdpZEJvZHksIGZpbHRlclByZWRpY2F0ZSk7XG4gICAgICAgIHJhd1Bvcy5mcmVlKCk7XG4gICAgICAgIHJhd1JvdC5mcmVlKCk7XG4gICAgICAgIHJhd1NoYXBlLmZyZWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGhhbmRsZXMgb2YgYWxsIHRoZSBjb2xsaWRlcnMgd2l0aCBhbiBBQUJCIGludGVyc2VjdGluZyB0aGUgZ2l2ZW4gQUFCQi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhYWJiQ2VudGVyIC0gVGhlIGNlbnRlciBvZiB0aGUgQUFCQiB0byB0ZXN0LlxuICAgICAqIEBwYXJhbSBhYWJiSGFsZkV4dGVudHMgLSBUaGUgaGFsZi1leHRlbnRzIG9mIHRoZSBBQUJCIHRvIHRlc3QuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgaGFuZGxlcyBvZiBhbGwgdGhlIGNvbGxpZGVyc1xuICAgICAqICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseSBpbnRlcnNlY3RpbmcgdGhlIGdpdmVuIEFBQkIuXG4gICAgICovXG4gICAgY29sbGlkZXJzV2l0aEFhYmJJbnRlcnNlY3RpbmdBYWJiKGFhYmJDZW50ZXIsIGFhYmJIYWxmRXh0ZW50cywgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHJhd0NlbnRlciA9IFZlY3Rvck9wcy5pbnRvUmF3KGFhYmJDZW50ZXIpO1xuICAgICAgICBsZXQgcmF3SGFsZkV4dGVudHMgPSBWZWN0b3JPcHMuaW50b1JhdyhhYWJiSGFsZkV4dGVudHMpO1xuICAgICAgICB0aGlzLnJhdy5jb2xsaWRlcnNXaXRoQWFiYkludGVyc2VjdGluZ0FhYmIocmF3Q2VudGVyLCByYXdIYWxmRXh0ZW50cywgY2FsbGJhY2spO1xuICAgICAgICByYXdDZW50ZXIuZnJlZSgpO1xuICAgICAgICByYXdIYWxmRXh0ZW50cy5mcmVlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnlfcGlwZWxpbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SerializationPipeline\": () => (/* binding */ SerializationPipeline)\n/* harmony export */ });\n/* harmony import */ var _raw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../raw */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./world */ \"./node_modules/@dimforge/rapier3d/pipeline/world.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _world__WEBPACK_IMPORTED_MODULE_2__]);\n([_raw__WEBPACK_IMPORTED_MODULE_0__, _math__WEBPACK_IMPORTED_MODULE_1__, _world__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n/**\n * A pipeline for serializing the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nclass SerializationPipeline {\n    constructor(raw) {\n        this.raw = raw || new _raw__WEBPACK_IMPORTED_MODULE_0__.RawSerializationPipeline();\n    }\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Serialize a complete physics state into a single byte array.\n     * @param gravity - The current gravity affecting the simulation.\n     * @param integrationParameters - The integration parameters of the simulation.\n     * @param broadPhase - The broad-phase of the simulation.\n     * @param narrowPhase - The narrow-phase of the simulation.\n     * @param bodies - The rigid-bodies taking part into the simulation.\n     * @param colliders - The colliders taking part into the simulation.\n     * @param impulseJoints - The impulse joints taking part into the simulation.\n     * @param multibodyJoints - The multibody joints taking part into the simulation.\n     */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints) {\n        let rawGra = _math__WEBPACK_IMPORTED_MODULE_1__.VectorOps.intoRaw(gravity);\n        const res = this.raw.serializeAll(rawGra, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        rawGra.free();\n        return res;\n    }\n    /**\n     * Deserialize the complete physics state from a single byte array.\n     *\n     * @param data - The byte array to deserialize.\n     */\n    deserializeAll(data) {\n        return _world__WEBPACK_IMPORTED_MODULE_2__.World.fromRaw(this.raw.deserializeAll(data));\n    }\n}\n//# sourceMappingURL=serialization_pipeline.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3NlcmlhbGl6YXRpb25fcGlwZWxpbmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFrRDtBQUNkO0FBQ0o7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhCQUE4QiwwREFBd0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0RBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBYTtBQUM1QjtBQUNBO0FBQ0Esa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oY2ktNTI1LWdyb3VwLXByb2plY3QtdjIvLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3BpcGVsaW5lL3NlcmlhbGl6YXRpb25fcGlwZWxpbmUuanM/YmRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdTZXJpYWxpemF0aW9uUGlwZWxpbmUgfSBmcm9tIFwiLi4vcmF3XCI7XG5pbXBvcnQgeyBWZWN0b3JPcHMgfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHsgV29ybGQgfSBmcm9tIFwiLi93b3JsZFwiO1xuLyoqXG4gKiBBIHBpcGVsaW5lIGZvciBzZXJpYWxpemluZyB0aGUgcGh5c2ljcyBzY2VuZS5cbiAqXG4gKiBUbyBhdm9pZCBsZWFraW5nIFdBU00gcmVzb3VyY2VzLCB0aGlzIE1VU1QgYmUgZnJlZWQgbWFudWFsbHkgd2l0aCBgcXVlcnlQaXBlbGluZS5mcmVlKClgXG4gKiBvbmNlIHlvdSBhcmUgZG9uZSB1c2luZyBpdCAoYW5kIGFsbCB0aGUgcmlnaWQtYm9kaWVzIGl0IGNyZWF0ZWQpLlxuICovXG5leHBvcnQgY2xhc3MgU2VyaWFsaXphdGlvblBpcGVsaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihyYXcpIHtcbiAgICAgICAgdGhpcy5yYXcgPSByYXcgfHwgbmV3IFJhd1NlcmlhbGl6YXRpb25QaXBlbGluZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBXQVNNIG1lbW9yeSBvY2N1cGllZCBieSB0aGlzIHNlcmlhbGl6YXRpb24gcGlwZWxpbmUuXG4gICAgICovXG4gICAgZnJlZSgpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3LmZyZWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIGEgY29tcGxldGUgcGh5c2ljcyBzdGF0ZSBpbnRvIGEgc2luZ2xlIGJ5dGUgYXJyYXkuXG4gICAgICogQHBhcmFtIGdyYXZpdHkgLSBUaGUgY3VycmVudCBncmF2aXR5IGFmZmVjdGluZyB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKiBAcGFyYW0gaW50ZWdyYXRpb25QYXJhbWV0ZXJzIC0gVGhlIGludGVncmF0aW9uIHBhcmFtZXRlcnMgb2YgdGhlIHNpbXVsYXRpb24uXG4gICAgICogQHBhcmFtIGJyb2FkUGhhc2UgLSBUaGUgYnJvYWQtcGhhc2Ugb2YgdGhlIHNpbXVsYXRpb24uXG4gICAgICogQHBhcmFtIG5hcnJvd1BoYXNlIC0gVGhlIG5hcnJvdy1waGFzZSBvZiB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKiBAcGFyYW0gYm9kaWVzIC0gVGhlIHJpZ2lkLWJvZGllcyB0YWtpbmcgcGFydCBpbnRvIHRoZSBzaW11bGF0aW9uLlxuICAgICAqIEBwYXJhbSBjb2xsaWRlcnMgLSBUaGUgY29sbGlkZXJzIHRha2luZyBwYXJ0IGludG8gdGhlIHNpbXVsYXRpb24uXG4gICAgICogQHBhcmFtIGltcHVsc2VKb2ludHMgLSBUaGUgaW1wdWxzZSBqb2ludHMgdGFraW5nIHBhcnQgaW50byB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKiBAcGFyYW0gbXVsdGlib2R5Sm9pbnRzIC0gVGhlIG11bHRpYm9keSBqb2ludHMgdGFraW5nIHBhcnQgaW50byB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKi9cbiAgICBzZXJpYWxpemVBbGwoZ3Jhdml0eSwgaW50ZWdyYXRpb25QYXJhbWV0ZXJzLCBpc2xhbmRzLCBicm9hZFBoYXNlLCBuYXJyb3dQaGFzZSwgYm9kaWVzLCBjb2xsaWRlcnMsIGltcHVsc2VKb2ludHMsIG11bHRpYm9keUpvaW50cykge1xuICAgICAgICBsZXQgcmF3R3JhID0gVmVjdG9yT3BzLmludG9SYXcoZ3Jhdml0eSk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMucmF3LnNlcmlhbGl6ZUFsbChyYXdHcmEsIGludGVncmF0aW9uUGFyYW1ldGVycy5yYXcsIGlzbGFuZHMucmF3LCBicm9hZFBoYXNlLnJhdywgbmFycm93UGhhc2UucmF3LCBib2RpZXMucmF3LCBjb2xsaWRlcnMucmF3LCBpbXB1bHNlSm9pbnRzLnJhdywgbXVsdGlib2R5Sm9pbnRzLnJhdyk7XG4gICAgICAgIHJhd0dyYS5mcmVlKCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIHRoZSBjb21wbGV0ZSBwaHlzaWNzIHN0YXRlIGZyb20gYSBzaW5nbGUgYnl0ZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGJ5dGUgYXJyYXkgdG8gZGVzZXJpYWxpemUuXG4gICAgICovXG4gICAgZGVzZXJpYWxpemVBbGwoZGF0YSkge1xuICAgICAgICByZXR1cm4gV29ybGQuZnJvbVJhdyh0aGlzLnJhdy5kZXNlcmlhbGl6ZUFsbChkYXRhKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXphdGlvbl9waXBlbGluZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/pipeline/world.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/pipeline/world.js ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"World\": () => (/* binding */ World)\n/* harmony export */ });\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/broad_phase.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js\");\n/* harmony import */ var _geometry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geometry */ \"./node_modules/@dimforge/rapier3d/geometry/collider_set.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/island_manager.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js\");\n/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dynamics */ \"./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../math */ \"./node_modules/@dimforge/rapier3d/math.js\");\n/* harmony import */ var _physics_pipeline__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./physics_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js\");\n/* harmony import */ var _query_pipeline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js\");\n/* harmony import */ var _serialization_pipeline__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./serialization_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js\");\n/* harmony import */ var _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./debug_render_pipeline */ \"./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js\");\n/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../control */ \"./node_modules/@dimforge/rapier3d/control/character_controller.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_dynamics__WEBPACK_IMPORTED_MODULE_0__, _dynamics__WEBPACK_IMPORTED_MODULE_1__, _geometry__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _dynamics__WEBPACK_IMPORTED_MODULE_4__, _geometry__WEBPACK_IMPORTED_MODULE_5__, _dynamics__WEBPACK_IMPORTED_MODULE_6__, _dynamics__WEBPACK_IMPORTED_MODULE_7__, _dynamics__WEBPACK_IMPORTED_MODULE_8__, _query_pipeline__WEBPACK_IMPORTED_MODULE_9__, _physics_pipeline__WEBPACK_IMPORTED_MODULE_10__, _serialization_pipeline__WEBPACK_IMPORTED_MODULE_11__, _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_12__, _math__WEBPACK_IMPORTED_MODULE_13__, _control__WEBPACK_IMPORTED_MODULE_14__]);\n([_dynamics__WEBPACK_IMPORTED_MODULE_0__, _dynamics__WEBPACK_IMPORTED_MODULE_1__, _geometry__WEBPACK_IMPORTED_MODULE_2__, _geometry__WEBPACK_IMPORTED_MODULE_3__, _dynamics__WEBPACK_IMPORTED_MODULE_4__, _geometry__WEBPACK_IMPORTED_MODULE_5__, _dynamics__WEBPACK_IMPORTED_MODULE_6__, _dynamics__WEBPACK_IMPORTED_MODULE_7__, _dynamics__WEBPACK_IMPORTED_MODULE_8__, _query_pipeline__WEBPACK_IMPORTED_MODULE_9__, _physics_pipeline__WEBPACK_IMPORTED_MODULE_10__, _serialization_pipeline__WEBPACK_IMPORTED_MODULE_11__, _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_12__, _math__WEBPACK_IMPORTED_MODULE_13__, _control__WEBPACK_IMPORTED_MODULE_14__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n/**\n * The physics world.\n *\n * This contains all the data-structures necessary for creating and simulating\n * bodies with contacts, joints, and external forces.\n */\nclass World {\n    constructor(gravity, rawIntegrationParameters, rawIslands, rawBroadPhase, rawNarrowPhase, rawBodies, rawColliders, rawImpulseJoints, rawMultibodyJoints, rawCCDSolver, rawQueryPipeline, rawPhysicsPipeline, rawSerializationPipeline, rawDebugRenderPipeline) {\n        this.gravity = gravity;\n        this.integrationParameters = new _dynamics__WEBPACK_IMPORTED_MODULE_0__.IntegrationParameters(rawIntegrationParameters);\n        this.islands = new _dynamics__WEBPACK_IMPORTED_MODULE_1__.IslandManager(rawIslands);\n        this.broadPhase = new _geometry__WEBPACK_IMPORTED_MODULE_2__.BroadPhase(rawBroadPhase);\n        this.narrowPhase = new _geometry__WEBPACK_IMPORTED_MODULE_3__.NarrowPhase(rawNarrowPhase);\n        this.bodies = new _dynamics__WEBPACK_IMPORTED_MODULE_4__.RigidBodySet(rawBodies);\n        this.colliders = new _geometry__WEBPACK_IMPORTED_MODULE_5__.ColliderSet(rawColliders);\n        this.impulseJoints = new _dynamics__WEBPACK_IMPORTED_MODULE_6__.ImpulseJointSet(rawImpulseJoints);\n        this.multibodyJoints = new _dynamics__WEBPACK_IMPORTED_MODULE_7__.MultibodyJointSet(rawMultibodyJoints);\n        this.ccdSolver = new _dynamics__WEBPACK_IMPORTED_MODULE_8__.CCDSolver(rawCCDSolver);\n        this.queryPipeline = new _query_pipeline__WEBPACK_IMPORTED_MODULE_9__.QueryPipeline(rawQueryPipeline);\n        this.physicsPipeline = new _physics_pipeline__WEBPACK_IMPORTED_MODULE_10__.PhysicsPipeline(rawPhysicsPipeline);\n        this.serializationPipeline = new _serialization_pipeline__WEBPACK_IMPORTED_MODULE_11__.SerializationPipeline(rawSerializationPipeline);\n        this.debugRenderPipeline = new _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_12__.DebugRenderPipeline(rawDebugRenderPipeline);\n        this.characterControllers = new Set();\n        this.impulseJoints.finalizeDeserialization(this.bodies);\n        this.bodies.finalizeDeserialization(this.colliders);\n        this.colliders.finalizeDeserialization(this.bodies);\n    }\n    /**\n     * Release the WASM memory occupied by this physics world.\n     *\n     * All the fields of this physics world will be freed as well,\n     * so there is no need to call their `.free()` methods individually.\n     */\n    free() {\n        this.integrationParameters.free();\n        this.islands.free();\n        this.broadPhase.free();\n        this.narrowPhase.free();\n        this.bodies.free();\n        this.colliders.free();\n        this.impulseJoints.free();\n        this.multibodyJoints.free();\n        this.ccdSolver.free();\n        this.queryPipeline.free();\n        this.physicsPipeline.free();\n        this.serializationPipeline.free();\n        this.debugRenderPipeline.free();\n        this.characterControllers.forEach((controller) => controller.free());\n        this.integrationParameters = undefined;\n        this.islands = undefined;\n        this.broadPhase = undefined;\n        this.narrowPhase = undefined;\n        this.bodies = undefined;\n        this.colliders = undefined;\n        this.ccdSolver = undefined;\n        this.impulseJoints = undefined;\n        this.multibodyJoints = undefined;\n        this.queryPipeline = undefined;\n        this.physicsPipeline = undefined;\n        this.serializationPipeline = undefined;\n        this.debugRenderPipeline = undefined;\n        this.characterControllers = undefined;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        return new World(_math__WEBPACK_IMPORTED_MODULE_13__.VectorOps.fromRaw(raw.takeGravity()), raw.takeIntegrationParameters(), raw.takeIslandManager(), raw.takeBroadPhase(), raw.takeNarrowPhase(), raw.takeBodies(), raw.takeColliders(), raw.takeImpulseJoints(), raw.takeMultibodyJoints());\n    }\n    /**\n     * Takes a snapshot of this world.\n     *\n     * Use `World.restoreSnapshot` to create a new physics world with a state identical to\n     * the state when `.takeSnapshot()` is called.\n     */\n    takeSnapshot() {\n        return this.serializationPipeline.serializeAll(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints);\n    }\n    /**\n     * Creates a new physics world from a snapshot.\n     *\n     * This new physics world will be an identical copy of the snapshoted physics world.\n     */\n    static restoreSnapshot(data) {\n        let deser = new _serialization_pipeline__WEBPACK_IMPORTED_MODULE_11__.SerializationPipeline();\n        return deser.deserializeAll(data);\n    }\n    /**\n     * Computes all the lines (and their colors) needed to render the scene.\n     */\n    debugRender() {\n        this.debugRenderPipeline.render(this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.narrowPhase);\n        return new _debug_render_pipeline__WEBPACK_IMPORTED_MODULE_12__.DebugRenderBuffers(this.debugRenderPipeline.vertices, this.debugRenderPipeline.colors);\n    }\n    /**\n     * Advance the simulation by one time step.\n     *\n     * All events generated by the physics engine are ignored.\n     *\n     * @param EventQueue - (optional) structure responsible for collecting\n     *   events generated by the physics engine.\n     */\n    step(eventQueue, hooks) {\n        this.physicsPipeline.step(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.ccdSolver, eventQueue, hooks);\n        this.queryPipeline.update(this.bodies, this.colliders);\n    }\n    /**\n     * Update colliders positions after rigid-bodies moved.\n     *\n     * When a rigid-body moves, the positions of the colliders attached to it need to be updated. This update is\n     * generally automatically done at the beginning and the end of each simulation step with World.step.\n     * If the positions need to be updated without running a simulation step this method can be called manually.\n     */\n    propagateModifiedBodyPositionsToColliders() {\n        this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw);\n    }\n    /**\n     * Ensure subsequent scene queries take into account the collider positions set before this method is called.\n     *\n     * This does not step the physics simulation forward.\n     */\n    updateSceneQueries() {\n        this.propagateModifiedBodyPositionsToColliders();\n        this.queryPipeline.update(this.bodies, this.colliders);\n    }\n    /**\n     * The current simulation timestep.\n     */\n    get timestep() {\n        return this.integrationParameters.dt;\n    }\n    /**\n     * Sets the new simulation timestep.\n     *\n     * The simulation timestep governs by how much the physics state of the world will\n     * be integrated. A simulation timestep should:\n     * - be as small as possible. Typical values evolve around 0.016 (assuming the chosen unit is milliseconds,\n     * corresponds to the time between two frames of a game running at 60FPS).\n     * - not vary too much during the course of the simulation. A timestep with large variations may\n     * cause instabilities in the simulation.\n     *\n     * @param dt - The timestep length, in seconds.\n     */\n    set timestep(dt) {\n        this.integrationParameters.dt = dt;\n    }\n    /**\n     * The maximum velocity iterations the velocity-based force constraint solver can make.\n     */\n    get maxVelocityIterations() {\n        return this.integrationParameters.maxVelocityIterations;\n    }\n    /**\n     * Sets the maximum number of velocity iterations (default: 4).\n     *\n     * The greater this value is, the most rigid and realistic the physics simulation will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new maximum number of velocity iterations.\n     */\n    set maxVelocityIterations(niter) {\n        this.integrationParameters.maxVelocityIterations = niter;\n    }\n    /**\n     * The maximum velocity iterations the velocity-based friction constraint solver can make.\n     */\n    get maxVelocityFrictionIterations() {\n        return this.integrationParameters.maxVelocityFrictionIterations;\n    }\n    /**\n     * Sets the maximum number of velocity iterations for friction (default: 8).\n     *\n     * The greater this value is, the most realistic friction will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new maximum number of velocity iterations.\n     */\n    set maxVelocityFrictionIterations(niter) {\n        this.integrationParameters.maxVelocityFrictionIterations = niter;\n    }\n    /**\n     * The maximum velocity iterations the velocity-based constraint solver can make to attempt to remove\n     * the energy introduced by constraint stabilization.\n     */\n    get maxStabilizationIterations() {\n        return this.integrationParameters.maxStabilizationIterations;\n    }\n    /**\n     * Sets the maximum number of velocity iterations for stabilization (default: 1).\n     *\n     * @param niter - The new maximum number of velocity iterations.\n     */\n    set maxStabilizationIterations(niter) {\n        this.integrationParameters.maxStabilizationIterations = niter;\n    }\n    /**\n     * Creates a new rigid-body from the given rigd-body descriptior.\n     *\n     * @param body - The description of the rigid-body to create.\n     */\n    createRigidBody(body) {\n        return this.bodies.createRigidBody(this.colliders, body);\n    }\n    /**\n     * Creates a new character controller.\n     *\n     * @param offset - The artificial gap added between the character’s chape and its environment.\n     */\n    createCharacterController(offset) {\n        let controller = new _control__WEBPACK_IMPORTED_MODULE_14__.KinematicCharacterController(offset, this.integrationParameters, this.bodies, this.colliders, this.queryPipeline);\n        this.characterControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a character controller from this world.\n     *\n     * @param controller - The character controller to remove.\n     */\n    removeCharacterController(controller) {\n        this.characterControllers.delete(controller);\n        controller.free();\n    }\n    /**\n     * Creates a new collider.\n     *\n     * @param desc - The description of the collider.\n     * @param parent - The rigid-body this collider is attached to.\n     */\n    createCollider(desc, parent) {\n        let parentHandle = parent ? parent.handle : undefined;\n        return this.colliders.createCollider(this.bodies, desc, parentHandle);\n    }\n    /**\n     * Creates a new impulse joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createImpulseJoint(params, parent1, parent2, wakeUp) {\n        return this.impulseJoints.createJoint(this.bodies, params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Creates a new multibody joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createMultibodyJoint(params, parent1, parent2, wakeUp) {\n        return this.multibodyJoints.createJoint(params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Retrieves a rigid-body from its handle.\n     *\n     * @param handle - The integer handle of the rigid-body to retrieve.\n     */\n    getRigidBody(handle) {\n        return this.bodies.get(handle);\n    }\n    /**\n     * Retrieves a collider from its handle.\n     *\n     * @param handle - The integer handle of the collider to retrieve.\n     */\n    getCollider(handle) {\n        return this.colliders.get(handle);\n    }\n    /**\n     * Retrieves an impulse joint from its handle.\n     *\n     * @param handle - The integer handle of the impulse joint to retrieve.\n     */\n    getImpulseJoint(handle) {\n        return this.impulseJoints.get(handle);\n    }\n    /**\n     * Retrieves an multibody joint from its handle.\n     *\n     * @param handle - The integer handle of the multibody joint to retrieve.\n     */\n    getMultibodyJoint(handle) {\n        return this.multibodyJoints.get(handle);\n    }\n    /**\n     * Removes the given rigid-body from this physics world.\n     *\n     * This will remove this rigid-body as well as all its attached colliders and joints.\n     * Every other bodies touching or attached by joints to this rigid-body will be woken-up.\n     *\n     * @param body - The rigid-body to remove.\n     */\n    removeRigidBody(body) {\n        if (this.bodies) {\n            this.bodies.remove(body.handle, this.islands, this.colliders, this.impulseJoints, this.multibodyJoints);\n        }\n    }\n    /**\n     * Removes the given collider from this physics world.\n     *\n     * @param collider - The collider to remove.\n     * @param wakeUp - If set to `true`, the rigid-body this collider is attached to will be awaken.\n     */\n    removeCollider(collider, wakeUp) {\n        if (this.colliders) {\n            this.colliders.remove(collider.handle, this.islands, this.bodies, wakeUp);\n        }\n    }\n    /**\n     * Removes the given impulse joint from this physics world.\n     *\n     * @param joint - The impulse joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeImpulseJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.impulseJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Removes the given multibody joint from this physics world.\n     *\n     * @param joint - The multibody joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeMultibodyJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.multibodyJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Applies the given closure to each collider managed by this physics world.\n     *\n     * @param f(collider) - The function to apply to each collider managed by this physics world. Called as `f(collider)`.\n     */\n    forEachCollider(f) {\n        this.colliders.forEach(f);\n    }\n    /**\n     * Applies the given closure to each rigid-body managed by this physics world.\n     *\n     * @param f(body) - The function to apply to each rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachRigidBody(f) {\n        this.bodies.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-body managed by this physics world.\n     *\n     * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n     * the physics engine in order to save computational power. A sleeping rigid-body never moves\n     * unless it is moved manually by the user.\n     *\n     * @param f - The function to apply to each active rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachActiveRigidBody(f) {\n        this.bodies.forEachActiveRigidBody(this.islands, f);\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRay(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRayAndGetNormal(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithRay(this.bodies, this.colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let handle = this.queryPipeline.intersectionWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n        return handle != null ? this.colliders.get(handle) : null;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPoint(this.bodies, this.colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPointAndGetFeature(this.bodies, this.colliders, point, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithPoint(this.bodies, this.colliders, point, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exist that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(shapePos, shapeRot, shapeVel, shape, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castShape(this.bodies, this.colliders, shapePos, shapeRot, shapeVel, shape, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        this.queryPipeline.collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, this.colliders.castClosure(callback));\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactsWith(collider1, f) {\n        this.narrowPhase.contactsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionsWith(collider1, f) {\n        this.narrowPhase.intersectionsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        this.narrowPhase.contactPair(collider1.handle, collider2.handle, f);\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.narrowPhase.intersectionPair(collider1.handle, collider2.handle);\n    }\n}\n//# sourceMappingURL=world.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/pipeline/world.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/rapier.js":
/*!***************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/rapier.js ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveCollisionTypes\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ActiveCollisionTypes),\n/* harmony export */   \"ActiveEvents\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ActiveEvents),\n/* harmony export */   \"ActiveHooks\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ActiveHooks),\n/* harmony export */   \"Ball\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Ball),\n/* harmony export */   \"BroadPhase\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.BroadPhase),\n/* harmony export */   \"CCDSolver\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.CCDSolver),\n/* harmony export */   \"Capsule\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Capsule),\n/* harmony export */   \"CharacterCollision\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.CharacterCollision),\n/* harmony export */   \"CoefficientCombineRule\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.CoefficientCombineRule),\n/* harmony export */   \"Collider\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Collider),\n/* harmony export */   \"ColliderDesc\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ColliderDesc),\n/* harmony export */   \"ColliderSet\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ColliderSet),\n/* harmony export */   \"Cone\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Cone),\n/* harmony export */   \"ConvexPolyhedron\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ConvexPolyhedron),\n/* harmony export */   \"Cuboid\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Cuboid),\n/* harmony export */   \"Cylinder\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Cylinder),\n/* harmony export */   \"DebugRenderBuffers\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.DebugRenderBuffers),\n/* harmony export */   \"DebugRenderPipeline\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.DebugRenderPipeline),\n/* harmony export */   \"EventQueue\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.EventQueue),\n/* harmony export */   \"FeatureType\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.FeatureType),\n/* harmony export */   \"FixedImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.FixedImpulseJoint),\n/* harmony export */   \"FixedMultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.FixedMultibodyJoint),\n/* harmony export */   \"HalfSpace\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.HalfSpace),\n/* harmony export */   \"Heightfield\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Heightfield),\n/* harmony export */   \"ImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ImpulseJoint),\n/* harmony export */   \"ImpulseJointSet\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ImpulseJointSet),\n/* harmony export */   \"IntegrationParameters\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.IntegrationParameters),\n/* harmony export */   \"IslandManager\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.IslandManager),\n/* harmony export */   \"JointData\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.JointData),\n/* harmony export */   \"JointType\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.JointType),\n/* harmony export */   \"KinematicCharacterController\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.KinematicCharacterController),\n/* harmony export */   \"MassPropsMode\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.MassPropsMode),\n/* harmony export */   \"MotorModel\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.MotorModel),\n/* harmony export */   \"MultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.MultibodyJoint),\n/* harmony export */   \"MultibodyJointSet\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.MultibodyJointSet),\n/* harmony export */   \"NarrowPhase\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.NarrowPhase),\n/* harmony export */   \"PhysicsPipeline\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.PhysicsPipeline),\n/* harmony export */   \"PointColliderProjection\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.PointColliderProjection),\n/* harmony export */   \"PointProjection\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.PointProjection),\n/* harmony export */   \"Polyline\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Polyline),\n/* harmony export */   \"PrismaticImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.PrismaticImpulseJoint),\n/* harmony export */   \"PrismaticMultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.PrismaticMultibodyJoint),\n/* harmony export */   \"Quaternion\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Quaternion),\n/* harmony export */   \"QueryFilterFlags\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.QueryFilterFlags),\n/* harmony export */   \"QueryPipeline\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.QueryPipeline),\n/* harmony export */   \"Ray\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Ray),\n/* harmony export */   \"RayColliderIntersection\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RayColliderIntersection),\n/* harmony export */   \"RayColliderToi\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RayColliderToi),\n/* harmony export */   \"RayIntersection\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RayIntersection),\n/* harmony export */   \"RevoluteImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RevoluteImpulseJoint),\n/* harmony export */   \"RevoluteMultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RevoluteMultibodyJoint),\n/* harmony export */   \"RigidBody\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RigidBody),\n/* harmony export */   \"RigidBodyDesc\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RigidBodyDesc),\n/* harmony export */   \"RigidBodySet\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RigidBodySet),\n/* harmony export */   \"RigidBodyType\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RigidBodyType),\n/* harmony export */   \"RotationOps\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RotationOps),\n/* harmony export */   \"RoundCone\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RoundCone),\n/* harmony export */   \"RoundConvexPolyhedron\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RoundConvexPolyhedron),\n/* harmony export */   \"RoundCuboid\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RoundCuboid),\n/* harmony export */   \"RoundCylinder\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RoundCylinder),\n/* harmony export */   \"RoundTriangle\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.RoundTriangle),\n/* harmony export */   \"SdpMatrix3\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SdpMatrix3),\n/* harmony export */   \"SdpMatrix3Ops\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SdpMatrix3Ops),\n/* harmony export */   \"Segment\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Segment),\n/* harmony export */   \"SerializationPipeline\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SerializationPipeline),\n/* harmony export */   \"Shape\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Shape),\n/* harmony export */   \"ShapeColliderTOI\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ShapeColliderTOI),\n/* harmony export */   \"ShapeContact\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ShapeContact),\n/* harmony export */   \"ShapeTOI\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ShapeTOI),\n/* harmony export */   \"ShapeType\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ShapeType),\n/* harmony export */   \"SolverFlags\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SolverFlags),\n/* harmony export */   \"SphericalImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SphericalImpulseJoint),\n/* harmony export */   \"SphericalMultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.SphericalMultibodyJoint),\n/* harmony export */   \"TempContactForceEvent\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.TempContactForceEvent),\n/* harmony export */   \"TempContactManifold\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.TempContactManifold),\n/* harmony export */   \"TriMesh\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.TriMesh),\n/* harmony export */   \"Triangle\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Triangle),\n/* harmony export */   \"UnitImpulseJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.UnitImpulseJoint),\n/* harmony export */   \"UnitMultibodyJoint\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.UnitMultibodyJoint),\n/* harmony export */   \"Vector3\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Vector3),\n/* harmony export */   \"VectorOps\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.VectorOps),\n/* harmony export */   \"World\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"version\": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.version)\n/* harmony export */ });\n/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exports */ \"./node_modules/@dimforge/rapier3d/exports.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_exports__WEBPACK_IMPORTED_MODULE_0__]);\n_exports__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_exports__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceMappingURL=rapier.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRpbWZvcmdlL3JhcGllcjNkL3JhcGllci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ1Y7QUFDMUIsaUVBQWUscUNBQU0sRUFBQztBQUN0QixrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hjaS01MjUtZ3JvdXAtcHJvamVjdC12Mi8uL25vZGVfbW9kdWxlcy9AZGltZm9yZ2UvcmFwaWVyM2QvcmFwaWVyLmpzPzhjNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUkFQSUVSIGZyb20gXCIuL2V4cG9ydHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V4cG9ydHNcIjtcbmV4cG9ydCBkZWZhdWx0IFJBUElFUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhcGllci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/rapier.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RawBroadPhase\": () => (/* binding */ RawBroadPhase),\n/* harmony export */   \"RawCCDSolver\": () => (/* binding */ RawCCDSolver),\n/* harmony export */   \"RawCharacterCollision\": () => (/* binding */ RawCharacterCollision),\n/* harmony export */   \"RawColliderSet\": () => (/* binding */ RawColliderSet),\n/* harmony export */   \"RawContactForceEvent\": () => (/* binding */ RawContactForceEvent),\n/* harmony export */   \"RawContactManifold\": () => (/* binding */ RawContactManifold),\n/* harmony export */   \"RawContactPair\": () => (/* binding */ RawContactPair),\n/* harmony export */   \"RawDebugRenderPipeline\": () => (/* binding */ RawDebugRenderPipeline),\n/* harmony export */   \"RawDeserializedWorld\": () => (/* binding */ RawDeserializedWorld),\n/* harmony export */   \"RawEventQueue\": () => (/* binding */ RawEventQueue),\n/* harmony export */   \"RawFeatureType\": () => (/* binding */ RawFeatureType),\n/* harmony export */   \"RawGenericJoint\": () => (/* binding */ RawGenericJoint),\n/* harmony export */   \"RawImpulseJointSet\": () => (/* binding */ RawImpulseJointSet),\n/* harmony export */   \"RawIntegrationParameters\": () => (/* binding */ RawIntegrationParameters),\n/* harmony export */   \"RawIslandManager\": () => (/* binding */ RawIslandManager),\n/* harmony export */   \"RawJointAxis\": () => (/* binding */ RawJointAxis),\n/* harmony export */   \"RawJointType\": () => (/* binding */ RawJointType),\n/* harmony export */   \"RawKinematicCharacterController\": () => (/* binding */ RawKinematicCharacterController),\n/* harmony export */   \"RawMotorModel\": () => (/* binding */ RawMotorModel),\n/* harmony export */   \"RawMultibodyJointSet\": () => (/* binding */ RawMultibodyJointSet),\n/* harmony export */   \"RawNarrowPhase\": () => (/* binding */ RawNarrowPhase),\n/* harmony export */   \"RawPhysicsPipeline\": () => (/* binding */ RawPhysicsPipeline),\n/* harmony export */   \"RawPointColliderProjection\": () => (/* binding */ RawPointColliderProjection),\n/* harmony export */   \"RawPointProjection\": () => (/* binding */ RawPointProjection),\n/* harmony export */   \"RawQueryPipeline\": () => (/* binding */ RawQueryPipeline),\n/* harmony export */   \"RawRayColliderIntersection\": () => (/* binding */ RawRayColliderIntersection),\n/* harmony export */   \"RawRayColliderToi\": () => (/* binding */ RawRayColliderToi),\n/* harmony export */   \"RawRayIntersection\": () => (/* binding */ RawRayIntersection),\n/* harmony export */   \"RawRigidBodySet\": () => (/* binding */ RawRigidBodySet),\n/* harmony export */   \"RawRigidBodyType\": () => (/* binding */ RawRigidBodyType),\n/* harmony export */   \"RawRotation\": () => (/* binding */ RawRotation),\n/* harmony export */   \"RawSdpMatrix3\": () => (/* binding */ RawSdpMatrix3),\n/* harmony export */   \"RawSerializationPipeline\": () => (/* binding */ RawSerializationPipeline),\n/* harmony export */   \"RawShape\": () => (/* binding */ RawShape),\n/* harmony export */   \"RawShapeColliderTOI\": () => (/* binding */ RawShapeColliderTOI),\n/* harmony export */   \"RawShapeContact\": () => (/* binding */ RawShapeContact),\n/* harmony export */   \"RawShapeTOI\": () => (/* binding */ RawShapeTOI),\n/* harmony export */   \"RawShapeType\": () => (/* binding */ RawShapeType),\n/* harmony export */   \"RawVector\": () => (/* binding */ RawVector),\n/* harmony export */   \"__wbg_bind_10dfe70e95d2a480\": () => (/* binding */ __wbg_bind_10dfe70e95d2a480),\n/* harmony export */   \"__wbg_buffer_3f3d764d4747d564\": () => (/* binding */ __wbg_buffer_3f3d764d4747d564),\n/* harmony export */   \"__wbg_call_168da88779e35f61\": () => (/* binding */ __wbg_call_168da88779e35f61),\n/* harmony export */   \"__wbg_call_3999bee59e9f7719\": () => (/* binding */ __wbg_call_3999bee59e9f7719),\n/* harmony export */   \"__wbg_call_e1f72c051cdab859\": () => (/* binding */ __wbg_call_e1f72c051cdab859),\n/* harmony export */   \"__wbg_length_9a2deed95d22668d\": () => (/* binding */ __wbg_length_9a2deed95d22668d),\n/* harmony export */   \"__wbg_length_9e1ae1900cb0fbd5\": () => (/* binding */ __wbg_length_9e1ae1900cb0fbd5),\n/* harmony export */   \"__wbg_new_8c3f0052272a457a\": () => (/* binding */ __wbg_new_8c3f0052272a457a),\n/* harmony export */   \"__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4\": () => (/* binding */ __wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4),\n/* harmony export */   \"__wbg_newwithbyteoffsetandlength_d9aa266703cb98be\": () => (/* binding */ __wbg_newwithbyteoffsetandlength_d9aa266703cb98be),\n/* harmony export */   \"__wbg_newwithlength_a7168e4a1e8f5e12\": () => (/* binding */ __wbg_newwithlength_a7168e4a1e8f5e12),\n/* harmony export */   \"__wbg_rawcontactforceevent_new\": () => (/* binding */ __wbg_rawcontactforceevent_new),\n/* harmony export */   \"__wbg_rawraycolliderintersection_new\": () => (/* binding */ __wbg_rawraycolliderintersection_new),\n/* harmony export */   \"__wbg_set_0e0314cf6675c1b9\": () => (/* binding */ __wbg_set_0e0314cf6675c1b9),\n/* harmony export */   \"__wbg_set_83db9690f9353e79\": () => (/* binding */ __wbg_set_83db9690f9353e79),\n/* harmony export */   \"__wbindgen_boolean_get\": () => (/* binding */ __wbindgen_boolean_get),\n/* harmony export */   \"__wbindgen_is_function\": () => (/* binding */ __wbindgen_is_function),\n/* harmony export */   \"__wbindgen_memory\": () => (/* binding */ __wbindgen_memory),\n/* harmony export */   \"__wbindgen_number_get\": () => (/* binding */ __wbindgen_number_get),\n/* harmony export */   \"__wbindgen_number_new\": () => (/* binding */ __wbindgen_number_new),\n/* harmony export */   \"__wbindgen_object_drop_ref\": () => (/* binding */ __wbindgen_object_drop_ref),\n/* harmony export */   \"__wbindgen_throw\": () => (/* binding */ __wbindgen_throw),\n/* harmony export */   \"version\": () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rapier_wasm3d_bg.wasm */ \"./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.wasm\");\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @returns {string}\n*/\nfunction version() {\n    try {\n        const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.version(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n    }\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachedFloat32Memory0 = new Float32Array();\n\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    return getFloat32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedUint32Memory0 = new Uint32Array();\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(_rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n*/\nconst RawJointType = Object.freeze({ Revolute:0,\"0\":\"Revolute\",Fixed:1,\"1\":\"Fixed\",Prismatic:2,\"2\":\"Prismatic\",Spherical:3,\"3\":\"Spherical\",Generic:4,\"4\":\"Generic\", });\n/**\n*/\nconst RawMotorModel = Object.freeze({ AccelerationBased:0,\"0\":\"AccelerationBased\",ForceBased:1,\"1\":\"ForceBased\", });\n/**\n*/\nconst RawJointAxis = Object.freeze({ X:0,\"0\":\"X\",Y:1,\"1\":\"Y\",Z:2,\"2\":\"Z\",AngX:3,\"3\":\"AngX\",AngY:4,\"4\":\"AngY\",AngZ:5,\"5\":\"AngZ\", });\n/**\n*/\nconst RawRigidBodyType = Object.freeze({ Dynamic:0,\"0\":\"Dynamic\",Fixed:1,\"1\":\"Fixed\",KinematicPositionBased:2,\"2\":\"KinematicPositionBased\",KinematicVelocityBased:3,\"3\":\"KinematicVelocityBased\", });\n/**\n*/\nconst RawFeatureType = Object.freeze({ Vertex:0,\"0\":\"Vertex\",Edge:1,\"1\":\"Edge\",Face:2,\"2\":\"Face\",Unknown:3,\"3\":\"Unknown\", });\n/**\n*/\nconst RawShapeType = Object.freeze({ Ball:0,\"0\":\"Ball\",Cuboid:1,\"1\":\"Cuboid\",Capsule:2,\"2\":\"Capsule\",Segment:3,\"3\":\"Segment\",Polyline:4,\"4\":\"Polyline\",Triangle:5,\"5\":\"Triangle\",TriMesh:6,\"6\":\"TriMesh\",HeightField:7,\"7\":\"HeightField\",Compound:8,\"8\":\"Compound\",ConvexPolyhedron:9,\"9\":\"ConvexPolyhedron\",Cylinder:10,\"10\":\"Cylinder\",Cone:11,\"11\":\"Cone\",RoundCuboid:12,\"12\":\"RoundCuboid\",RoundTriangle:13,\"13\":\"RoundTriangle\",RoundCylinder:14,\"14\":\"RoundCylinder\",RoundCone:15,\"15\":\"RoundCone\",RoundConvexPolyhedron:16,\"16\":\"RoundConvexPolyhedron\",HalfSpace:17,\"17\":\"HalfSpace\", });\n/**\n*/\nclass RawBroadPhase {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawBroadPhase.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawbroadphase_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawbroadphase_new();\n        return RawBroadPhase.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawCCDSolver {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawCCDSolver.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawccdsolver_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawccdsolver_new();\n        return RawCCDSolver.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawCharacterCollision {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawCharacterCollision.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawcharactercollision_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_new();\n        return RawCharacterCollision.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    handle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_handle(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    translationApplied() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_translationApplied(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    translationRemaining() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_translationRemaining(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    worldWitness1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldWitness1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    worldWitness2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldWitness2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    worldNormal1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldNormal1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    worldNormal2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldNormal2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawColliderSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawColliderSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawcolliderset_free(ptr);\n    }\n    /**\n    * The world-space translation of this collider.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    coTranslation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coTranslation(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The world-space orientation of this collider.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    coRotation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coRotation(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * Sets the translation of this collider.\n    *\n    * # Parameters\n    * - `x`: the world-space position of the collider along the `x` axis.\n    * - `y`: the world-space position of the collider along the `y` axis.\n    * - `z`: the world-space position of the collider along the `z` axis.\n    * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n    * wasn't moving before modifying its position.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    */\n    coSetTranslation(handle, x, y, z) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetTranslation(this.ptr, handle, x, y, z);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    */\n    coSetTranslationWrtParent(handle, x, y, z) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetTranslationWrtParent(this.ptr, handle, x, y, z);\n    }\n    /**\n    * Sets the rotation quaternion of this collider.\n    *\n    * This does nothing if a zero quaternion is provided.\n    *\n    * # Parameters\n    * - `x`: the first vector component of the quaternion.\n    * - `y`: the second vector component of the quaternion.\n    * - `z`: the third vector component of the quaternion.\n    * - `w`: the scalar component of the quaternion.\n    * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n    * wasn't moving before modifying its position.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {number} w\n    */\n    coSetRotation(handle, x, y, z, w) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRotation(this.ptr, handle, x, y, z, w);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {number} w\n    */\n    coSetRotationWrtParent(handle, x, y, z, w) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRotationWrtParent(this.ptr, handle, x, y, z, w);\n    }\n    /**\n    * Is this collider a sensor?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    coIsSensor(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coIsSensor(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * The type of the shape of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coShapeType(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coShapeType(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} handle\n    * @returns {RawVector | undefined}\n    */\n    coHalfspaceNormal(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHalfspaceNormal(this.ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * The half-extents of this collider if it is has a cuboid shape.\n    * @param {number} handle\n    * @returns {RawVector | undefined}\n    */\n    coHalfExtents(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHalfExtents(this.ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * Set the half-extents of this collider if it has a cuboid shape.\n    * @param {number} handle\n    * @param {RawVector} newHalfExtents\n    */\n    coSetHalfExtents(handle, newHalfExtents) {\n        _assertClass(newHalfExtents, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetHalfExtents(this.ptr, handle, newHalfExtents.ptr);\n    }\n    /**\n    * The radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coRadius(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coRadius(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Set the radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n    * @param {number} handle\n    * @param {number} newRadius\n    */\n    coSetRadius(handle, newRadius) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRadius(this.ptr, handle, newRadius);\n    }\n    /**\n    * The half height of this collider if it is a capsule, cylinder, or cone shape.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coHalfHeight(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHalfHeight(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Set the half height of this collider if it is a capsule, cylinder, or cone shape.\n    * @param {number} handle\n    * @param {number} newHalfheight\n    */\n    coSetHalfHeight(handle, newHalfheight) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetHalfHeight(this.ptr, handle, newHalfheight);\n    }\n    /**\n    * The radius of the round edges of this collider.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coRoundRadius(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coRoundRadius(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Set the radius of the round edges of this collider.\n    * @param {number} handle\n    * @param {number} newBorderRadius\n    */\n    coSetRoundRadius(handle, newBorderRadius) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRoundRadius(this.ptr, handle, newBorderRadius);\n    }\n    /**\n    * The vertices of this triangle mesh, polyline, convex polyhedron, segment, triangle or convex polyhedron, if it is one.\n    * @param {number} handle\n    * @returns {Float32Array | undefined}\n    */\n    coVertices(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coVertices(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayF32FromWasm0(r0, r1).slice();\n                _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            }\n            return v0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The indices of this triangle mesh, polyline, or convex polyhedron, if it is one.\n    * @param {number} handle\n    * @returns {Uint32Array | undefined}\n    */\n    coIndices(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coIndices(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU32FromWasm0(r0, r1).slice();\n                _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            }\n            return v0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The height of this heightfield if it is one.\n    * @param {number} handle\n    * @returns {Float32Array | undefined}\n    */\n    coHeightfieldHeights(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHeightfieldHeights(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayF32FromWasm0(r0, r1).slice();\n                _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            }\n            return v0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The scaling factor applied of this heightfield if it is one.\n    * @param {number} handle\n    * @returns {RawVector | undefined}\n    */\n    coHeightfieldScale(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHeightfieldScale(this.ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * The number of rows on this heightfield's height matrix, if it is one.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coHeightfieldNRows(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHeightfieldNRows(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The number of columns on this heightfield's height matrix, if it is one.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coHeightfieldNCols(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coHeightfieldNCols(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The unique integer identifier of the collider this collider is attached to.\n    * @param {number} handle\n    * @returns {number | undefined}\n    */\n    coParent(handle) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coParent(retptr, this.ptr, handle);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r2 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} enabled\n    */\n    coSetEnabled(handle, enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetEnabled(this.ptr, handle, enabled);\n    }\n    /**\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    coIsEnabled(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coIsEnabled(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * The friction coefficient of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coFriction(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coFriction(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The restitution coefficient of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coRestitution(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coRestitution(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The density of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coDensity(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coDensity(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The mass of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coMass(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coMass(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The volume of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coVolume(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coVolume(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The collision groups of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coCollisionGroups(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coCollisionGroups(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The solver groups of this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coSolverGroups(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSolverGroups(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The physics hooks enabled for this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coActiveHooks(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coActiveHooks(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The collision types enabled for this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coActiveCollisionTypes(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coActiveCollisionTypes(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The events enabled for this collider.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coActiveEvents(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coActiveEvents(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The total force magnitude beyond which a contact force event can be emitted.\n    * @param {number} handle\n    * @returns {number}\n    */\n    coContactForceEventThreshold(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coContactForceEventThreshold(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} point\n    * @returns {boolean}\n    */\n    coContainsPoint(handle, point) {\n        _assertClass(point, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coContainsPoint(this.ptr, handle, point.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} colliderVel\n    * @param {RawShape} shape2\n    * @param {RawVector} shape2Pos\n    * @param {RawRotation} shape2Rot\n    * @param {RawVector} shape2Vel\n    * @param {number} maxToi\n    * @param {boolean} stop_at_penetration\n    * @returns {RawShapeTOI | undefined}\n    */\n    coCastShape(handle, colliderVel, shape2, shape2Pos, shape2Rot, shape2Vel, maxToi, stop_at_penetration) {\n        _assertClass(colliderVel, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shape2Pos, RawVector);\n        _assertClass(shape2Rot, RawRotation);\n        _assertClass(shape2Vel, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coCastShape(this.ptr, handle, colliderVel.ptr, shape2.ptr, shape2Pos.ptr, shape2Rot.ptr, shape2Vel.ptr, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeTOI.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} collider1Vel\n    * @param {number} collider2handle\n    * @param {RawVector} collider2Vel\n    * @param {number} max_toi\n    * @param {boolean} stop_at_penetration\n    * @returns {RawShapeColliderTOI | undefined}\n    */\n    coCastCollider(handle, collider1Vel, collider2handle, collider2Vel, max_toi, stop_at_penetration) {\n        _assertClass(collider1Vel, RawVector);\n        _assertClass(collider2Vel, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coCastCollider(this.ptr, handle, collider1Vel.ptr, collider2handle, collider2Vel.ptr, max_toi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeColliderTOI.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawShape} shape2\n    * @param {RawVector} shapePos2\n    * @param {RawRotation} shapeRot2\n    * @returns {boolean}\n    */\n    coIntersectsShape(handle, shape2, shapePos2, shapeRot2) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coIntersectsShape(this.ptr, handle, shape2.ptr, shapePos2.ptr, shapeRot2.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawShape} shape2\n    * @param {RawVector} shapePos2\n    * @param {RawRotation} shapeRot2\n    * @param {number} prediction\n    * @returns {RawShapeContact | undefined}\n    */\n    coContactShape(handle, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coContactShape(this.ptr, handle, shape2.ptr, shapePos2.ptr, shapeRot2.ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} collider2handle\n    * @param {number} prediction\n    * @returns {RawShapeContact | undefined}\n    */\n    coContactCollider(handle, collider2handle, prediction) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coContactCollider(this.ptr, handle, collider2handle, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} point\n    * @param {boolean} solid\n    * @returns {RawPointProjection}\n    */\n    coProjectPoint(handle, point, solid) {\n        _assertClass(point, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coProjectPoint(this.ptr, handle, point.ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @returns {boolean}\n    */\n    coIntersectsRay(handle, rayOrig, rayDir, maxToi) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coIntersectsRay(this.ptr, handle, rayOrig.ptr, rayDir.ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @returns {number}\n    */\n    coCastRay(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coCastRay(this.ptr, handle, rayOrig.ptr, rayDir.ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @returns {RawRayIntersection | undefined}\n    */\n    coCastRayAndGetNormal(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coCastRayAndGetNormal(this.ptr, handle, rayOrig.ptr, rayDir.ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} is_sensor\n    */\n    coSetSensor(handle, is_sensor) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetSensor(this.ptr, handle, is_sensor);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} restitution\n    */\n    coSetRestitution(handle, restitution) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRestitution(this.ptr, handle, restitution);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} friction\n    */\n    coSetFriction(handle, friction) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetFriction(this.ptr, handle, friction);\n    }\n    /**\n    * @param {number} handle\n    * @returns {number}\n    */\n    coFrictionCombineRule(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coFrictionCombineRule(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} handle\n    * @param {number} rule\n    */\n    coSetFrictionCombineRule(handle, rule) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetFrictionCombineRule(this.ptr, handle, rule);\n    }\n    /**\n    * @param {number} handle\n    * @returns {number}\n    */\n    coRestitutionCombineRule(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coRestitutionCombineRule(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} handle\n    * @param {number} rule\n    */\n    coSetRestitutionCombineRule(handle, rule) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetRestitutionCombineRule(this.ptr, handle, rule);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} groups\n    */\n    coSetCollisionGroups(handle, groups) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetCollisionGroups(this.ptr, handle, groups);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} groups\n    */\n    coSetSolverGroups(handle, groups) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetSolverGroups(this.ptr, handle, groups);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} hooks\n    */\n    coSetActiveHooks(handle, hooks) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetActiveHooks(this.ptr, handle, hooks);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} events\n    */\n    coSetActiveEvents(handle, events) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetActiveEvents(this.ptr, handle, events);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} types\n    */\n    coSetActiveCollisionTypes(handle, types) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetActiveCollisionTypes(this.ptr, handle, types);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawShape} shape\n    */\n    coSetShape(handle, shape) {\n        _assertClass(shape, RawShape);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetShape(this.ptr, handle, shape.ptr);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} threshold\n    */\n    coSetContactForceEventThreshold(handle, threshold) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetContactForceEventThreshold(this.ptr, handle, threshold);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} density\n    */\n    coSetDensity(handle, density) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetDensity(this.ptr, handle, density);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} mass\n    */\n    coSetMass(handle, mass) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetMass(this.ptr, handle, mass);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} mass\n    * @param {RawVector} centerOfMass\n    * @param {RawVector} principalAngularInertia\n    * @param {RawRotation} angularInertiaFrame\n    */\n    coSetMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_coSetMassProperties(this.ptr, handle, mass, centerOfMass.ptr, principalAngularInertia.ptr, angularInertiaFrame.ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_new();\n        return RawColliderSet.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    contains(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_contains(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} enabled\n    * @param {RawShape} shape\n    * @param {RawVector} translation\n    * @param {RawRotation} rotation\n    * @param {number} massPropsMode\n    * @param {number} mass\n    * @param {RawVector} centerOfMass\n    * @param {RawVector} principalAngularInertia\n    * @param {RawRotation} angularInertiaFrame\n    * @param {number} density\n    * @param {number} friction\n    * @param {number} restitution\n    * @param {number} frictionCombineRule\n    * @param {number} restitutionCombineRule\n    * @param {boolean} isSensor\n    * @param {number} collisionGroups\n    * @param {number} solverGroups\n    * @param {number} activeCollisionTypes\n    * @param {number} activeHooks\n    * @param {number} activeEvents\n    * @param {number} contactForceEventThreshold\n    * @param {boolean} hasParent\n    * @param {number} parent\n    * @param {RawRigidBodySet} bodies\n    * @returns {number | undefined}\n    */\n    createCollider(enabled, shape, translation, rotation, massPropsMode, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, hasParent, parent, bodies) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(shape, RawShape);\n            _assertClass(translation, RawVector);\n            _assertClass(rotation, RawRotation);\n            _assertClass(centerOfMass, RawVector);\n            _assertClass(principalAngularInertia, RawVector);\n            _assertClass(angularInertiaFrame, RawRotation);\n            _assertClass(bodies, RawRigidBodySet);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_createCollider(retptr, this.ptr, enabled, shape.ptr, translation.ptr, rotation.ptr, massPropsMode, mass, centerOfMass.ptr, principalAngularInertia.ptr, angularInertiaFrame.ptr, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, hasParent, parent, bodies.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r2 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Removes a collider from this set and wake-up the rigid-body it is attached to.\n    * @param {number} handle\n    * @param {RawIslandManager} islands\n    * @param {RawRigidBodySet} bodies\n    * @param {boolean} wakeUp\n    */\n    remove(handle, islands, bodies, wakeUp) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(bodies, RawRigidBodySet);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_remove(this.ptr, handle, islands.ptr, bodies.ptr, wakeUp);\n    }\n    /**\n    * Checks if a collider with the given integer handle exists.\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    isHandleValid(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_contains(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each collider managed by this collider set.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each collider managed by this collider set. Called as `f(handle)`.\n    * @param {Function} f\n    */\n    forEachColliderHandle(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcolliderset_forEachColliderHandle(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nclass RawContactForceEvent {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawContactForceEvent.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawcontactforceevent_free(ptr);\n    }\n    /**\n    * The first collider involved in the contact.\n    * @returns {number}\n    */\n    collider1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_handle(this.ptr);\n        return ret;\n    }\n    /**\n    * The second collider involved in the contact.\n    * @returns {number}\n    */\n    collider2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_collider2(this.ptr);\n        return ret;\n    }\n    /**\n    * The sum of all the forces between the two colliders.\n    * @returns {RawVector}\n    */\n    total_force() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_total_force(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The sum of the magnitudes of each force between the two colliders.\n    *\n    * Note that this is **not** the same as the magnitude of `self.total_force`.\n    * Here we are summing the magnitude of all the forces, instead of taking\n    * the magnitude of their sum.\n    * @returns {number}\n    */\n    total_force_magnitude() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_total_force_magnitude(this.ptr);\n        return ret;\n    }\n    /**\n    * The world-space (unit) direction of the force with strongest magnitude.\n    * @returns {RawVector}\n    */\n    max_force_direction() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_max_force_direction(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The magnitude of the largest force at a contact point of this contact pair.\n    * @returns {number}\n    */\n    max_force_magnitude() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_max_force_magnitude(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass RawContactManifold {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawContactManifold.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawcontactmanifold_free(ptr);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_normal(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    local_n1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_local_n1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    local_n2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_local_n2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    subshape1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_subshape1(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    subshape2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_subshape2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    num_contacts() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_num_contacts(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {RawVector | undefined}\n    */\n    contact_local_p1(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_local_p1(this.ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * @param {number} i\n    * @returns {RawVector | undefined}\n    */\n    contact_local_p2(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_local_p2(this.ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_dist(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_dist(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_fid1(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_fid1(this.ptr, i);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_fid2(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_fid2(this.ptr, i);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_impulse(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_impulse(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_tangent_impulse_x(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_tangent_impulse_x(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    contact_tangent_impulse_y(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_contact_tangent_impulse_y(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    num_solver_contacts() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_num_solver_contacts(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {RawVector | undefined}\n    */\n    solver_contact_point(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_solver_contact_point(this.ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    solver_contact_dist(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_solver_contact_dist(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    solver_contact_friction(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_solver_contact_friction(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    solver_contact_restitution(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_solver_contact_restitution(this.ptr, i);\n        return ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {RawVector}\n    */\n    solver_contact_tangent_velocity(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactmanifold_solver_contact_tangent_velocity(this.ptr, i);\n        return RawVector.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawContactPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawContactPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawcontactpair_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    collider1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactpair_collider1(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    collider2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactpair_collider2(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    numContactManifolds() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactpair_numContactManifolds(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {RawContactManifold | undefined}\n    */\n    contactManifold(i) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactpair_contactManifold(this.ptr, i);\n        return ret === 0 ? undefined : RawContactManifold.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawDebugRenderPipeline {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawDebugRenderPipeline.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawdebugrenderpipeline_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdebugrenderpipeline_new();\n        return RawDebugRenderPipeline.__wrap(ret);\n    }\n    /**\n    * @returns {Float32Array}\n    */\n    vertices() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdebugrenderpipeline_vertices(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Float32Array}\n    */\n    colors() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdebugrenderpipeline_colors(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawImpulseJointSet} impulse_joints\n    * @param {RawMultibodyJointSet} multibody_joints\n    * @param {RawNarrowPhase} narrow_phase\n    */\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        _assertClass(narrow_phase, RawNarrowPhase);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdebugrenderpipeline_render(this.ptr, bodies.ptr, colliders.ptr, impulse_joints.ptr, multibody_joints.ptr, narrow_phase.ptr);\n    }\n}\n/**\n*/\nclass RawDeserializedWorld {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawDeserializedWorld.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawdeserializedworld_free(ptr);\n    }\n    /**\n    * @returns {RawVector | undefined}\n    */\n    takeGravity() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeGravity(this.ptr);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawIntegrationParameters | undefined}\n    */\n    takeIntegrationParameters() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeIntegrationParameters(this.ptr);\n        return ret === 0 ? undefined : RawIntegrationParameters.__wrap(ret);\n    }\n    /**\n    * @returns {RawIslandManager | undefined}\n    */\n    takeIslandManager() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeIslandManager(this.ptr);\n        return ret === 0 ? undefined : RawIslandManager.__wrap(ret);\n    }\n    /**\n    * @returns {RawBroadPhase | undefined}\n    */\n    takeBroadPhase() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeBroadPhase(this.ptr);\n        return ret === 0 ? undefined : RawBroadPhase.__wrap(ret);\n    }\n    /**\n    * @returns {RawNarrowPhase | undefined}\n    */\n    takeNarrowPhase() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeNarrowPhase(this.ptr);\n        return ret === 0 ? undefined : RawNarrowPhase.__wrap(ret);\n    }\n    /**\n    * @returns {RawRigidBodySet | undefined}\n    */\n    takeBodies() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeBodies(this.ptr);\n        return ret === 0 ? undefined : RawRigidBodySet.__wrap(ret);\n    }\n    /**\n    * @returns {RawColliderSet | undefined}\n    */\n    takeColliders() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeColliders(this.ptr);\n        return ret === 0 ? undefined : RawColliderSet.__wrap(ret);\n    }\n    /**\n    * @returns {RawImpulseJointSet | undefined}\n    */\n    takeImpulseJoints() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeImpulseJoints(this.ptr);\n        return ret === 0 ? undefined : RawImpulseJointSet.__wrap(ret);\n    }\n    /**\n    * @returns {RawMultibodyJointSet | undefined}\n    */\n    takeMultibodyJoints() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawdeserializedworld_takeMultibodyJoints(this.ptr);\n        return ret === 0 ? undefined : RawMultibodyJointSet.__wrap(ret);\n    }\n}\n/**\n* A structure responsible for collecting events generated\n* by the physics engine.\n*/\nclass RawEventQueue {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawEventQueue.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_raweventqueue_free(ptr);\n    }\n    /**\n    * Creates a new event collector.\n    *\n    * # Parameters\n    * - `autoDrain`: setting this to `true` is strongly recommended. If true, the collector will\n    * be automatically drained before each `world.step(collector)`. If false, the collector will\n    * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n    * RAM if no drain is performed.\n    * @param {boolean} autoDrain\n    */\n    constructor(autoDrain) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.raweventqueue_new(autoDrain);\n        return RawEventQueue.__wrap(ret);\n    }\n    /**\n    * Applies the given javascript closure on each collision event of this collector, then clear\n    * the internal collision event buffer.\n    *\n    * # Parameters\n    * - `f(handle1, handle2, started)`:  JavaScript closure applied to each collision event. The\n    * closure should take three arguments: two integers representing the handles of the colliders\n    * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n    * (false).\n    * @param {Function} f\n    */\n    drainCollisionEvents(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.raweventqueue_drainCollisionEvents(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {Function} f\n    */\n    drainContactForceEvents(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.raweventqueue_drainContactForceEvents(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Removes all events contained by this collector.\n    */\n    clear() {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.raweventqueue_clear(this.ptr);\n    }\n}\n/**\n*/\nclass RawGenericJoint {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawGenericJoint.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawgenericjoint_free(ptr);\n    }\n    /**\n    * Create a new joint descriptor that builds spehrical joints.\n    *\n    * A spherical joints allows three relative rotational degrees of freedom\n    * by preventing any relative translation between the anchors of the\n    * two attached rigid-bodies.\n    * @param {RawVector} anchor1\n    * @param {RawVector} anchor2\n    * @returns {RawGenericJoint}\n    */\n    static spherical(anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawgenericjoint_spherical(anchor1.ptr, anchor2.ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n    * Creates a new joint descriptor that builds a Prismatic joint.\n    *\n    * A prismatic joint removes all the degrees of freedom between the\n    * affected bodies, except for the translation along one axis.\n    *\n    * Returns `None` if any of the provided axes cannot be normalized.\n    * @param {RawVector} anchor1\n    * @param {RawVector} anchor2\n    * @param {RawVector} axis\n    * @param {boolean} limitsEnabled\n    * @param {number} limitsMin\n    * @param {number} limitsMax\n    * @returns {RawGenericJoint | undefined}\n    */\n    static prismatic(anchor1, anchor2, axis, limitsEnabled, limitsMin, limitsMax) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawgenericjoint_prismatic(anchor1.ptr, anchor2.ptr, axis.ptr, limitsEnabled, limitsMin, limitsMax);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n    /**\n    * Creates a new joint descriptor that builds a Fixed joint.\n    *\n    * A fixed joint removes all the degrees of freedom between the affected bodies.\n    * @param {RawVector} anchor1\n    * @param {RawRotation} axes1\n    * @param {RawVector} anchor2\n    * @param {RawRotation} axes2\n    * @returns {RawGenericJoint}\n    */\n    static fixed(anchor1, axes1, anchor2, axes2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(axes1, RawRotation);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axes2, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawgenericjoint_fixed(anchor1.ptr, axes1.ptr, anchor2.ptr, axes2.ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n    * Create a new joint descriptor that builds Revolute joints.\n    *\n    * A revolute joint removes all degrees of freedom between the affected\n    * bodies except for the rotation along one axis.\n    * @param {RawVector} anchor1\n    * @param {RawVector} anchor2\n    * @param {RawVector} axis\n    * @returns {RawGenericJoint | undefined}\n    */\n    static revolute(anchor1, anchor2, axis) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawgenericjoint_revolute(anchor1.ptr, anchor2.ptr, axis.ptr);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawImpulseJointSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawImpulseJointSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawimpulsejointset_free(ptr);\n    }\n    /**\n    * The type of this joint.\n    * @param {number} handle\n    * @returns {number}\n    */\n    jointType(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointType(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The unique integer identifier of the first rigid-body this joint it attached to.\n    * @param {number} handle\n    * @returns {number}\n    */\n    jointBodyHandle1(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointBodyHandle1(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The unique integer identifier of the second rigid-body this joint is attached to.\n    * @param {number} handle\n    * @returns {number}\n    */\n    jointBodyHandle2(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointBodyHandle2(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    jointFrameX1(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointFrameX1(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    jointFrameX2(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointFrameX2(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The position of the first anchor of this joint.\n    *\n    * The first anchor gives the position of the points application point on the\n    * local frame of the first rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    jointAnchor1(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointAnchor1(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The position of the second anchor of this joint.\n    *\n    * The second anchor gives the position of the points application point on the\n    * local frame of the second rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    jointAnchor2(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointAnchor2(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Sets the position of the first local anchor\n    * @param {number} handle\n    * @param {RawVector} newPos\n    */\n    jointSetAnchor1(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointSetAnchor1(this.ptr, handle, newPos.ptr);\n    }\n    /**\n    * Sets the position of the second local anchor\n    * @param {number} handle\n    * @param {RawVector} newPos\n    */\n    jointSetAnchor2(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointSetAnchor2(this.ptr, handle, newPos.ptr);\n    }\n    /**\n    * Are contacts between the rigid-bodies attached by this joint enabled?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    jointContactsEnabled(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointContactsEnabled(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n    * @param {number} handle\n    * @param {boolean} enabled\n    */\n    jointSetContactsEnabled(handle, enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointSetContactsEnabled(this.ptr, handle, enabled);\n    }\n    /**\n    * Are the limits for this joint enabled?\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {boolean}\n    */\n    jointLimitsEnabled(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointLimitsEnabled(this.ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n    * Return the lower limit along the given joint axis.\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {number}\n    */\n    jointLimitsMin(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointLimitsMin(this.ptr, handle, axis);\n        return ret;\n    }\n    /**\n    * If this is a prismatic joint, returns its upper limit.\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {number}\n    */\n    jointLimitsMax(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointLimitsMax(this.ptr, handle, axis);\n        return ret;\n    }\n    /**\n    * Enables and sets the joint limits\n    * @param {number} handle\n    * @param {number} axis\n    * @param {number} min\n    * @param {number} max\n    */\n    jointSetLimits(handle, axis, min, max) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointSetLimits(this.ptr, handle, axis, min, max);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} axis\n    * @param {number} model\n    */\n    jointConfigureMotorModel(handle, axis, model) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointConfigureMotorModel(this.ptr, handle, axis, model);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} axis\n    * @param {number} targetVel\n    * @param {number} factor\n    */\n    jointConfigureMotorVelocity(handle, axis, targetVel, factor) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointConfigureMotorVelocity(this.ptr, handle, axis, targetVel, factor);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} axis\n    * @param {number} targetPos\n    * @param {number} stiffness\n    * @param {number} damping\n    */\n    jointConfigureMotorPosition(handle, axis, targetPos, stiffness, damping) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointConfigureMotorPosition(this.ptr, handle, axis, targetPos, stiffness, damping);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} axis\n    * @param {number} targetPos\n    * @param {number} targetVel\n    * @param {number} stiffness\n    * @param {number} damping\n    */\n    jointConfigureMotor(handle, axis, targetPos, targetVel, stiffness, damping) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_jointConfigureMotor(this.ptr, handle, axis, targetPos, targetVel, stiffness, damping);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_new();\n        return RawImpulseJointSet.__wrap(ret);\n    }\n    /**\n    * @param {RawGenericJoint} params\n    * @param {number} parent1\n    * @param {number} parent2\n    * @param {boolean} wake_up\n    * @returns {number}\n    */\n    createJoint(params, parent1, parent2, wake_up) {\n        _assertClass(params, RawGenericJoint);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_createJoint(this.ptr, params.ptr, parent1, parent2, wake_up);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} wakeUp\n    */\n    remove(handle, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_remove(this.ptr, handle, wakeUp);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    contains(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_contains(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n    * @param {Function} f\n    */\n    forEachJointHandle(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_forEachJointHandle(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n    * @param {number} body\n    * @param {Function} f\n    */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawimpulsejointset_forEachJointAttachedToRigidBody(this.ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nclass RawIntegrationParameters {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawIntegrationParameters.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawintegrationparameters_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_new();\n        return RawIntegrationParameters.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get dt() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_dt(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get erp() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get allowedLinearError() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_allowedLinearError(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get predictionDistance() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_predictionDistance(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    get maxVelocityIterations() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_maxVelocityIterations(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get maxVelocityFrictionIterations() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_maxVelocityFrictionIterations(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get maxStabilizationIterations() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_maxStabilizationIterations(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get minIslandSize() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_minIslandSize(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get maxCcdSubsteps() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_maxCcdSubsteps(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} value\n    */\n    set dt(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_dt(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set erp(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_erp(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set allowedLinearError(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_allowedLinearError(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set predictionDistance(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_predictionDistance(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set maxVelocityIterations(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_maxVelocityIterations(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set maxVelocityFrictionIterations(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_maxVelocityFrictionIterations(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set maxStabilizationIterations(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_maxStabilizationIterations(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set minIslandSize(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_minIslandSize(this.ptr, value);\n    }\n    /**\n    * @param {number} value\n    */\n    set maxCcdSubsteps(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_maxCcdSubsteps(this.ptr, value);\n    }\n}\n/**\n*/\nclass RawIslandManager {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawIslandManager.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawislandmanager_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawislandmanager_new();\n        return RawIslandManager.__wrap(ret);\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each active rigid-body\n    * managed by this island manager.\n    *\n    * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n    * the physics engine in order to save computational power. A sleeping rigid-body never moves\n    * unless it is moved manually by the user.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each active rigid-body managed by this\n    *   set. Called as `f(collider)`.\n    * @param {Function} f\n    */\n    forEachActiveRigidBodyHandle(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawislandmanager_forEachActiveRigidBodyHandle(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nclass RawKinematicCharacterController {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawKinematicCharacterController.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawkinematiccharactercontroller_free(ptr);\n    }\n    /**\n    * @param {number} offset\n    */\n    constructor(offset) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_new(offset);\n        return RawKinematicCharacterController.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    up() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_up(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} vector\n    */\n    setUp(vector) {\n        _assertClass(vector, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_setUp(this.ptr, vector.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    offset() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_offset(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} value\n    */\n    setOffset(value) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_setOffset(this.ptr, value);\n    }\n    /**\n    * @returns {boolean}\n    */\n    slideEnabled() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_slideEnabled(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} enabled\n    */\n    setSlideEnabled(enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_setSlideEnabled(this.ptr, enabled);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    autostepMaxHeight() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_autostepMaxHeight(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    autostepMinWidth() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_autostepMinWidth(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {boolean | undefined}\n    */\n    autostepIncludesDynamicBodies() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    autostepEnabled() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_autostepEnabled(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} maxHeight\n    * @param {number} minWidth\n    * @param {boolean} includeDynamicBodies\n    */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_enableAutostep(this.ptr, maxHeight, minWidth, includeDynamicBodies);\n    }\n    /**\n    */\n    disableAutostep() {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_disableAutostep(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    maxSlopeClimbAngle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} angle\n    */\n    setMaxSlopeClimbAngle(angle) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.ptr, angle);\n    }\n    /**\n    * @returns {number}\n    */\n    minSlopeSlideAngle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_minSlopeSlideAngle(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} angle\n    */\n    setMinSlopeSlideAngle(angle) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.ptr, angle);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    snapToGroundDistance() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_snapToGroundDistance(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} distance\n    */\n    enableSnapToGround(distance) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_enableSnapToGround(this.ptr, distance);\n    }\n    /**\n    */\n    disableSnapToGround() {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_disableSnapToGround(this.ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    snapToGroundEnabled() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_snapToGroundEnabled(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} dt\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawQueryPipeline} queries\n    * @param {number} collider_handle\n    * @param {RawVector} desired_translation\n    * @param {boolean} apply_impulses_to_dynamic_bodies\n    * @param {number | undefined} character_mass\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {Function} filter_predicate\n    */\n    computeColliderMovement(dt, bodies, colliders, queries, collider_handle, desired_translation, apply_impulses_to_dynamic_bodies, character_mass, filter_flags, filter_groups, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(queries, RawQueryPipeline);\n            _assertClass(desired_translation, RawVector);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computeColliderMovement(this.ptr, dt, bodies.ptr, colliders.ptr, queries.ptr, collider_handle, desired_translation.ptr, apply_impulses_to_dynamic_bodies, !isLikeNone(character_mass), isLikeNone(character_mass) ? 0 : character_mass, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @returns {RawVector}\n    */\n    computedMovement() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedMovement(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    computedGrounded() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedGrounded(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    numComputedCollisions() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_numComputedCollisions(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @param {RawCharacterCollision} collision\n    * @returns {boolean}\n    */\n    computedCollision(i, collision) {\n        _assertClass(collision, RawCharacterCollision);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedCollision(this.ptr, i, collision.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nclass RawMultibodyJointSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawMultibodyJointSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawmultibodyjointset_free(ptr);\n    }\n    /**\n    * The type of this joint.\n    * @param {number} handle\n    * @returns {number}\n    */\n    jointType(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointType(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    jointFrameX1(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointFrameX1(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    jointFrameX2(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointFrameX2(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The position of the first anchor of this joint.\n    *\n    * The first anchor gives the position of the points application point on the\n    * local frame of the first rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    jointAnchor1(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointAnchor1(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The position of the second anchor of this joint.\n    *\n    * The second anchor gives the position of the points application point on the\n    * local frame of the second rigid-body it is attached to.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    jointAnchor2(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointAnchor2(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Are contacts between the rigid-bodies attached by this joint enabled?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    jointContactsEnabled(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointContactsEnabled(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n    * @param {number} handle\n    * @param {boolean} enabled\n    */\n    jointSetContactsEnabled(handle, enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointSetContactsEnabled(this.ptr, handle, enabled);\n    }\n    /**\n    * Are the limits for this joint enabled?\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {boolean}\n    */\n    jointLimitsEnabled(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointLimitsEnabled(this.ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n    * Return the lower limit along the given joint axis.\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {number}\n    */\n    jointLimitsMin(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointLimitsMin(this.ptr, handle, axis);\n        return ret;\n    }\n    /**\n    * If this is a prismatic joint, returns its upper limit.\n    * @param {number} handle\n    * @param {number} axis\n    * @returns {number}\n    */\n    jointLimitsMax(handle, axis) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_jointLimitsMax(this.ptr, handle, axis);\n        return ret;\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_new();\n        return RawMultibodyJointSet.__wrap(ret);\n    }\n    /**\n    * @param {RawGenericJoint} params\n    * @param {number} parent1\n    * @param {number} parent2\n    * @param {boolean} wakeUp\n    * @returns {number}\n    */\n    createJoint(params, parent1, parent2, wakeUp) {\n        _assertClass(params, RawGenericJoint);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_createJoint(this.ptr, params.ptr, parent1, parent2, wakeUp);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} wakeUp\n    */\n    remove(handle, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_remove(this.ptr, handle, wakeUp);\n    }\n    /**\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    contains(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_contains(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n    * @param {Function} f\n    */\n    forEachJointHandle(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_forEachJointHandle(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n    * @param {number} body\n    * @param {Function} f\n    */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nclass RawNarrowPhase {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawNarrowPhase.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawnarrowphase_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawnarrowphase_new();\n        return RawNarrowPhase.__wrap(ret);\n    }\n    /**\n    * @param {number} handle1\n    * @param {Function} f\n    */\n    contacts_with(handle1, f) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawnarrowphase_contacts_with(this.ptr, handle1, addHeapObject(f));\n    }\n    /**\n    * @param {number} handle1\n    * @param {number} handle2\n    * @returns {RawContactPair | undefined}\n    */\n    contact_pair(handle1, handle2) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawnarrowphase_contact_pair(this.ptr, handle1, handle2);\n        return ret === 0 ? undefined : RawContactPair.__wrap(ret);\n    }\n    /**\n    * @param {number} handle1\n    * @param {Function} f\n    */\n    intersections_with(handle1, f) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawnarrowphase_intersections_with(this.ptr, handle1, addHeapObject(f));\n    }\n    /**\n    * @param {number} handle1\n    * @param {number} handle2\n    * @returns {boolean}\n    */\n    intersection_pair(handle1, handle2) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawnarrowphase_intersection_pair(this.ptr, handle1, handle2);\n        return ret !== 0;\n    }\n}\n/**\n*/\nclass RawPhysicsPipeline {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawPhysicsPipeline.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawphysicspipeline_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawphysicspipeline_new();\n        return RawPhysicsPipeline.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} gravity\n    * @param {RawIntegrationParameters} integrationParameters\n    * @param {RawIslandManager} islands\n    * @param {RawBroadPhase} broadPhase\n    * @param {RawNarrowPhase} narrowPhase\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawImpulseJointSet} joints\n    * @param {RawMultibodyJointSet} articulations\n    * @param {RawCCDSolver} ccd_solver\n    */\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawphysicspipeline_step(this.ptr, gravity.ptr, integrationParameters.ptr, islands.ptr, broadPhase.ptr, narrowPhase.ptr, bodies.ptr, colliders.ptr, joints.ptr, articulations.ptr, ccd_solver.ptr);\n    }\n    /**\n    * @param {RawVector} gravity\n    * @param {RawIntegrationParameters} integrationParameters\n    * @param {RawIslandManager} islands\n    * @param {RawBroadPhase} broadPhase\n    * @param {RawNarrowPhase} narrowPhase\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawImpulseJointSet} joints\n    * @param {RawMultibodyJointSet} articulations\n    * @param {RawCCDSolver} ccd_solver\n    * @param {RawEventQueue} eventQueue\n    * @param {object} hookObject\n    * @param {Function} hookFilterContactPair\n    * @param {Function} hookFilterIntersectionPair\n    */\n    stepWithEvents(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver, eventQueue, hookObject, hookFilterContactPair, hookFilterIntersectionPair) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        _assertClass(eventQueue, RawEventQueue);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawphysicspipeline_stepWithEvents(this.ptr, gravity.ptr, integrationParameters.ptr, islands.ptr, broadPhase.ptr, narrowPhase.ptr, bodies.ptr, colliders.ptr, joints.ptr, articulations.ptr, ccd_solver.ptr, eventQueue.ptr, addHeapObject(hookObject), addHeapObject(hookFilterContactPair), addHeapObject(hookFilterIntersectionPair));\n    }\n}\n/**\n*/\nclass RawPointColliderProjection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawPointColliderProjection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawpointcolliderprojection_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    colliderHandle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawpointcolliderprojection_colliderHandle(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    point() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedMovement(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    isInside() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedGrounded(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    featureType() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawpointcolliderprojection_featureType(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    featureId() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawpointcolliderprojection_featureId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass RawPointProjection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawPointProjection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawpointprojection_free(ptr);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    point() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedMovement(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    isInside() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedGrounded(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nclass RawQueryPipeline {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawQueryPipeline.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawquerypipeline_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_new();\n        return RawQueryPipeline.__wrap(ret);\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    */\n    update(bodies, colliders) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_update(this.ptr, bodies.ptr, colliders.ptr);\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {RawRayColliderToi | undefined}\n    */\n    castRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_castRay(this.ptr, bodies.ptr, colliders.ptr, rayOrig.ptr, rayDir.ptr, maxToi, solid, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderToi.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {RawRayColliderIntersection | undefined}\n    */\n    castRayAndGetNormal(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_castRayAndGetNormal(this.ptr, bodies.ptr, colliders.ptr, rayOrig.ptr, rayDir.ptr, maxToi, solid, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderIntersection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @param {Function} callback\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    */\n    intersectionsWithRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_intersectionsWithRay(this.ptr, bodies.ptr, colliders.ptr, rayOrig.ptr, rayDir.ptr, maxToi, solid, addBorrowedObject(callback), filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawShape} shape\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {number | undefined}\n    */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_intersectionWithShape(retptr, this.ptr, bodies.ptr, colliders.ptr, shapePos.ptr, shapeRot.ptr, shape.ptr, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r2 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} point\n    * @param {boolean} solid\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {RawPointColliderProjection | undefined}\n    */\n    projectPoint(bodies, colliders, point, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_projectPoint(this.ptr, bodies.ptr, colliders.ptr, point.ptr, solid, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} point\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {RawPointColliderProjection | undefined}\n    */\n    projectPointAndGetFeature(bodies, colliders, point, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_projectPointAndGetFeature(this.ptr, bodies.ptr, colliders.ptr, point.ptr, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} point\n    * @param {Function} callback\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    */\n    intersectionsWithPoint(bodies, colliders, point, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_intersectionsWithPoint(this.ptr, bodies.ptr, colliders.ptr, point.ptr, addBorrowedObject(callback), filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} shapeVel\n    * @param {RawShape} shape\n    * @param {number} maxToi\n    * @param {boolean} stop_at_penetration\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    * @returns {RawShapeColliderTOI | undefined}\n    */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, maxToi, stop_at_penetration, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shapeVel, RawVector);\n            _assertClass(shape, RawShape);\n            const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_castShape(this.ptr, bodies.ptr, colliders.ptr, shapePos.ptr, shapeRot.ptr, shapeVel.ptr, shape.ptr, maxToi, stop_at_penetration, filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawShapeColliderTOI.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawShape} shape\n    * @param {Function} callback\n    * @param {number} filter_flags\n    * @param {number | undefined} filter_groups\n    * @param {number | undefined} filter_exclude_collider\n    * @param {number | undefined} filter_exclude_rigid_body\n    * @param {Function} filter_predicate\n    */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_intersectionsWithShape(this.ptr, bodies.ptr, colliders.ptr, shapePos.ptr, shapeRot.ptr, shape.ptr, addBorrowedObject(callback), filter_flags, !isLikeNone(filter_groups), isLikeNone(filter_groups) ? 0 : filter_groups, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawVector} aabbCenter\n    * @param {RawVector} aabbHalfExtents\n    * @param {Function} callback\n    */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        try {\n            _assertClass(aabbCenter, RawVector);\n            _assertClass(aabbHalfExtents, RawVector);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawquerypipeline_collidersWithAabbIntersectingAabb(this.ptr, aabbCenter.ptr, aabbHalfExtents.ptr, addBorrowedObject(callback));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nclass RawRayColliderIntersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawRayColliderIntersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawraycolliderintersection_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    colliderHandle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_handle(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawraycolliderintersection_normal(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawraycolliderintersection_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    featureType() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawraycolliderintersection_featureType(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    featureId() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawraycolliderintersection_featureId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass RawRayColliderToi {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawRayColliderToi.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawraycollidertoi_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    colliderHandle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_handle(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass RawRayIntersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawRayIntersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawrayintersection_free(ptr);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldWitness1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    featureType() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrayintersection_featureType(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    featureId() {\n        try {\n            const retptr = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrayintersection_featureId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass RawRigidBodySet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawRigidBodySet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawrigidbodyset_free(ptr);\n    }\n    /**\n    * The world-space translation of this rigid-body.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbTranslation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbTranslation(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The world-space orientation of this rigid-body.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    rbRotation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbRotation(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * Put the given rigid-body to sleep.\n    * @param {number} handle\n    */\n    rbSleep(handle) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSleep(this.ptr, handle);\n    }\n    /**\n    * Is this rigid-body sleeping?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsSleeping(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsSleeping(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Is the velocity of this rigid-body not zero?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsMoving(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsMoving(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * The world-space predicted translation of this rigid-body.\n    *\n    * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n    * method and is used for estimating the kinematic body velocity at the next timestep.\n    * For non-kinematic bodies, this value is currently unspecified.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbNextTranslation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbNextTranslation(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The world-space predicted orientation of this rigid-body.\n    *\n    * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n    * method and is used for estimating the kinematic body velocity at the next timestep.\n    * For non-kinematic bodies, this value is currently unspecified.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    rbNextRotation(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbNextRotation(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * Sets the translation of this rigid-body.\n    *\n    * # Parameters\n    * - `x`: the world-space position of the rigid-body along the `x` axis.\n    * - `y`: the world-space position of the rigid-body along the `y` axis.\n    * - `z`: the world-space position of the rigid-body along the `z` axis.\n    * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n    * wasn't moving before modifying its position.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {boolean} wakeUp\n    */\n    rbSetTranslation(handle, x, y, z, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetTranslation(this.ptr, handle, x, y, z, wakeUp);\n    }\n    /**\n    * Sets the rotation quaternion of this rigid-body.\n    *\n    * This does nothing if a zero quaternion is provided.\n    *\n    * # Parameters\n    * - `x`: the first vector component of the quaternion.\n    * - `y`: the second vector component of the quaternion.\n    * - `z`: the third vector component of the quaternion.\n    * - `w`: the scalar component of the quaternion.\n    * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n    * wasn't moving before modifying its position.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {number} w\n    * @param {boolean} wakeUp\n    */\n    rbSetRotation(handle, x, y, z, w, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetRotation(this.ptr, handle, x, y, z, w, wakeUp);\n    }\n    /**\n    * Sets the linear velocity of this rigid-body.\n    * @param {number} handle\n    * @param {RawVector} linvel\n    * @param {boolean} wakeUp\n    */\n    rbSetLinvel(handle, linvel, wakeUp) {\n        _assertClass(linvel, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetLinvel(this.ptr, handle, linvel.ptr, wakeUp);\n    }\n    /**\n    * Sets the angular velocity of this rigid-body.\n    * @param {number} handle\n    * @param {RawVector} angvel\n    * @param {boolean} wakeUp\n    */\n    rbSetAngvel(handle, angvel, wakeUp) {\n        _assertClass(angvel, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetAngvel(this.ptr, handle, angvel.ptr, wakeUp);\n    }\n    /**\n    * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n    *\n    * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n    * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n    * an artificial velocity for this rigid-body from its current position and its next kinematic\n    * position. This velocity will be used to compute forces on dynamic bodies interacting with\n    * this body.\n    *\n    * # Parameters\n    * - `x`: the world-space position of the rigid-body along the `x` axis.\n    * - `y`: the world-space position of the rigid-body along the `y` axis.\n    * - `z`: the world-space position of the rigid-body along the `z` axis.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    */\n    rbSetNextKinematicTranslation(handle, x, y, z) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetNextKinematicTranslation(this.ptr, handle, x, y, z);\n    }\n    /**\n    * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n    *\n    * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n    * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n    * an artificial velocity for this rigid-body from its current position and its next kinematic\n    * position. This velocity will be used to compute forces on dynamic bodies interacting with\n    * this body.\n    *\n    * # Parameters\n    * - `x`: the first vector component of the quaternion.\n    * - `y`: the second vector component of the quaternion.\n    * - `z`: the third vector component of the quaternion.\n    * - `w`: the scalar component of the quaternion.\n    * @param {number} handle\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {number} w\n    */\n    rbSetNextKinematicRotation(handle, x, y, z, w) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetNextKinematicRotation(this.ptr, handle, x, y, z, w);\n    }\n    /**\n    * @param {number} handle\n    * @param {RawColliderSet} colliders\n    */\n    rbRecomputeMassPropertiesFromColliders(handle, colliders) {\n        _assertClass(colliders, RawColliderSet);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.ptr, handle, colliders.ptr);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} mass\n    * @param {boolean} wake_up\n    */\n    rbSetAdditionalMass(handle, mass, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetAdditionalMass(this.ptr, handle, mass, wake_up);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} mass\n    * @param {RawVector} centerOfMass\n    * @param {RawVector} principalAngularInertia\n    * @param {RawRotation} angularInertiaFrame\n    * @param {boolean} wake_up\n    */\n    rbSetAdditionalMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, wake_up) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetAdditionalMassProperties(this.ptr, handle, mass, centerOfMass.ptr, principalAngularInertia.ptr, angularInertiaFrame.ptr, wake_up);\n    }\n    /**\n    * The linear velocity of this rigid-body.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbLinvel(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbLinvel(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The angular velocity of this rigid-body.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbAngvel(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbAngvel(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} locked\n    * @param {boolean} wake_up\n    */\n    rbLockTranslations(handle, locked, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbLockTranslations(this.ptr, handle, locked, wake_up);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} allow_x\n    * @param {boolean} allow_y\n    * @param {boolean} allow_z\n    * @param {boolean} wake_up\n    */\n    rbSetEnabledTranslations(handle, allow_x, allow_y, allow_z, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetEnabledTranslations(this.ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} locked\n    * @param {boolean} wake_up\n    */\n    rbLockRotations(handle, locked, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbLockRotations(this.ptr, handle, locked, wake_up);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} allow_x\n    * @param {boolean} allow_y\n    * @param {boolean} allow_z\n    * @param {boolean} wake_up\n    */\n    rbSetEnabledRotations(handle, allow_x, allow_y, allow_z, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetEnabledRotations(this.ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbDominanceGroup(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbDominanceGroup(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {number} group\n    */\n    rbSetDominanceGroup(handle, group) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetDominanceGroup(this.ptr, handle, group);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} enabled\n    */\n    rbEnableCcd(handle, enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbEnableCcd(this.ptr, handle, enabled);\n    }\n    /**\n    * The mass of this rigid-body.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbMass(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbMass(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The inverse of the mass of a rigid-body.\n    *\n    * If this is zero, the rigid-body is assumed to have infinite mass.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbInvMass(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbInvMass(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The inverse mass taking into account translation locking.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbEffectiveInvMass(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbEffectiveInvMass(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The center of mass of a rigid-body expressed in its local-space.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbLocalCom(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbLocalCom(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The world-space center of mass of the rigid-body.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbWorldCom(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbWorldCom(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The inverse of the principal angular inertia of the rigid-body.\n    *\n    * Components set to zero are assumed to be infinite along the corresponding principal axis.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbInvPrincipalInertiaSqrt(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The principal vectors of the local angular inertia tensor of the rigid-body.\n    * @param {number} handle\n    * @returns {RawRotation}\n    */\n    rbPrincipalInertiaLocalFrame(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The angular inertia along the principal inertia axes of the rigid-body.\n    * @param {number} handle\n    * @returns {RawVector}\n    */\n    rbPrincipalInertia(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbPrincipalInertia(this.ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n    * taking into account rotation locking.\n    * @param {number} handle\n    * @returns {RawSdpMatrix3}\n    */\n    rbEffectiveWorldInvInertiaSqrt(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n    * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n    * this rigid-body.\n    * @param {number} handle\n    * @returns {RawSdpMatrix3}\n    */\n    rbEffectiveAngularInertia(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbEffectiveAngularInertia(this.ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n    * Wakes this rigid-body up.\n    *\n    * A dynamic rigid-body that does not move during several consecutive frames will\n    * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n    * to avoid useless computations.\n    * This methods forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n    * the position of a dynamic body so that it is properly simulated afterwards.\n    * @param {number} handle\n    */\n    rbWakeUp(handle) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbWakeUp(this.ptr, handle);\n    }\n    /**\n    * Is Continuous Collision Detection enabled for this rigid-body?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsCcdEnabled(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsCcdEnabled(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * The number of colliders attached to this rigid-body.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbNumColliders(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbNumColliders(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * Retrieves the `i-th` collider attached to this rigid-body.\n    *\n    * # Parameters\n    * - `at`: The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n    *         This index is **not** the same as the unique identifier of the collider.\n    * @param {number} handle\n    * @param {number} at\n    * @returns {number}\n    */\n    rbCollider(handle, at) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbCollider(this.ptr, handle, at);\n        return ret;\n    }\n    /**\n    * The status of this rigid-body: fixed, dynamic, or kinematic.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbBodyType(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbBodyType(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * Set a new status for this rigid-body: fixed, dynamic, or kinematic.\n    * @param {number} handle\n    * @param {number} status\n    * @param {boolean} wake_up\n    */\n    rbSetBodyType(handle, status, wake_up) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetBodyType(this.ptr, handle, status, wake_up);\n    }\n    /**\n    * Is this rigid-body fixed?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsFixed(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsFixed(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Is this rigid-body kinematic?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsKinematic(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsKinematic(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Is this rigid-body dynamic?\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsDynamic(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsDynamic(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * The linear damping coefficient of this rigid-body.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbLinearDamping(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbLinearDamping(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * The angular damping coefficient of this rigid-body.\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbAngularDamping(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbAngularDamping(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {number} factor\n    */\n    rbSetLinearDamping(handle, factor) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetLinearDamping(this.ptr, handle, factor);\n    }\n    /**\n    * @param {number} handle\n    * @param {number} factor\n    */\n    rbSetAngularDamping(handle, factor) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetAngularDamping(this.ptr, handle, factor);\n    }\n    /**\n    * @param {number} handle\n    * @param {boolean} enabled\n    */\n    rbSetEnabled(handle, enabled) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetEnabled(this.ptr, handle, enabled);\n    }\n    /**\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    rbIsEnabled(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbIsEnabled(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbGravityScale(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbGravityScale(this.ptr, handle);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {number} factor\n    * @param {boolean} wakeUp\n    */\n    rbSetGravityScale(handle, factor, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetGravityScale(this.ptr, handle, factor, wakeUp);\n    }\n    /**\n    * Resets to zero all user-added forces added to this rigid-body.\n    * @param {number} handle\n    * @param {boolean} wakeUp\n    */\n    rbResetForces(handle, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbResetForces(this.ptr, handle, wakeUp);\n    }\n    /**\n    * Resets to zero all user-added torques added to this rigid-body.\n    * @param {number} handle\n    * @param {boolean} wakeUp\n    */\n    rbResetTorques(handle, wakeUp) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbResetTorques(this.ptr, handle, wakeUp);\n    }\n    /**\n    * Adds a force at the center-of-mass of this rigid-body.\n    *\n    * # Parameters\n    * - `force`: the world-space force to apply on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} force\n    * @param {boolean} wakeUp\n    */\n    rbAddForce(handle, force, wakeUp) {\n        _assertClass(force, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbAddForce(this.ptr, handle, force.ptr, wakeUp);\n    }\n    /**\n    * Applies an impulse at the center-of-mass of this rigid-body.\n    *\n    * # Parameters\n    * - `impulse`: the world-space impulse to apply on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} impulse\n    * @param {boolean} wakeUp\n    */\n    rbApplyImpulse(handle, impulse, wakeUp) {\n        _assertClass(impulse, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbApplyImpulse(this.ptr, handle, impulse.ptr, wakeUp);\n    }\n    /**\n    * Adds a torque at the center-of-mass of this rigid-body.\n    *\n    * # Parameters\n    * - `torque`: the world-space torque to apply on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} torque\n    * @param {boolean} wakeUp\n    */\n    rbAddTorque(handle, torque, wakeUp) {\n        _assertClass(torque, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbAddTorque(this.ptr, handle, torque.ptr, wakeUp);\n    }\n    /**\n    * Applies an impulsive torque at the center-of-mass of this rigid-body.\n    *\n    * # Parameters\n    * - `torque impulse`: the world-space torque impulse to apply on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} torque_impulse\n    * @param {boolean} wakeUp\n    */\n    rbApplyTorqueImpulse(handle, torque_impulse, wakeUp) {\n        _assertClass(torque_impulse, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbApplyTorqueImpulse(this.ptr, handle, torque_impulse.ptr, wakeUp);\n    }\n    /**\n    * Adds a force at the given world-space point of this rigid-body.\n    *\n    * # Parameters\n    * - `force`: the world-space force to apply on the rigid-body.\n    * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} force\n    * @param {RawVector} point\n    * @param {boolean} wakeUp\n    */\n    rbAddForceAtPoint(handle, force, point, wakeUp) {\n        _assertClass(force, RawVector);\n        _assertClass(point, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbAddForceAtPoint(this.ptr, handle, force.ptr, point.ptr, wakeUp);\n    }\n    /**\n    * Applies an impulse at the given world-space point of this rigid-body.\n    *\n    * # Parameters\n    * - `impulse`: the world-space impulse to apply on the rigid-body.\n    * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n    * - `wakeUp`: should the rigid-body be automatically woken-up?\n    * @param {number} handle\n    * @param {RawVector} impulse\n    * @param {RawVector} point\n    * @param {boolean} wakeUp\n    */\n    rbApplyImpulseAtPoint(handle, impulse, point, wakeUp) {\n        _assertClass(impulse, RawVector);\n        _assertClass(point, RawVector);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbApplyImpulseAtPoint(this.ptr, handle, impulse.ptr, point.ptr, wakeUp);\n    }\n    /**\n    * An arbitrary user-defined 32-bit integer\n    * @param {number} handle\n    * @returns {number}\n    */\n    rbUserData(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbUserData(this.ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n    * Sets the user-defined 32-bit integer of this rigid-body.\n    *\n    * # Parameters\n    * - `data`: an arbitrary user-defined 32-bit integer.\n    * @param {number} handle\n    * @param {number} data\n    */\n    rbSetUserData(handle, data) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_rbSetUserData(this.ptr, handle, data);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_new();\n        return RawRigidBodySet.__wrap(ret);\n    }\n    /**\n    * @param {boolean} enabled\n    * @param {RawVector} translation\n    * @param {RawRotation} rotation\n    * @param {number} gravityScale\n    * @param {number} mass\n    * @param {boolean} massOnly\n    * @param {RawVector} centerOfMass\n    * @param {RawVector} linvel\n    * @param {RawVector} angvel\n    * @param {RawVector} principalAngularInertia\n    * @param {RawRotation} angularInertiaFrame\n    * @param {boolean} translationEnabledX\n    * @param {boolean} translationEnabledY\n    * @param {boolean} translationEnabledZ\n    * @param {boolean} rotationEnabledX\n    * @param {boolean} rotationEnabledY\n    * @param {boolean} rotationEnabledZ\n    * @param {number} linearDamping\n    * @param {number} angularDamping\n    * @param {number} rb_type\n    * @param {boolean} canSleep\n    * @param {boolean} sleeping\n    * @param {boolean} ccdEnabled\n    * @param {number} dominanceGroup\n    * @returns {number}\n    */\n    createRigidBody(enabled, translation, rotation, gravityScale, mass, massOnly, centerOfMass, linvel, angvel, principalAngularInertia, angularInertiaFrame, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, ccdEnabled, dominanceGroup) {\n        _assertClass(translation, RawVector);\n        _assertClass(rotation, RawRotation);\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(linvel, RawVector);\n        _assertClass(angvel, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_createRigidBody(this.ptr, enabled, translation.ptr, rotation.ptr, gravityScale, mass, massOnly, centerOfMass.ptr, linvel.ptr, angvel.ptr, principalAngularInertia.ptr, angularInertiaFrame.ptr, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, ccdEnabled, dominanceGroup);\n        return ret;\n    }\n    /**\n    * @param {number} handle\n    * @param {RawIslandManager} islands\n    * @param {RawColliderSet} colliders\n    * @param {RawImpulseJointSet} joints\n    * @param {RawMultibodyJointSet} articulations\n    */\n    remove(handle, islands, colliders, joints, articulations) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_remove(this.ptr, handle, islands.ptr, colliders.ptr, joints.ptr, articulations.ptr);\n    }\n    /**\n    * The number of rigid-bodies on this set.\n    * @returns {number}\n    */\n    len() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Checks if a rigid-body with the given integer handle exists.\n    * @param {number} handle\n    * @returns {boolean}\n    */\n    contains(handle) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_contains(this.ptr, handle);\n        return ret !== 0;\n    }\n    /**\n    * Applies the given JavaScript function to the integer handle of each rigid-body managed by this set.\n    *\n    * # Parameters\n    * - `f(handle)`: the function to apply to the integer handle of each rigid-body managed by this set. Called as `f(collider)`.\n    * @param {Function} f\n    */\n    forEachRigidBodyHandle(f) {\n        try {\n            _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_forEachRigidBodyHandle(this.ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * @param {RawColliderSet} colliders\n    */\n    propagateModifiedBodyPositionsToColliders(colliders) {\n        _assertClass(colliders, RawColliderSet);\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.ptr, colliders.ptr);\n    }\n}\n/**\n* A rotation quaternion.\n*/\nclass RawRotation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawRotation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawrotation_free(ptr);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @param {number} w\n    */\n    constructor(x, y, z, w) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrotation_new(x, y, z, w);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The identity quaternion.\n    * @returns {RawRotation}\n    */\n    static identity() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrotation_identity();\n        return RawRotation.__wrap(ret);\n    }\n    /**\n    * The `x` component of this quaternion.\n    * @returns {number}\n    */\n    get x() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_dt(this.ptr);\n        return ret;\n    }\n    /**\n    * The `y` component of this quaternion.\n    * @returns {number}\n    */\n    get y() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrotation_y(this.ptr);\n        return ret;\n    }\n    /**\n    * The `z` component of this quaternion.\n    * @returns {number}\n    */\n    get z() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * The `w` component of this quaternion.\n    * @returns {number}\n    */\n    get w() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrotation_w(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass RawSdpMatrix3 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawSdpMatrix3.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawsdpmatrix3_free(ptr);\n    }\n    /**\n    * Row major list of the upper-triangular part of the symmetric matrix.\n    * @returns {Float32Array}\n    */\n    elements() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawsdpmatrix3_elements(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass RawSerializationPipeline {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawSerializationPipeline.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawserializationpipeline_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawserializationpipeline_new();\n        return RawSerializationPipeline.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} gravity\n    * @param {RawIntegrationParameters} integrationParameters\n    * @param {RawIslandManager} islands\n    * @param {RawBroadPhase} broadPhase\n    * @param {RawNarrowPhase} narrowPhase\n    * @param {RawRigidBodySet} bodies\n    * @param {RawColliderSet} colliders\n    * @param {RawImpulseJointSet} impulse_joints\n    * @param {RawMultibodyJointSet} multibody_joints\n    * @returns {Uint8Array | undefined}\n    */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulse_joints, multibody_joints) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawserializationpipeline_serializeAll(this.ptr, gravity.ptr, integrationParameters.ptr, islands.ptr, broadPhase.ptr, narrowPhase.ptr, bodies.ptr, colliders.ptr, impulse_joints.ptr, multibody_joints.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {RawDeserializedWorld | undefined}\n    */\n    deserializeAll(data) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawserializationpipeline_deserializeAll(this.ptr, addHeapObject(data));\n        return ret === 0 ? undefined : RawDeserializedWorld.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawShape {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawShape.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawshape_free(ptr);\n    }\n    /**\n    * @param {number} hx\n    * @param {number} hy\n    * @param {number} hz\n    * @returns {RawShape}\n    */\n    static cuboid(hx, hy, hz) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_cuboid(hx, hy, hz);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} hx\n    * @param {number} hy\n    * @param {number} hz\n    * @param {number} borderRadius\n    * @returns {RawShape}\n    */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundCuboid(hx, hy, hz, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} radius\n    * @returns {RawShape}\n    */\n    static ball(radius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_ball(radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} normal\n    * @returns {RawShape}\n    */\n    static halfspace(normal) {\n        _assertClass(normal, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_halfspace(normal.ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} halfHeight\n    * @param {number} radius\n    * @returns {RawShape}\n    */\n    static capsule(halfHeight, radius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_capsule(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} halfHeight\n    * @param {number} radius\n    * @returns {RawShape}\n    */\n    static cylinder(halfHeight, radius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_cylinder(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} halfHeight\n    * @param {number} radius\n    * @param {number} borderRadius\n    * @returns {RawShape}\n    */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundCylinder(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} halfHeight\n    * @param {number} radius\n    * @returns {RawShape}\n    */\n    static cone(halfHeight, radius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_cone(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} halfHeight\n    * @param {number} radius\n    * @param {number} borderRadius\n    * @returns {RawShape}\n    */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundCone(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} vertices\n    * @param {Uint32Array} indices\n    * @returns {RawShape}\n    */\n    static polyline(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_polyline(ptr0, len0, ptr1, len1);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} vertices\n    * @param {Uint32Array} indices\n    * @returns {RawShape}\n    */\n    static trimesh(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_trimesh(ptr0, len0, ptr1, len1);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {number} nrows\n    * @param {number} ncols\n    * @param {Float32Array} heights\n    * @param {RawVector} scale\n    * @returns {RawShape}\n    */\n    static heightfield(nrows, ncols, heights, scale) {\n        const ptr0 = passArrayF32ToWasm0(heights, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(scale, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_heightfield(nrows, ncols, ptr0, len0, scale.ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} p1\n    * @param {RawVector} p2\n    * @returns {RawShape}\n    */\n    static segment(p1, p2) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_segment(p1.ptr, p2.ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} p1\n    * @param {RawVector} p2\n    * @param {RawVector} p3\n    * @returns {RawShape}\n    */\n    static triangle(p1, p2, p3) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_triangle(p1.ptr, p2.ptr, p3.ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} p1\n    * @param {RawVector} p2\n    * @param {RawVector} p3\n    * @param {number} borderRadius\n    * @returns {RawShape}\n    */\n    static roundTriangle(p1, p2, p3, borderRadius) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundTriangle(p1.ptr, p2.ptr, p3.ptr, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} points\n    * @returns {RawShape | undefined}\n    */\n    static convexHull(points) {\n        const ptr0 = passArrayF32ToWasm0(points, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_convexHull(ptr0, len0);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} points\n    * @param {number} borderRadius\n    * @returns {RawShape | undefined}\n    */\n    static roundConvexHull(points, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(points, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundConvexHull(ptr0, len0, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} vertices\n    * @param {Uint32Array} indices\n    * @returns {RawShape | undefined}\n    */\n    static convexMesh(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_convexMesh(ptr0, len0, ptr1, len1);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n    * @param {Float32Array} vertices\n    * @param {Uint32Array} indices\n    * @param {number} borderRadius\n    * @returns {RawShape | undefined}\n    */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(vertices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_roundConvexMesh(ptr0, len0, ptr1, len1, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} shapePos1\n    * @param {RawRotation} shapeRot1\n    * @param {RawVector} shapeVel1\n    * @param {RawShape} shape2\n    * @param {RawVector} shapePos2\n    * @param {RawRotation} shapeRot2\n    * @param {RawVector} shapeVel2\n    * @param {number} maxToi\n    * @param {boolean} stop_at_penetration\n    * @returns {RawShapeTOI | undefined}\n    */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, maxToi, stop_at_penetration) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shapeVel1, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        _assertClass(shapeVel2, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_castShape(this.ptr, shapePos1.ptr, shapeRot1.ptr, shapeVel1.ptr, shape2.ptr, shapePos2.ptr, shapeRot2.ptr, shapeVel2.ptr, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeTOI.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} shapePos1\n    * @param {RawRotation} shapeRot1\n    * @param {RawShape} shape2\n    * @param {RawVector} shapePos2\n    * @param {RawRotation} shapeRot2\n    * @returns {boolean}\n    */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_intersectsShape(this.ptr, shapePos1.ptr, shapeRot1.ptr, shape2.ptr, shapePos2.ptr, shapeRot2.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {RawVector} shapePos1\n    * @param {RawRotation} shapeRot1\n    * @param {RawShape} shape2\n    * @param {RawVector} shapePos2\n    * @param {RawRotation} shapeRot2\n    * @param {number} prediction\n    * @returns {RawShapeContact | undefined}\n    */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_contactShape(this.ptr, shapePos1.ptr, shapeRot1.ptr, shape2.ptr, shapePos2.ptr, shapeRot2.ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} point\n    * @returns {boolean}\n    */\n    containsPoint(shapePos, shapeRot, point) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_containsPoint(this.ptr, shapePos.ptr, shapeRot.ptr, point.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} point\n    * @param {boolean} solid\n    * @returns {RawPointProjection}\n    */\n    projectPoint(shapePos, shapeRot, point, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_projectPoint(this.ptr, shapePos.ptr, shapeRot.ptr, point.ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @returns {boolean}\n    */\n    intersectsRay(shapePos, shapeRot, rayOrig, rayDir, maxToi) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_intersectsRay(this.ptr, shapePos.ptr, shapeRot.ptr, rayOrig.ptr, rayDir.ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @returns {number}\n    */\n    castRay(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_castRay(this.ptr, shapePos.ptr, shapeRot.ptr, rayOrig.ptr, rayDir.ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n    * @param {RawVector} shapePos\n    * @param {RawRotation} shapeRot\n    * @param {RawVector} rayOrig\n    * @param {RawVector} rayDir\n    * @param {number} maxToi\n    * @param {boolean} solid\n    * @returns {RawRayIntersection | undefined}\n    */\n    castRayAndGetNormal(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshape_castRayAndGetNormal(this.ptr, shapePos.ptr, shapeRot.ptr, rayOrig.ptr, rayDir.ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawShapeColliderTOI {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawShapeColliderTOI.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawshapecollidertoi_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    colliderHandle() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_handle(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    witness1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldWitness1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    witness2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapecollidertoi_witness2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldNormal1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapecollidertoi_normal2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawShapeContact {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawShapeContact.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawshapecontact_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    distance() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapecontact_distance(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    point1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawkinematiccharactercontroller_computedMovement(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    point2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldWitness1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapecollidertoi_witness2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_worldNormal1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n/**\n*/\nclass RawShapeTOI {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawShapeTOI.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawshapetoi_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    toi() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_dt(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {RawVector}\n    */\n    witness1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapetoi_witness1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    witness2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcontactforceevent_total_force(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal1() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapetoi_normal1(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * @returns {RawVector}\n    */\n    normal2() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawshapetoi_normal2(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n/**\n* A vector.\n*/\nclass RawVector {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RawVector.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rawvector_free(ptr);\n    }\n    /**\n    * Creates a new vector filled with zeros.\n    * @returns {RawVector}\n    */\n    static zero() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_zero();\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Creates a new 3D vector from its two components.\n    *\n    * # Parameters\n    * - `x`: the `x` component of this 3D vector.\n    * - `y`: the `y` component of this 3D vector.\n    * - `z`: the `z` component of this 3D vector.\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    */\n    constructor(x, y, z) {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_new(x, y, z);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * The `x` component of this vector.\n    * @returns {number}\n    */\n    get x() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_dt(this.ptr);\n        return ret;\n    }\n    /**\n    * Sets the `x` component of this vector.\n    * @param {number} x\n    */\n    set x(x) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_dt(this.ptr, x);\n    }\n    /**\n    * The `y` component of this vector.\n    * @returns {number}\n    */\n    get y() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawrotation_y(this.ptr);\n        return ret;\n    }\n    /**\n    * Sets the `y` component of this vector.\n    * @param {number} y\n    */\n    set y(y) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_set_y(this.ptr, y);\n    }\n    /**\n    * The `z` component of this vector.\n    * @returns {number}\n    */\n    get z() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawcharactercollision_toi(this.ptr);\n        return ret;\n    }\n    /**\n    * Sets the `z` component of this vector.\n    * @param {number} z\n    */\n    set z(z) {\n        _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawintegrationparameters_set_erp(this.ptr, z);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{x, y, z}`.\n    *\n    * This will effectively return a copy of `this`. This method exist for completeness with the\n    * other swizzling functions.\n    * @returns {RawVector}\n    */\n    xyz() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_xyz(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{y, x, z}`.\n    * @returns {RawVector}\n    */\n    yxz() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_yxz(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{z, x, y}`.\n    * @returns {RawVector}\n    */\n    zxy() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_zxy(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{x, z, y}`.\n    * @returns {RawVector}\n    */\n    xzy() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_xzy(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{y, z, x}`.\n    * @returns {RawVector}\n    */\n    yzx() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_yzx(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n    * Create a new 3D vector from this vector with its components rearranged as `{z, y, x}`.\n    * @returns {RawVector}\n    */\n    zyx() {\n        const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rawvector_zyx(this.ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n};\n\nfunction __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nfunction __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nfunction __wbg_rawraycolliderintersection_new(arg0) {\n    const ret = RawRayColliderIntersection.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_rawcontactforceevent_new(arg0) {\n    const ret = RawContactForceEvent.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_call_168da88779e35f61() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_call_3999bee59e9f7719() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_call_e1f72c051cdab859() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_bind_10dfe70e95d2a480(arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).bind(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_buffer_3f3d764d4747d564(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_newwithbyteoffsetandlength_d9aa266703cb98be(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_8c3f0052272a457a(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_83db9690f9353e79(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nfunction __wbg_length_9e1ae1900cb0fbd5(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_0e0314cf6675c1b9(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nfunction __wbg_length_9a2deed95d22668d(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_newwithlength_a7168e4a1e8f5e12(arg0) {\n    const ret = new Float32Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nfunction __wbindgen_memory() {\n    const ret = _rapier_wasm3d_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory;\n    return addHeapObject(ret);\n};\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js\n");

/***/ }),

/***/ "./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.wasm":
/*!***************************************************************!*\
  !*** ./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.wasm ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __webpack_instantiate__ = ([WEBPACK_IMPORTED_MODULE_0]) => {
	return __webpack_require__.v(exports, module.id, "c68357353cfaaac8ce4a", {
		"./rapier_wasm3d_bg.js": {
			"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
			"__wbindgen_number_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_new,
			"__wbindgen_number_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_get,
			"__wbindgen_boolean_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_boolean_get,
			"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
			"__wbg_rawraycolliderintersection_new": WEBPACK_IMPORTED_MODULE_0.__wbg_rawraycolliderintersection_new,
			"__wbg_rawcontactforceevent_new": WEBPACK_IMPORTED_MODULE_0.__wbg_rawcontactforceevent_new,
			"__wbg_call_168da88779e35f61": WEBPACK_IMPORTED_MODULE_0.__wbg_call_168da88779e35f61,
			"__wbg_call_3999bee59e9f7719": WEBPACK_IMPORTED_MODULE_0.__wbg_call_3999bee59e9f7719,
			"__wbg_call_e1f72c051cdab859": WEBPACK_IMPORTED_MODULE_0.__wbg_call_e1f72c051cdab859,
			"__wbg_bind_10dfe70e95d2a480": WEBPACK_IMPORTED_MODULE_0.__wbg_bind_10dfe70e95d2a480,
			"__wbg_buffer_3f3d764d4747d564": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_3f3d764d4747d564,
			"__wbg_newwithbyteoffsetandlength_d9aa266703cb98be": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be,
			"__wbg_new_8c3f0052272a457a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_8c3f0052272a457a,
			"__wbg_set_83db9690f9353e79": WEBPACK_IMPORTED_MODULE_0.__wbg_set_83db9690f9353e79,
			"__wbg_length_9e1ae1900cb0fbd5": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9e1ae1900cb0fbd5,
			"__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4,
			"__wbg_set_0e0314cf6675c1b9": WEBPACK_IMPORTED_MODULE_0.__wbg_set_0e0314cf6675c1b9,
			"__wbg_length_9a2deed95d22668d": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9a2deed95d22668d,
			"__wbg_newwithlength_a7168e4a1e8f5e12": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithlength_a7168e4a1e8f5e12,
			"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
			"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory
		}
	});
}
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => {
	try {
	/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./rapier_wasm3d_bg.js */ "./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js");
	var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([WEBPACK_IMPORTED_MODULE_0]);
	var [WEBPACK_IMPORTED_MODULE_0] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__;
	await __webpack_require__.v(exports, module.id, "c68357353cfaaac8ce4a", {
		"./rapier_wasm3d_bg.js": {
			"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
			"__wbindgen_number_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_new,
			"__wbindgen_number_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_get,
			"__wbindgen_boolean_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_boolean_get,
			"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
			"__wbg_rawraycolliderintersection_new": WEBPACK_IMPORTED_MODULE_0.__wbg_rawraycolliderintersection_new,
			"__wbg_rawcontactforceevent_new": WEBPACK_IMPORTED_MODULE_0.__wbg_rawcontactforceevent_new,
			"__wbg_call_168da88779e35f61": WEBPACK_IMPORTED_MODULE_0.__wbg_call_168da88779e35f61,
			"__wbg_call_3999bee59e9f7719": WEBPACK_IMPORTED_MODULE_0.__wbg_call_3999bee59e9f7719,
			"__wbg_call_e1f72c051cdab859": WEBPACK_IMPORTED_MODULE_0.__wbg_call_e1f72c051cdab859,
			"__wbg_bind_10dfe70e95d2a480": WEBPACK_IMPORTED_MODULE_0.__wbg_bind_10dfe70e95d2a480,
			"__wbg_buffer_3f3d764d4747d564": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_3f3d764d4747d564,
			"__wbg_newwithbyteoffsetandlength_d9aa266703cb98be": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be,
			"__wbg_new_8c3f0052272a457a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_8c3f0052272a457a,
			"__wbg_set_83db9690f9353e79": WEBPACK_IMPORTED_MODULE_0.__wbg_set_83db9690f9353e79,
			"__wbg_length_9e1ae1900cb0fbd5": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9e1ae1900cb0fbd5,
			"__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_be22e5fcf4f69ab4,
			"__wbg_set_0e0314cf6675c1b9": WEBPACK_IMPORTED_MODULE_0.__wbg_set_0e0314cf6675c1b9,
			"__wbg_length_9a2deed95d22668d": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9a2deed95d22668d,
			"__wbg_newwithlength_a7168e4a1e8f5e12": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithlength_a7168e4a1e8f5e12,
			"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
			"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory
		}
	});
	__webpack_async_result__();
	} catch(e) { __webpack_async_result__(e); }
}, 1);

/***/ })

}]);